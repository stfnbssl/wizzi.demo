{"version":3,"file":"Editor/MonacoEditor.b10b0980924fbabbf6b9.chunk.js","sources":["webpack://wizzi.editor/./src/components/Editor/MonacoEditor.tsx","webpack://wizzi.editor/./src/components/Editor/themes/colors-dark.tsx","webpack://wizzi.editor/./src/components/Editor/themes/colors-light.tsx","webpack://wizzi.editor/./src/components/Editor/themes/monaco-overrides.tsx","webpack://wizzi.editor/./src/components/Editor/themes/monaco.tsx","webpack://wizzi.editor/./src/components/widgets/ResizeDetector.tsx","webpack://wizzi.editor/./src/features/prettier/index.tsx","webpack://wizzi.editor/./src/features/prettier/prettierCode.tsx"],"sourcesContent":["/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\MonacoEditor.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.main';\nimport {SimpleEditorModelResolverService} from 'monaco-editor/esm/vs/editor/standalone/browser/simpleServices';\nimport {StaticServices} from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices';\nimport * as React from 'react';\nimport {Annotation} from '../../features/annotations/index';\nimport {getFileLanguage, getRelativePath, getAbsolutePath} from '../../features/file/index';\nimport {prettierCode} from '../../features/prettier/index';\nimport {withThemeName, ThemeName} from '../../features/preferences/index';\nimport ResizeDetector from '../widgets/ResizeDetector';\nimport {EditorProps} from './EditorProps';\nimport {light, dark} from './themes/monaco';\nimport overrides from './themes/monaco-overrides';\n\n/**\n    * \n    * Monkeypatch to make 'Find All References' work across multiple files\n    * https://github.com/Microsoft/monaco-editor/issues/779#issuecomment-374258435\n    * \n*/\n\n// @ts-ignore\nSimpleEditorModelResolverService.prototype.findModel = function(_: any, resource: any) { \n    return monaco.editor.getModels().find(model => \n        \n            model.uri.toString() === resource.toString()\n        );\n}\n;\n\n\n// @ts-ignore\nglobal.MonacoEnvironment = { getWorker(_: string, label: string) { switch (label) { case 'json': {  // @ts-ignore return new Worker('monaco-editor/esm/vs/language/json/json.worker', { type: 'module'  }); \n            }\n            case 'typescript':\n            case 'javascript': {\n                \n                // @ts-ignore\n                return new Worker('monaco-editor/esm/vs/language/typescript/ts.worker', { type: 'module'  }); \n            }\n            default: {\n                \n                // @ts-ignore\n                return new Worker('monaco-editor/esm/vs/editor/editor.worker', { type: 'module'  }); \n            }\n        }\n    }\n    \n };\n\nmonaco.editor.defineTheme('light', light);\nmonaco.editor.defineTheme('dark', dark);\n/**\n    // \n    // Disable typescript's diagnostics for JavaScript files.\n    // This suppresses errors when using Flow syntax.\n    // It's also unnecessary since we use ESLint for error checking.\n    // \n*/\n// \nmonaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n    noSemanticValidation: true, \n    noSyntaxValidation: true\n })\n\n/**\n    * \n    * Use prettier to format code.\n    * This will replace the default formatter.\n    * \n*/\nconst documentFormattingProvider: monaco.languages.DocumentFormattingEditProvider = {\n    async provideDocumentFormattingEdits(model) {\n        const text = await prettierCode(model.uri.path, model.getValue());\n        return [\n                {\n                    range: model.getFullModelRange(), \n                    text\n                 }\n            ];\n    }\n    \n };\nmonaco.languages.registerDocumentFormattingEditProvider('javascript', documentFormattingProvider);\nmonaco.languages.registerDocumentFormattingEditProvider('typescript', documentFormattingProvider);\n/**\n    // \n    // Sync all the models to the worker eagerly.\n    // This enables intelliSense for all files without needing an `addExtraLib` call.\n    // \n*/\nmonaco.languages.registerDocumentFormattingEditProvider('markdown', documentFormattingProvider);\n/**\n    // \n    // Sync all the models to the worker eagerly.\n    // This enables intelliSense for all files without needing an `addExtraLib` call.\n    // \n*/\nmonaco.languages.typescript.typescriptDefaults.setEagerModelSync(true);\nmonaco.languages.typescript.javascriptDefaults.setEagerModelSync(true)\n/**\n    * \n    * Configure the typescript compiler to detect JSX and load type definitions\n    * \n*/\nconst compilerOptions: monaco.languages.typescript.CompilerOptions = {\n    allowJs: true, \n    allowSyntheticDefaultImports: true, \n    alwaysStrict: true, \n    esModuleInterop: true, \n    forceConsistentCasingInFileNames: true, \n    isolatedModules: true, \n    jsx: monaco.languages.typescript.JsxEmit.React, \n    module: monaco.languages.typescript.ModuleKind.ESNext, \n    moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs, \n    noEmit: true, \n    resolveJsonModule: true, \n    strict: true, \n    target: monaco.languages.typescript.ScriptTarget.ESNext, \n    paths: {\n        '*': [\n            '*', \n            '*.native', \n            '*.ios', \n            '*.android'\n        ]\n     }\n };\n\nmonaco.languages.typescript.typescriptDefaults.setCompilerOptions(compilerOptions);\nmonaco.languages.typescript.javascriptDefaults.setCompilerOptions(compilerOptions);\nexport type MonacoEditorProps = EditorProps & { \n    theme: ThemeName;\n};\ntype State = { \n};\n\n// Store editor states such as cursor position, selection and scroll position for each model\nconst editorStates = new Map();\n\n// Store details about typings we have requested and loaded\nconst requestedTypings = new Map();\nconst extraLibs = new Map();\nconst codeEditorService = StaticServices.codeEditorService.get();\nconst findModel = (path: string) => \n\n    monaco.editor.getModels().find(model => \n    \n        model.uri.path === (`/${path}`)\n    )\n;\nclass MonacoEditorComp extends React.Component<MonacoEditorProps, State> {\n    static defaultProps: Partial<MonacoEditorProps> = {\n        lineNumbers: 'on', \n        wordWrap: 'on', \n        scrollBeyondLastLine: false, \n        minimap: {\n            enabled: false\n         }, \n        fontFamily: 'var(--font-monospace)', \n        fontLigatures: true\n    }\n    ;\n    state: State = {};\n    static removePath(path: string) {\n        // Remove editor states\n        editorStates.delete(path);\n        \n        // Remove associated models\n        const model = findModel(path);\n        model?.dispose?.();\n    }\n    static renamePath(oldPath: string, newPath: string) {\n        const selection = editorStates.get(oldPath);\n        editorStates.delete(oldPath);\n        editorStates.set(newPath, selection);\n        this.removePath(oldPath);\n    }\n    componentDidMount() {\n        const {\n            files, \n            selectedFile, \n            autoFocus, \n            updateFiles, \n            onSelectFile, \n            ...rest\n         } = this.props;\n        \n        // The methods provided by the service are on it's prototype\n        \n        // So spreading this object doesn't work, we must mutate it\n        codeEditorService.openCodeEditor = async ({\n            resource, \n            options\n         }: any, editor: monaco.editor.IStandaloneCodeEditor) => {\n        \n            // Remove the leading slash added by the Uri\n            this.props.onSelectFile(resource.path.replace(/^\\//, ''));\n            editor.setSelection(options.selection);\n            editor.revealLine(options.selection.startLineNumber);\n            return {\n                    getControl: () => \n                    \n                        editor\n                    \n                 };\n        }\n        ;\n        const editor = monaco.editor.create(this._node.current as HTMLDivElement, rest, codeEditorService);\n        this._editor = editor;\n        this._disposables = [\n            editor\n        ];\n        this._disposables.push(editor.onDidChangeModelContent(this._handleEditFile));\n        this._openFile(selectedFile, files[selectedFile]?.contents as string, autoFocus)\n        for (const path in files) {\n            const file = files[path];\n            if (file.type === 'CODE') {\n                this._initializeFile(path, file.contents);\n            }\n            // Load all the files so the editor can provide proper intellisense\n        }\n    }\n    componentDidUpdate(prevProps: MonacoEditorProps, prevState: State) {\n        const {\n            selectedFile, \n            files, \n            autoFocus, \n            theme, \n            updateFiles, \n            onSelectFile, \n            ...rest\n         } = this.props;\n        if (this._editor) {\n            this._editor.updateOptions(rest);\n            const model = this._editor.getModel();\n            const value: string = files[selectedFile]?.contents as any;\n            if (selectedFile !== prevProps.selectedFile) {\n                // Save the editor state for the previous file so we can restore it when it's re-opened\n                editorStates.set(prevProps.selectedFile, this._editor.saveViewState());\n                this._openFile(selectedFile, value, autoFocus);\n            }\n            else {\n                if (model && value !== model.getValue()) {\n                    // @ts-ignore\n                    this._editor.executeEdits(null, [\n                        {\n                            range: model.getFullModelRange(), \n                            text: value\n                         }\n                    ])\n                }\n            }\n        }\n        if (theme !== prevProps.theme) {\n            monaco.editor.setTheme(theme);\n        }\n        if (prevProps.files !== this.props.files) {\n            for (const path in this.props.files) {\n                const file = this.props.files[path];\n                if (file.type === 'CODE' && file.contents !== prevProps.files[path]?.contents && path !== selectedFile) {\n                    this._initializeFile(path, file.contents);\n                }\n            }\n        }\n    }\n    componentWillUnmount() {\n        this._disposables.forEach(dis => \n        \n            dis.dispose()\n        )\n    }\n    _initializeFile = (path: string, value: string) => {\n        let model = findModel(path);\n        if (model && !model.isDisposed()) {\n            // If a model exists, we need to update it's value\n            // This is needed because the content for the file might have been modified externally\n            // Use `pushEditOperations` instead of `setValue` or `applyEdits` to preserve undo stack\n            // @ts-ignore\n            model.pushEditOperations([], [\n                {\n                    range: model.getFullModelRange(), \n                    text: value\n                 }\n            ])\n        }\n        else {\n            model = monaco.editor.createModel(value, undefined, monaco.Uri.from({\n                scheme: 'file', \n                path\n             }))\n            ;\n            model.updateOptions({\n                tabSize: 2, \n                insertSpaces: true\n             })\n        }\n    };\n    _openFile = (path: string, value: string, focus?: boolean) => {\n        this._initializeFile(path, value);\n        const model = findModel(path);\n        if (this._editor && model) {\n            this._editor.setModel(model);\n            \n            // Restore the editor state for the file\n            const editorState = editorStates.get(path);\n            if (editorState) {\n                this._editor.restoreViewState(editorState);\n            }\n            if (focus) {\n                this._editor.focus();\n            }\n        }\n    };\n    _handleEditFile = (_event: monaco.editor.IModelContentChangedEvent):  void => {\n        const model = this._editor?.getModel?.();\n        if (model) {\n            const value = model.getValue();\n            console.log('MonacoEditor', '_handleEditFile', value);\n            if (value !== this.props.files[this.props.selectedFile]?.contents) {\n                this.props.updateFiles(() => \n                \n                    ({\n                        [this.props.selectedFile]: {\n                            type: 'CODE', \n                            contents: value\n                         }\n                     })\n                )\n            }\n        }\n    };\n    _handleResize = debounce(() => \n    \n        this._editor?.layout?.()\n    , 50, {\n        leading: true, \n        trailing: true\n     });\n    _disposables: monaco.IDisposable[] = [];\n    _editor: monaco.editor.IStandaloneCodeEditor | null = null;\n    _node = React.createRef<HTMLDivElement>();\n    _statusbar = React.createRef<HTMLDivElement>();\n    render() {\n        return  (\n            <div\n             className={css(styles.container)}>\n                <style\n                 type=\"text/css\" dangerouslySetInnerHTML={{\n                        __html: overrides\n                     }} />\n                <ResizeDetector\n                 onResize={this._handleResize}>\n                    <div\n                     ref={this._node} className={classnames(css(styles.editor), 'packi-monaco-editor', `theme-${this.props.theme}`)} />\n                </ResizeDetector>\n            </div>\n            )\n        ;\n    }\n}\nexport const MonacoEditor = withThemeName(MonacoEditorComp);\nexport default withThemeName(MonacoEditorComp);\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'column', \n        minWidth: 0, \n        minHeight: 0\n     }, \n    editor: {\n        height: '100%', \n        width: '100%'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\colors-dark.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {c} from '../../ThemeProvider';\nimport type {SyntaxColors, UIColors} from './colors-light';\nexport const syntax: SyntaxColors = {\n    text: '#d9d7ce', \n    variable: '#d9d7ce', \n    invalid: '#ff3333', \n    constant: '#ff9d45', \n    comment: '#5c6773', \n    regexp: '#95e6cb', \n    annotation: '#5ccfe6', \n    tag: '#80d4ff', \n    number: '#ff9d45', \n    string: '#bae67e', \n    property: '#5ccfe6', \n    value: '#bae67e', \n    keyword: '#ffae57', \n    operator: '#778899', \n    predefined: '#ff00ff'\n };\nexport const ui: UIColors = {\n    background: c('background', 'dark'), \n    text: '#d9d7ce', \n    selection: '#aaaaaa', \n    indent: {\n        active: '#393b41', \n        inactive: '#494b51'\n     }\n };\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\colors-light.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {c} from '../../ThemeProvider';\nexport const syntax = {\n    text: '#5c6773', \n    variable: '#5c6773', \n    invalid: '#ff3333', \n    constant: '#f08c36', \n    comment: '#abb0b6', \n    regexp: '#4dbf99', \n    annotation: '#41a6d9', \n    tag: '#e7c547', \n    number: '#f08c36', \n    string: '#86b300', \n    property: '#41a6d9', \n    value: '#0451a5', \n    keyword: '#f2590c', \n    operator: '#778899', \n    predefined: '#FF00FF'\n };\nexport const ui = {\n    background: c('background', 'light'), \n    text: '#5c6773', \n    selection: '#cccccc', \n    indent: {\n        active: '#e0e0e0', \n        inactive: '#ecebec'\n     }\n };\nexport type SyntaxColors = typeof syntax;\nexport type UIColors = typeof ui;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\monaco-overrides.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {c, s} from '../../ThemeProvider';\nimport * as darkColors from './colors-dark';\nimport * as lightColors from './colors-light';\nimport {light, dark} from './monaco';\nconst css = String.raw;\nexport default css`\n  /* Common overrides */\n  .packi-monaco-editor .monaco-editor .line-numbers {\n    color: currentColor;\n    opacity: 0.5;\n  }\n\n  /* Context menu overrides */\n  .packi-monaco-editor .context-view.monaco-menu-container {\n    font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    background-color: transparent;\n    box-shadow: none;\n    border: none;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar {\n    padding: 4px;\n    border-radius: 3px;\n    border-style: solid;\n    box-shadow: ${s('popover')} !important;\n    background-color: ${c('content')} !important;\n    color: ${c('text')} !important;\n    border-color: transparent !important;\n  }\n\n  .packi-monaco-editor.theme-light .monaco-menu .monaco-action-bar {\n    border-width: 0;\n  }\n\n  .packi-monaco-editor.theme-dark .monaco-menu .monaco-action-bar {\n    border-width: 1px;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item .action-label,\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item .action-label:focus {\n    font-size: 14px;\n    line-height: 1;\n    color: inherit;\n    border: 0;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item .action-menu-item,\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item .action-menu-item:focus {\n    color: inherit !important;\n    text-shadow: none !important;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item.disabled .action-menu-item {\n    pointer-events: none;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item.focused:not(.disabled),\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item:hover:not(.disabled) {\n    border-radius: 2px;\n    background-color: ${c('primary')} !important;\n    color: white !important;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-item .action-menu-item {\n    background-color: transparent !important;\n    color: inherit !important;\n  }\n\n  .packi-monaco-editor\n    .monaco-menu\n    .monaco-action-bar\n    .action-item\n    .action-menu-item:focus:not(.disabled)\n    .action-label,\n  .packi-monaco-editor\n    .monaco-menu\n    .monaco-action-bar\n    .action-item:hover:not(.disabled)\n    .action-label {\n    color: inherit;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .keybinding {\n    color: inherit;\n    font-size: 85%;\n    font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n    line-height: 18px;\n    opacity: 0.5;\n    margin-left: 8px;\n  }\n\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .keybinding,\n  .packi-monaco-editor .monaco-menu .monaco-action-bar .action-label:not(.separator) {\n    padding: 8px 12px;\n  }\n\n  .packi-monaco-editor .monaco-action-bar .action-label.separator {\n    border-bottom-color: currentColor;\n    opacity: 0.1;\n  }\n\n  /* Light theme overrides */\n  .packi-monaco-editor.theme-light .JsxText {\n    color: ${light.colors['editor.foreground']};\n  }\n\n  .packi-monaco-editor.theme-light .JsxSelfClosingElement,\n  .packi-monaco-editor.theme-light .JsxOpeningElement,\n  .packi-monaco-editor.theme-light .JsxClosingElement,\n  .packi-monaco-editor.theme-light .tagName-of-JsxOpeningElement,\n  .packi-monaco-editor.theme-light .tagName-of-JsxClosingElement,\n  .packi-monaco-editor.theme-light .tagName-of-JsxSelfClosingElement {\n    color: ${lightColors.syntax.property};\n  }\n\n  .packi-monaco-editor.theme-light .name-of-JsxAttribute {\n    color: ${lightColors.syntax.number};\n  }\n\n  .packi-monaco-editor.theme-light .name-of-PropertyAssignment {\n    color: ${lightColors.syntax.string};\n  }\n\n  .packi-monaco-editor.theme-light .name-of-PropertyAccessExpression {\n    color: ${lightColors.syntax.constant};\n  }\n\n  /* Dark theme overrides */\n  .packi-monaco-editor.theme-dark .JsxText {\n    color: ${dark.colors['editor.foreground']};\n  }\n\n  .packi-monaco-editor.theme-dark .JsxSelfClosingElement,\n  .packi-monaco-editor.theme-dark .JsxOpeningElement,\n  .packi-monaco-editor.theme-dark .JsxClosingElement,\n  .packi-monaco-editor.theme-dark .tagName-of-JsxOpeningElement,\n  .packi-monaco-editor.theme-dark .tagName-of-JsxClosingElement,\n  .packi-monaco-editor.theme-dark .tagName-of-JsxSelfClosingElement {\n    color: ${darkColors.syntax.property};\n  }\n\n  .packi-monaco-editor.theme-dark .name-of-JsxAttribute {\n    color: ${darkColors.syntax.number};\n  }\n\n  .packi-monaco-editor.theme-dark .name-of-PropertyAssignment {\n    color: ${darkColors.syntax.string};\n  }\n\n  .packi-monaco-editor.theme-dark .name-of-PropertyAccessExpression {\n    color: ${darkColors.syntax.constant};\n  }\n\n  .packi-monaco-vim-statusbar {\n    font-family: ${'var(--font-monospace)'};\n    font-size: 12px;\n    padding: 0 16px;\n    height: 24px;\n    line-height: 24px;\n    border-top: 1px solid ${c('border')};\n  }\n\n  .packi-monaco-vim-statusbar input {\n    font-family: ${'var(--font-monospace)'};\n    height: 100%;\n    outline: 0;\n    border: 0;\n    background: transparent;\n  }\n`;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\themes\\monaco.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as darkColors from './colors-dark';\nimport * as lightColors from './colors-light';\nconst c = (color: string) => \n\n    color.substr(1)\n;\nconst theme = ({\n    ui, \n    syntax\n }: { \n    ui: lightColors.UIColors;\n    syntax: lightColors.SyntaxColors;\n}, base: 'vs' | 'vs-dark') => \n\n    ({\n        base, \n        inherit: true, \n        rules: [\n            {\n                token: '', \n                foreground: c(syntax.text)\n             }, \n            {\n                token: 'invalid', \n                foreground: c(syntax.invalid)\n             }, \n            {\n                token: 'emphasis', \n                fontStyle: 'italic'\n             }, \n            {\n                token: 'strong', \n                fontStyle: 'bold'\n             }, \n            {\n                token: 'variable', \n                foreground: c(syntax.variable)\n             }, \n            {\n                token: 'variable.predefined', \n                foreground: c(syntax.variable)\n             }, \n            {\n                token: 'constant', \n                foreground: c(syntax.constant)\n             }, \n            {\n                token: 'comment', \n                foreground: c(syntax.comment), \n                fontStyle: 'italic'\n             }, \n            {\n                token: 'number', \n                foreground: c(syntax.number)\n             }, \n            {\n                token: 'number.hex', \n                foreground: c(syntax.number)\n             }, \n            {\n                token: 'regexp', \n                foreground: c(syntax.regexp)\n             }, \n            {\n                token: 'annotation', \n                foreground: c(syntax.annotation)\n             }, \n            {\n                token: 'type', \n                foreground: c(syntax.annotation)\n             }, \n            {\n                token: 'delimiter', \n                foreground: c(syntax.text)\n             }, \n            {\n                token: 'delimiter.html', \n                foreground: c(syntax.text)\n             }, \n            {\n                token: 'delimiter.xml', \n                foreground: c(syntax.text)\n             }, \n            {\n                token: 'tag', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'tag.id.jade', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'tag.class.jade', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'meta.scss', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'metatag', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'metatag.content.html', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'metatag.html', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'metatag.xml', \n                foreground: c(syntax.tag)\n             }, \n            {\n                token: 'metatag.php', \n                fontStyle: 'bold'\n             }, \n            {\n                token: 'key', \n                foreground: c(syntax.property)\n             }, \n            {\n                token: 'string.key.json', \n                foreground: c(syntax.property)\n             }, \n            {\n                token: 'string.value.json', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'attribute.name', \n                foreground: c(syntax.constant)\n             }, \n            {\n                token: 'attribute.value', \n                foreground: c(syntax.property)\n             }, \n            {\n                token: 'attribute.value.number', \n                foreground: c(syntax.number)\n             }, \n            {\n                token: 'attribute.value.unit', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'attribute.value.html', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'attribute.value.xml', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'string', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'string.html', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'string.sql', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'string.yaml', \n                foreground: c(syntax.string)\n             }, \n            {\n                token: 'keyword', \n                foreground: c(syntax.keyword)\n             }, \n            {\n                token: 'keyword.json', \n                foreground: c(syntax.keyword)\n             }, \n            {\n                token: 'keyword.flow', \n                foreground: c(syntax.keyword)\n             }, \n            {\n                token: 'keyword.flow.scss', \n                foreground: c(syntax.keyword)\n             }, \n            {\n                token: 'operator.scss', \n                foreground: c(syntax.operator)\n             }, \n            {\n                token: 'operator.sql', \n                foreground: c(syntax.operator)\n             }, \n            {\n                token: 'operator.swift', \n                foreground: c(syntax.operator)\n             }, \n            {\n                token: 'predefined.sql', \n                foreground: c(syntax.predefined)\n             }\n        ], \n        colors: {\n            'editor.background': ui.background, \n            'editor.foreground': ui.text, \n            'editorIndentGuide.background': ui.indent.inactive, \n            'editorIndentGuide.activeBackground': ui.indent.active, \n            'editorOverviewRuler.border': ui.background\n         }\n     })\n;\nexport const light = theme(lightColors, 'vs');\nexport const dark = theme(darkColors, 'vs-dark');\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ResizeDetector.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\n\ntype Props = { \n    onResize: () => void;\n    children: React.ReactNode;\n};\n\nexport default class ResizeDetector extends React.Component<Props> {\n        componentDidMount() {\n            const horiz = this._horizontal.current;\n            const verti = this._vertical.current;\n            horiz?.contentWindow?.addEventListener?.('resize', this._handleResize);\n            verti?.contentWindow?.addEventListener?.('resize', this._handleResize);\n        }\n        componentWillUnmount() {\n            const horiz = this._horizontal.current;\n            const verti = this._vertical.current;\n            horiz?.contentWindow?.removeEventListener?.('resize', this._handleResize);\n            verti?.contentWindow?.removeEventListener?.('resize', this._handleResize);\n        }\n        _handleResize = () => \n            this.props.onResize();\n        _horizontal = React.createRef<HTMLIFrameElement>();\n        _vertical = React.createRef<HTMLIFrameElement>();\n        render() {\n            return  (\n                <div\n                 className={css(styles.container)}>\n                    \n                    /**\n                        * pointer-events: none is not working properly on EDGE, so we render 2 iframes to detect resize instead of one iframe covering the entire editor\n                    */\n                    {}<iframe\n                     ref={this._horizontal} className={css(styles.phantom, styles.horizontal)} />\n                    <iframe\n                     ref={this._vertical} className={css(styles.phantom, styles.vertical)} />\n                    {this.props.children}\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'column', \n        minWidth: 0, \n        minHeight: 0, \n        position: 'relative'\n     }, \n    phantom: {\n        display: 'block', \n        position: 'absolute', \n        left: 0, \n        top: 0, \n        pointerEvents: 'none', \n        opacity: 0\n     }, \n    horizontal: {\n        height: 1, \n        width: '100%'\n     }, \n    vertical: {\n        height: '100%', \n        width: 1\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\prettier\\index.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport prettierCode from './prettierCode';\n\nexport {prettierCode};\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\prettier\\prettierCode.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {getFileLanguage} from '../file/index';\nexport default async function prettierCode(path: string, code: string):  Promise<string> {\n    \n        const language = getFileLanguage(path);\n        let parser;\n        let plugins;\n        switch (language) {\n            case 'javascript': {\n                parser = 'babel';\n                plugins = [\n                    await import('prettier/parser-babel')\n                ];\n                break;\n            }\n            case 'typescript': {\n                parser = 'typescript';\n                plugins = [\n                    await import('prettier/parser-typescript')\n                ];\n                break;\n            }\n            case 'markdown': {\n                parser = 'markdown';\n                plugins = await Promise.all([\n                        import('prettier/parser-babel'), \n                        import('prettier/parser-typescript'), \n                        import('prettier/parser-markdown')\n                    ]);\n                ;\n                break;\n            }\n        }\n        if (parser && plugins) {\n            const prettier = await import('prettier/standalone');\n            const {\n                default: config\n             } = await import('./prettier.json') as any;\n            return prettier.format(code, {\n                    parser, \n                    plugins, \n                    ...config\n                 });\n        }\n        return code;\n    }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAZA;AAcA;AACA;AAfA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAdA;AAwBA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAMA;;;;;;;;;;;;AAYA;AACA;AA4GA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;AArKA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAWA;AACA;AACA;AADA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AACA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAIA;;;AAwEA;AACA;AAEA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAKA;AADA;AAGA;AAAA;AADA;AAMA;;;AAnMA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA1BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AARA;AACA;AAgNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AARA;;A;;;;;;;;;;;;;;;ACnXA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;;A;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;;A;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAFA;AASA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AA9LA;AACA;AAsMA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAhBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AAEA;AADA;AAOA;AAAA;AADA;AAGA;AAAA;AADA;AAMA;;;;AAjCA;AACA;AADA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AArBA;;A;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA,iPACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA,gWACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA,6PACA,yUACA,sOACA;AAEA;AACA;AACA;AAxBA;AACA;AAyBA;AACA,+eAAA;AACA;AACA;AADA,8MAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;;A;;A","sourceRoot":""}