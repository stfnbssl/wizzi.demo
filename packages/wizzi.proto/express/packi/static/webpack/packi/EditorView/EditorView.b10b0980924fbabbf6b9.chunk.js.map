{"version":3,"file":"EditorView/EditorView.b10b0980924fbabbf6b9.chunk.js","sources":["webpack://wizzi.editor/./src/components/EditorView/EditorFooter.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorPanels.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorTitle.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorTitleName.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorToolbar.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorView.tsx","webpack://wizzi.editor/./src/components/EditorView/GeneratedView.tsx","webpack://wizzi.editor/./src/components/EditorView/GenerationErrors.tsx","webpack://wizzi.editor/./src/components/EditorView/KeyboardShortcuts.tsx","webpack://wizzi.editor/./src/components/EditorView/ModalEditTitleAndDescription.tsx","webpack://wizzi.editor/./src/components/EditorView/NoFileSelected.tsx","webpack://wizzi.editor/./src/components/EditorView/ProblemsPanel.tsx","webpack://wizzi.editor/./src/components/EditorView/UserMenu.tsx","webpack://wizzi.editor/./src/components/Editor/SimpleEditor.tsx","webpack://wizzi.editor/./src/components/FileList/FileList.tsx","webpack://wizzi.editor/./src/components/FileList/FileListChildren.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntry.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntryBase.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntryDropTarget.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntryIcon.tsx","webpack://wizzi.editor/./src/components/FileList/FileListOpenEntry.tsx","webpack://wizzi.editor/./src/components/FileList/FileListPane.tsx","webpack://wizzi.editor/./src/components/FileList/FileListPaneButton.tsx","webpack://wizzi.editor/./src/components/FileList/actions/closeEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/createEntryAtPath.tsx","webpack://wizzi.editor/./src/components/FileList/actions/createNewEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/expandEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/openEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/pasteEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/recursivelyCreateParents.tsx","webpack://wizzi.editor/./src/components/FileList/actions/renameEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/selectEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/updateEntry.tsx","webpack://wizzi.editor/./src/components/FileList/utils/convertFileStructure.tsx","webpack://wizzi.editor/./src/components/Form/Form.tsx","webpack://wizzi.editor/./src/components/Form/withStatus.tsx","webpack://wizzi.editor/./src/components/Form/withValidation.tsx","webpack://wizzi.editor/./src/components/Import/ImportFilesManager.tsx","webpack://wizzi.editor/./src/components/Packi/PackiManager.tsx","webpack://wizzi.editor/./src/components/Packi/PackiManagerContainer.tsx","webpack://wizzi.editor/./src/components/PageMetadata.tsx","webpack://wizzi.editor/./src/components/Publish/ModalPublishOverwriteError.tsx","webpack://wizzi.editor/./src/components/Publish/ModalPublishToProfile.tsx","webpack://wizzi.editor/./src/components/Publish/ModalPublishUnknownError.tsx","webpack://wizzi.editor/./src/components/Publish/ModalPublishing.tsx","webpack://wizzi.editor/./src/components/Publish/ModalSuccessfulPublish.tsx","webpack://wizzi.editor/./src/components/Publish/PublishManager.tsx","webpack://wizzi.editor/./src/components/widgets/Avatar.tsx","webpack://wizzi.editor/./src/components/widgets/Banner.tsx","webpack://wizzi.editor/./src/components/widgets/ContextMenu.tsx","webpack://wizzi.editor/./src/components/widgets/FooterButton.tsx","webpack://wizzi.editor/./src/components/widgets/IconButton.tsx","webpack://wizzi.editor/./src/components/widgets/KeybindingsManager.tsx","webpack://wizzi.editor/./src/components/widgets/LargeInput.tsx","webpack://wizzi.editor/./src/components/widgets/LargeTextArea.tsx","webpack://wizzi.editor/./src/components/widgets/LoadingText.tsx","webpack://wizzi.editor/./src/components/widgets/MenuButton.tsx","webpack://wizzi.editor/./src/components/widgets/Modal.tsx","webpack://wizzi.editor/./src/components/widgets/ModalDialog.tsx","webpack://wizzi.editor/./src/components/widgets/ModalSheet.tsx","webpack://wizzi.editor/./src/components/widgets/Popover.tsx","webpack://wizzi.editor/./src/components/widgets/ResizablePane.tsx","webpack://wizzi.editor/./src/components/widgets/ShortcutLabel.tsx","webpack://wizzi.editor/./src/components/widgets/Spinner.tsx","webpack://wizzi.editor/./src/components/widgets/Toast.tsx","webpack://wizzi.editor/./src/components/widgets/ToggleSwitch.tsx","webpack://wizzi.editor/./src/components/widgets/WebFrame.tsx","webpack://wizzi.editor/./src/features/form/EditorForm.tsx","webpack://wizzi.editor/./src/features/form/Form.tsx","webpack://wizzi.editor/./src/features/form/index.tsx","webpack://wizzi.editor/./src/features/form/withStatus.tsx","webpack://wizzi.editor/./src/features/form/withValidation.tsx","webpack://wizzi.editor/./src/utils/convertDataTransferItemsToFiles.tsx","webpack://wizzi.editor/./src/utils/dragEventIncludes.tsx","webpack://wizzi.editor/./src/assets/checkmark.png","webpack://wizzi.editor/./src/assets/clear.png","webpack://wizzi.editor/./src/assets/cross-light.png","webpack://wizzi.editor/./src/assets/cross-red.png","webpack://wizzi.editor/./src/assets/cross.png","webpack://wizzi.editor/./src/assets/info-icon-light.png","webpack://wizzi.editor/./src/assets/info-icon.png","webpack://wizzi.editor/./src/assets/packi-icon-dark.svg","webpack://wizzi.editor/./src/assets/packi-icon.svg","webpack://wizzi.editor/./src/assets/settings-icon.png"],"sourcesContent":["/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorFooter.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Annotation} from '../../features/annotations';\nimport {Shortcuts} from './KeyboardShortcuts';\nimport {PreferencesContextType, PanelType, withPreferences} from '../../features/preferences';\nimport {FooterShell} from '../shell/FooterShell';\nimport {c} from '../ThemeProvider';\nimport FooterButton from '../widgets/FooterButton';\nimport IconButton from '../widgets/IconButton';\nimport LoadingText from '../widgets/LoadingText';\nimport MenuButton from '../widgets/MenuButton';\nimport ShortcutLabel from '../widgets/ShortcutLabel';\nimport ToggleSwitch from '../widgets/ToggleSwitch';\nexport type EditorFooterProps = PreferencesContextType & { \n    annotations: Annotation[];\n    fileTreeShown: boolean;\n    previewShown: boolean;\n    panelsShown: boolean;\n    sendCodeOnChangeEnabled: boolean;\n    sdkVersion: SDKVersion;\n    isLocalWebPreview: boolean;\n    onToggleTheme: () => void;\n    onTogglePanels: (panelType?: PanelType) => void;\n    onToggleFileTree: () => void;\n    onTogglePreview: () => void;\n    onToggleSendCode: () => void;\n    onChangeSDKVersion: (sdkVersion: SDKVersion, isLocalWebPreview?: boolean) => void;\n    onShowShortcuts: () => void;\n    onSendCode: () => void;\n    theme: string;\n    loggedUid: string;\n    autoGenSingleDoc: boolean;\n    autoExecJob: boolean;\n    trustLocalStorage: boolean;\n};\nfunction EditorFooterComp(props: EditorFooterProps) {\n\n    const {\n        annotations, \n        fileTreeShown, \n        previewShown, \n        panelsShown, \n        sendCodeOnChangeEnabled, \n        sdkVersion, \n        isLocalWebPreview, \n        onSendCode, \n        onToggleTheme, \n        onTogglePanels, \n        onToggleFileTree, \n        onTogglePreview, \n        onToggleSendCode, \n        onShowShortcuts, \n        theme, \n        loggedUid, \n        autoGenSingleDoc, \n        autoExecJob, \n        trustLocalStorage\n     } = props;\n    const _toggleAutoGenSingleDoc = () => \n    \n        props.setPreferences({\n            autoGenSingleDoc: !props.preferences.autoGenSingleDoc\n         })\n    ;\n    const _toggleAutoExecJob = () => \n    \n        props.setPreferences({\n            autoExecJob: !props.preferences.autoExecJob\n         })\n    ;\n    const _toggleTrustLocalStorage = () => \n    \n        props.setPreferences({\n            trustLocalStorage: !props.preferences.trustLocalStorage\n         })\n    ;\n    const loadingItems = annotations.filter(a => \n    \n        a.severity < 0\n    );\n    const isLoading = loadingItems.length >= 1;\n    const isErrorFatal = !isLoading && annotations.some(a => \n    \n        a.severity > 3\n    );\n    const warningCount = annotations.filter(a => \n    \n        a.severity === 2\n    ).length\n    ;\n    let text: any;\n    if (isLoading) {\n        text = isLoading ? `${loadingItems[0].message}${\n            loadingItems.length > 1\n             ? ` (+${loadingItems.length - 1} more)`\n             : ''}\n            ` : '';\n    }\n    else {\n        const errors = annotations.filter(a => \n        \n            a.severity >= 3\n        );\n        if (errors.length) {\n            const {\n                message, \n                location, \n                action\n             } = errors[0];\n            const prefix = location ? `${location.fileName} (${location.startLineNumber}:${location.startColumn}) ` : '';\n            const suffix = action ?  (\n                <span\n                 className={css(styles.action)} onClick={(event) => {\n                    \n                        event.stopPropagation();\n                        action.run();\n                    }\n                }>\n                    {action.title}\n                </span>\n                )\n             : errors.length > 1 ? `(+${errors.length - 1} more)` : '';\n            text =  (\n            <span\n            >\n                {prefix}\n                {message.split('\\n')[0] + ' '}\n                {suffix}\n            </span>\n            )\n            ;\n        }\n    }\n    return  (\n        <FooterShell\n         type={isLoading ? 'loading' : isErrorFatal ? 'error' : null}>\n            <div\n             className={css(styles.left)}>\n                {\n                    isLoading ?  (\n                        <LoadingText\n                         className={css(styles.loadingText)} onClick={() => \n                            \n                                onTogglePanels('errors')\n                        }>\n                            {text}\n                        </LoadingText>\n                        )\n                     :  (\n                        <button\n                         onClick={() => \n                            \n                                onTogglePanels(text ? 'errors' : undefined)\n                        } className={css(styles.statusText, text ? (isErrorFatal ? styles.errorTextFatal : styles.errorText) : styles.successText)}>\n                            {\n                                text\n                                 ?? (`No errors${\n                                warningCount\n                                 ? `, ${warningCount} warning${\n                                    warningCount > 1\n                                     ? 's'\n                                     : ''}\n                                    `\n                                 : ''}\n                                `)\n                            }\n                        </button>\n                        )\n                    \n                }\n            </div>\n            <MenuButton\n             icon={require('../../assets/settings-icon.png')} label={ (\n                <span\n                 className={css(styles.buttonLabel)}>\n                    Auth\n                </span>\n                )\n            } content={ (\n                <React.Fragment\n                >\n                    <div\n                     style={{\n                            paddingLeft: '15px'\n                         }}>\n                        Logged uid:\n                        {loggedUid}\n                    </div>\n                    <ToggleSwitch\n                     checked={trustLocalStorage} onChange={_toggleTrustLocalStorage} label=\"Trust local storage\" />\n                </React.Fragment>\n                )\n            } />\n            <MenuButton\n             icon={require('../../assets/settings-icon.png')} label={ (\n                <span\n                 className={css(styles.buttonLabel)}>\n                    Wizzi\n                </span>\n                )\n            } content={ (\n                <React.Fragment\n                >\n                    <ToggleSwitch\n                     checked={autoGenSingleDoc} onChange={_toggleAutoGenSingleDoc} label=\"Auto gen single doc\" />\n                    <ToggleSwitch\n                     checked={autoExecJob} onChange={_toggleAutoExecJob} label=\"Auto exec job\" />\n                </React.Fragment>\n                )\n            } />\n            <MenuButton\n             icon={require('../../assets/settings-icon.png')} label={ (\n                <span\n                 className={css(styles.buttonLabel)}>\n                    Editor\n                </span>\n                )\n            } content={ (\n                <React.Fragment\n                >\n                    <div\n                     className={css(styles.buttonItem, styles.buttonItemEditorPane)} onClick={onShowShortcuts}>\n                        <IconButton\n                         small title=\"Show keyboard shortcuts\" label=\"Shortcuts\" />\n                        <ShortcutLabel\n                         combo={Shortcuts.shortcuts.combo} className={css(styles.buttonItemShortcut)} />\n                    </div>\n                    <div\n                     className={css(styles.menuSeparator)} />\n                    <ToggleSwitch\n                     checked={fileTreeShown} onChange={onToggleFileTree} label=\"Files\" />\n                    <ToggleSwitch\n                     checked={panelsShown} onChange={() => \n                        \n                            onTogglePanels()\n                    } label=\"Panel\" />\n                    <ToggleSwitch\n                     checked={theme !== 'light'} onChange={onToggleTheme} label=\"Dark theme\" />\n                </React.Fragment>\n                )\n            } />\n            <div\n             className={css(styles.devicePreviewSwitch)}>\n                <ToggleSwitch\n                 checked={previewShown} onChange={onTogglePreview} label=\"Preview\" />\n            </div>\n        </FooterShell>\n        )\n    ;\n}\n\nexport const EditorFooter = withPreferences(EditorFooterComp);\nexport default EditorFooter;\n\nconst styles = StyleSheet.create({\n    left: {\n        display: 'flex', \n        alignItems: 'stretch', \n        flex: 1, \n        minWidth: 0, \n        overflow: 'hidden'\n     }, \n    loadingText: {\n        textOverflow: 'ellipsis', \n        whiteSpace: 'nowrap', \n        padding: '.5em', \n        width: '100%', \n        cursor: 'pointer'\n     }, \n    statusText: {\n        border: 0, \n        outline: 0, \n        margin: 0, \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: '1em center', \n        display: 'inline-block', \n        textOverflow: 'ellipsis', \n        whiteSpace: 'nowrap', \n        padding: '.25em .5em .25em 3em', \n        minWidth: 200, \n        width: '100%', \n        textAlign: 'left'\n     }, \n    successText: {\n        backgroundImage: `url(${require('../../assets/checkmark.png')})`\n     }, \n    errorText: {\n        backgroundImage: `url(${require('../../assets/cross-red.png')})`, \n        color: c('error')\n     }, \n    errorTextFatal: {\n        backgroundImage: `url(${require('../../assets/cross-light.png')})`\n     }, \n    errorBorder: {\n        borderColor: c('error-text')\n     }, \n    devicesCount: {\n        position: 'absolute', \n        top: 4, \n        right: 6, \n        height: 20, \n        minWidth: 20, \n        borderRadius: '50%', \n        backgroundColor: c('text'), \n        color: c('background'), \n        opacity: 0.5\n     }, \n    devicePane: {\n        padding: '0 16px'\n     }, \n    devicePaneItem: {\n        margin: '0 -16px'\n     }, \n    deviceLabel: {\n        display: 'flex', \n        alignItems: 'center', \n        whiteSpace: 'nowrap', \n        padding: '8px 0'\n     }, \n    deviceIcon: {\n        height: 16, \n        width: 16, \n        marginRight: 8, \n        fill: 'currentColor'\n     }, \n    noDevicesMessage: {\n        whiteSpace: 'nowrap', \n        margin: 8\n     }, \n    buttonLabel: {\n        display: 'none', \n        [`@media (min-width: ${700 + 20}px)`]: {\n                display: 'inline'\n             }\n     }, \n    buttonItem: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        justifyContent: 'space-between'\n     }, \n    buttonItemShortcut: {\n        userSelect: 'none', \n        cursor: 'pointer', \n        marginLeft: 12\n     }, \n    buttonItemEditorPane: {\n        margin: '0 12px'\n     }, \n    title: {\n        margin: '16px 0 8px'\n     }, \n    action: {\n        textDecoration: 'underline', \n        cursor: 'pointer', \n        fontWeight: 'bold'\n     }, \n    devicePreviewSwitch: {\n        display: 'none', \n        [`@media (min-width: ${700}px)`]: {\n                display: 'block'\n             }\n     }, \n    menuSeparator: {\n        margin: '6px 0', \n        borderBottom: `1px solid ${c('border')}`\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorPanels.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Annotation} from '../../features/annotations';\nimport type {PanelType} from '../../features/preferences';\nimport ProblemsPanel from './ProblemsPanel';\nimport {c} from '../ThemeProvider';\nimport ResizablePane from '../widgets/ResizablePane';\ntype Props = { \n    annotations: Annotation[];\n    onSelectFile: (path: string) => void;\n    onShowErrorPanel: () => void;\n    onTogglePanels: (panelType?: PanelType) => void;\n    panelType: 'errors' | 'logs';\n};\n\nexport default class EditorPanels extends React.Component<Props> {\n        getSnapshotBeforeUpdate(prevProps: Props) {\n            return null;\n        }\n        componentDidUpdate(prevProps: Props) {\n        }\n        _isScrolled: boolean = false;\n        _panel = React.createRef<HTMLDivElement>();\n        render() {\n            const {\n                annotations, \n                onSelectFile, \n                onShowErrorPanel, \n                onTogglePanels, \n                panelType\n             } = this.props;\n            return  (\n                <ResizablePane\n                 direction=\"vertical\" className={css(styles.container)}>\n                    <div\n                     className={css(styles.panels)}>\n                        <div\n                         className={css(styles.header)}>\n                            <button\n                             onClick={onShowErrorPanel} className={css(styles.tab, panelType !== 'errors' && styles.inactive)}>\n                                Problems\n                            </button>\n                            <div\n                             className={css(styles.buttons)}>\n                                <button\n                                 onClick={() => \n                                    \n                                        onTogglePanels()\n                                } className={css(styles.button, styles.close)} />\n                            </div>\n                        </div>\n                        <div\n                         ref={this._panel} className={css(styles.panel)}>\n                            {\n                                panelType === 'errors' ?  (\n                                    <ProblemsPanel\n                                     annotations={annotations} onSelectFile={onSelectFile} />\n                                    )\n                                 : null\n                            }\n                        </div>\n                    </div>\n                </ResizablePane>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        height: '14em'\n     }, \n    header: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        paddingTop: '.75em'\n     }, \n    tab: {\n        display: 'inline-block', \n        appearance: 'none', \n        background: 'none', \n        border: 'none', \n        margin: 0, \n        padding: '.35em 1.5em', \n        fontSize: '.9em', \n        textTransform: 'uppercase', \n        outline: 'none', \n        opacity: 1\n     }, \n    inactive: {\n        opacity: 0.5\n     }, \n    buttons: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'row', \n        justifyContent: 'flex-end', \n        margin: '0 1em'\n     }, \n    button: {\n        height: 24, \n        width: 24, \n        border: 0, \n        outline: 0, \n        margin: '0 .5em', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: 'center'\n     }, \n    close: {\n        backgroundImage: `url(${require('../../assets/cross.png')})`\n     }, \n    clear: {\n        backgroundImage: `url(${require('../../assets/clear.png')})`\n     }, \n    panels: {\n        backgroundColor: c('content'), \n        borderColor: c('border'), \n        borderWidth: '1px 0 0 0', \n        borderStyle: 'solid', \n        height: '100%', \n        minHeight: 0\n     }, \n    panel: {\n        display: 'flex', \n        flexDirection: 'column', \n        minHeight: 0, \n        padding: '.5em 0 .75em 0', \n        overflow: 'auto', \n        height: 'calc(100% - 2.5em)'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorTitle.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport formatDistance from 'date-fns/formatDistance';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\nimport {SaveStatus, SaveHistory} from '../../features/packi';\nimport {Viewer} from '../../features/account';\nimport EditorTitleName from './EditorTitleName';\nimport ModalEditTitleAndDescription from './ModalEditTitleAndDescription';\nexport type EditorTitleProps = { \n    name: string;\n    description: string | undefined;\n    createdAt: string | undefined;\n    saveHistory: SaveHistory;\n    saveStatus: SaveStatus;\n    viewer: Viewer | undefined;\n    isEditModalVisible: boolean;\n    onShowEditModal: () => void;\n    onDismissEditModal: () => void;\n    onSubmitMetadata: (details: { \n        name: string;\n        description: string;\n    }) => void;\n};\nexport function EditorTitle(props: EditorTitleProps) {\n\n    const [date, setDate] = React.useState(new Date());\n    React.useEffect(() => {\n    \n        const timer = setInterval(() => \n        \n            setDate(new Date())\n        , 10000);\n        return () => \n            \n                clearInterval(timer)\n        ;\n    }\n    , [])\n    const {\n        description, \n        name, \n        createdAt, \n        saveHistory, \n        saveStatus, \n        viewer, \n        isEditModalVisible, \n        onShowEditModal, \n        onSubmitMetadata, \n        onDismissEditModal\n     } = props;\n    const lastSave = saveHistory.length ? saveHistory[0] : null;\n    const savedAt = lastSave ? lastSave.savedAt : createdAt;\n    const hasPermanentHistory = saveHistory ? saveHistory.some(item => \n        \n            !item.isDraft\n        ) : false;\n    let statusText;\n    if (viewer) {\n        if (saveStatus === 'saving-draft' || saveStatus === 'publishing') {\n            statusText = 'Saving changes…';\n        }\n        else {\n            if (savedAt) {\n                const dtSavedAt = new Date(savedAt);\n                const timestamp = date > dtSavedAt ? `${formatDistance(date, dtSavedAt, {\n                        includeSeconds: true, \n                        addSuffix: true\n                     })}` : '';\n                if (saveStatus === 'unsaved' || saveStatus === 'edited') {\n                    statusText = `Last saved ${timestamp}`;\n                }\n                else {\n                    statusText = `All changes saved ${timestamp}`;\n                }\n            }\n            else {\n                statusText = 'Not saved yet';\n            }\n        }\n        statusText =  (\n        <React.Fragment\n        >\n            <span\n             className={css(styles.statusText)}>\n                {statusText}\n                .\n            </span>\n            {' '}\n        </React.Fragment>\n        )\n        ;\n    }\n    else {\n        \n        // User is a guest\n        statusText =  (\n        <React.Fragment\n        >\n            <a\n             href=\"#\" className={css(styles.textButton)}>\n                Log in\n            </a>\n            {' '}\n            <span\n             className={css(styles.statusText)}>\n                to save your changes as you work\n            </span>\n        </React.Fragment>\n        )\n        ;\n    }\n    return  (\n        <div\n         className={css(styles.container)}>\n            <div\n             className={css(styles.header)}>\n                <EditorTitleName \n                    name={name}\n                    description={description}\n                    onSubmitMetadata={onSubmitMetadata}\n                    onShowEditModal={onShowEditModal}\n                 />\n                <div\n                 className={css(styles.metadata)}>\n                    <p\n                     className={css(styles.status)}>\n                        {statusText}\n                    </p>\n                    {\n                        viewer && saveStatus === 'saving-draft' ?  (\n                            <div\n                             className={css(styles.spinner)} />\n                            )\n                         : null\n                    }\n                    {\n                        (viewer && saveStatus === 'saved-draft') || saveStatus === 'published' ?  (\n                            <svg \n                                className={css(styles.check)}\n                                width=\"11px\"\n                                height=\"8px\"\n                                viewBox=\"0 0 11 8\"\n                            >\n                                <polygon\n                                 fill={c('success')} points=\"3.34328358 6.32835821 0.835820896 3.82089552 0 4.65671642 3.34328358 8 10.5074627 0.835820896 9.67164179 0\" />\n                            </svg>\n                            )\n                         : null\n                    }\n                </div>\n            </div>\n            <ModalEditTitleAndDescription \n                title=\"Edit Packi Details\"\n                action=\"Done\"\n                visible={isEditModalVisible}\n                onDismiss={onDismissEditModal}\n                onSubmit={(details) => {\n                    \n                        onSubmitMetadata(details);\n                        onDismissEditModal();\n                    }\n                }\n                description={description}\n                name={name}\n             />\n        </div>\n        )\n    ;\n}\n\nconst spin = {\n    from: {\n        transform: 'rotate(0deg)'\n     }, \n    to: {\n        transform: 'rotate(360deg)'\n     }\n };\n\nexport default EditorTitle;\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        alignItems: 'center', \n        minWidth: 0, \n        height: '100%'\n     }, \n    header: {\n        minWidth: 0, \n        marginRight: 16\n     }, \n    metadata: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center'\n     }, \n    status: {\n        fontSize: 14, \n        margin: '-2px 4px 0 6px', \n        textOverflow: 'ellipsis', \n        overflow: 'hidden'\n     }, \n    textButton: {\n        appearance: 'none', \n        background: 'none', \n        border: 0, \n        color: c('text'), \n        margin: 0, \n        padding: 0, \n        textDecoration: 'underline'\n     }, \n    statusText: {\n        opacity: 0.5\n     }, \n    spinner: {\n        borderStyle: 'solid', \n        borderTopColor: c('selected'), \n        borderLeftColor: c('selected'), \n        borderBottomColor: c('selected'), \n        borderRightColor: 'rgba(0, 0, 0, .16)', \n        borderWidth: 1, \n        height: 12, \n        width: 12, \n        borderRadius: '50%', \n        margin: '0 4px', \n        animationDuration: '1s', \n        animationName: [\n            spin\n        ], \n        animationIterationCount: 'infinite', \n        animationTimingFunction: 'linear'\n     }, \n    check: {\n        marginBottom: -4\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorTitleName.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {c} from '../ThemeProvider';\nimport Popover from '../widgets/Popover';\ntype Props = { \n    name: string;\n    description?: string;\n    onShowEditModal: () => void;\n    onSubmitMetadata: (details: { \n        name: string;\n        description: string;\n    }) => void;\n    theme: ThemeName;\n};\ntype State = { \n    name: string;\n    focused: boolean;\n};\nconst RETURN_KEYCODE = 13;\nconst ESCAPE_KEYCODE = 27;\nfunction validateName(name: string) {\n\n    return name ? /^[a-z_\\-\\d\\s]+$/i.test(name) ? null : new Error('Name can only contain letters, numbers, space, hyphen (-) and underscore (_).') : new Error('Name cannot be empty.');\n}\nclass EditorTitleName extends React.Component<Props, State> {\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (state.name !== props.name && !state.focused) {\n            return {\n                    name: props.name || ''\n                 };\n        }\n        return null;\n    }\n    state: State = {\n        name: this.props.name || '', \n        focused: false\n    }\n    ;\n    _handleChangeText = (e: React.ChangeEvent<HTMLInputElement>) => \n        this.setState({\n            name: e.target.value\n         });\n    _handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        e.target.select();\n        this.setState({\n            focused: true\n         })\n    };\n    _handleBlur = async () => {\n    \n        if (!validateName(this.state.name)) {\n            await this.props.onSubmitMetadata({\n                    name: this.state.name, \n                    description: this.props.description ?? ''\n                 });\n        }\n        this.setState({\n            focused: false\n         })\n    }\n    ;\n    _handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if ((e.keyCode === RETURN_KEYCODE || e.keyCode === ESCAPE_KEYCODE) && !validateName(this.state.name)) {\n            (e.target as HTMLInputElement).blur()\n        }\n    };\n    render() {\n        const {\n            name\n         } = this.state;\n        const {\n            description, \n            onShowEditModal, \n            theme\n         } = this.props;\n        const error = validateName(name);\n        return  (\n            <div\n             className={css(styles.container)}>\n                <div\n                 className={css(styles.titleContainer)}>\n                    <h1\n                     className={css(styles.title)}>\n                        <div\n                         className={css(styles.content)}>\n                            <div\n                             className={css(styles.field, styles.phantom)}>\n                                {name.replace(/\\n/g, '')}\n                            </div>\n                            <input \n                                onFocus={this._handleFocus}\n                                onBlur={this._handleBlur}\n                                onKeyDown={this._handleKeyDown}\n                                value={name}\n                                onChange={this._handleChangeText}\n                                className={css(styles.field, styles.editable)}\n                             />\n                        </div>\n                    </h1>\n                    <Popover\n                     content={ (\n                        <React.Fragment\n                        >\n                            <p\n                             className={css(styles.description)}>\n                                {description ?? DEFAULT_PACKI_DESCRIPTION}\n                            </p>\n                            <button\n                             onClick={onShowEditModal} className={css(styles.editButton)}>\n                                Edit details\n                            </button>\n                        </React.Fragment>\n                        )\n                    }>\n                        <button\n                         className={css(styles.icon, theme === 'light' ? styles.infoLight : styles.infoDark)} />\n                    </Popover>\n                </div>\n                {\n                    this.state.focused && error ?  (\n                        <div\n                         className={css(styles.validation)}>\n                            {error.message}\n                        </div>\n                        )\n                     : null\n                }\n            </div>\n            )\n        ;\n    }\n}\nexport default withThemeName(EditorTitleName);\nconst styles = StyleSheet.create({\n    container: {\n        \n     }, \n    titleContainer: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'flex-end'\n     }, \n    title: {\n        fontSize: '1.3em', \n        lineHeight: '1.3em', \n        fontWeight: 600, \n        margin: 0, \n        position: 'relative', \n        textOverflow: 'ellipsis', \n        overflow: 'hidden'\n     }, \n    content: {\n        display: 'flex', \n        alignItems: 'center', \n        maxWidth: '100%'\n     }, \n    field: {\n        display: 'inline-block', \n        margin: 0, \n        padding: '1px 6px'\n     }, \n    editable: {\n        position: 'absolute', \n        appearance: 'none', \n        background: 'none', \n        outline: 0, \n        border: 0, \n        left: 0, \n        width: '100%', \n        borderRadius: 3, \n        ':hover': {\n            boxShadow: `inset 0 0 0 1px ${c('border')}`\n         }, \n        ':focus': {\n            boxShadow: `inset 0 0 0 1px ${c('selected')}`\n         }, \n        ':hover:focus': {\n            boxShadow: `inset 0 0 0 1px ${c('selected')}`\n         }\n     }, \n    phantom: {\n        display: 'inline-block', \n        maxWidth: '100%', \n        pointerEvents: 'none', \n        whiteSpace: 'pre', \n        overflow: 'hidden', \n        opacity: 0\n     }, \n    validation: {\n        position: 'absolute', \n        backgroundColor: c('error'), \n        color: c('error-text'), \n        fontSize: 13, \n        fontWeight: 'normal', \n        padding: '6px 12px', \n        borderRadius: 3, \n        marginTop: 8, \n        textAlign: 'left', \n        zIndex: 1000, \n        minWidth: 100, \n        ':before': {\n            content: '\"\"', \n            display: 'block', \n            position: 'absolute', \n            bottom: '100%', \n            width: 0, \n            height: 0, \n            borderLeft: '6px solid transparent', \n            borderRight: '6px solid transparent', \n            borderBottom: `6px solid ${c('error')}`\n         }\n     }, \n    icon: {\n        display: 'block', \n        position: 'relative', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundRepeat: 'no-repeat', \n        backgroundSize: 16, \n        backgroundPosition: 'center', \n        border: 0, \n        outline: 0, \n        margin: 0, \n        padding: 0, \n        height: 24, \n        width: 24, \n        opacity: 0.3, \n        transition: '.2s', \n        ':hover': {\n            opacity: 0.8\n         }\n     }, \n    description: {\n        margin: 16\n     }, \n    infoLight: {\n        backgroundImage: `url(${require('../../assets/info-icon.png')})`\n     }, \n    infoDark: {\n        backgroundImage: `url(${require('../../assets/info-icon-light.png')})`\n     }, \n    editButton: {\n        width: '100%', \n        background: 'none', \n        outline: 0, \n        border: 'none', \n        borderTop: `1px solid ${c('border')}`, \n        color: c('primary'), \n        padding: '8px 16px', \n        fontWeight: 'bold', \n        ':hover': {\n            backgroundColor: c('hover')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorToolbar.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {SaveStatus, SaveHistory, SaveOptions} from '../../features/packi';\nimport {Viewer} from '../../features/account';\nimport EditorTitle from './EditorTitle';\nimport {usePreferences} from '../../features/preferences';\nimport {ToolbarShell} from '../shell/ToolbarShell';\nimport {ToolbarTitleShell} from '../shell/ToolbarTitleShell';\nimport UserMenu from './UserMenu';\nimport {Button} from '../widgets/Button';\nimport IconButton from '../widgets/IconButton';\nimport packiIconDark from '../../assets/packi-icon-dark.svg';\nimport packiIconLight from '../../assets/packi-icon.svg';\nimport {LoggedUser} from '../../features/app';\nimport {Packi} from '../../features/packi';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nexport type EditorToolbarProps = { \n    name: string;\n    description: string;\n    createdAt: string | undefined;\n    saveStatus: SaveStatus;\n    saveHistory: SaveHistory;\n    viewer: Viewer | undefined;\n    isDownloading: boolean;\n    isEditModalVisible: boolean;\n    onSubmitMetadata: (details: { \n        name: string;\n        description: string;\n    }) => void;\n    onShowEditModal: () => void;\n    onDismissEditModal: () => void;\n    onDownloadCode: () => Promise<void>;\n    onPublishAsync: (options?: SaveOptions) => Promise<void>;\n    currentPacki?: Packi;\n    loggedUser: LoggedUser | undefined;\n    splitViewKind: string;\n    // isResolving: boolean;\n    isAuthModalVisible: boolean;\n    isWizziJobWaiting: boolean;\n    onLoggedOn: (user: LoggedUser) => void;\n    onLoggedOff: () => void;\n    onChangeSplitViewKind: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    onExecuteWizziJob: () => void;\n    onShowPackiManager: () => void;\n    onSaveCode: () => void;\n    creatorUsername?: string;\n};\nexport function EditorToolbar(props: EditorToolbarProps) {\n\n    const [preferences] = usePreferences();\n    const {\n        name, \n        description, \n        createdAt, \n        saveHistory, \n        saveStatus, \n        viewer, \n        isDownloading, \n        isEditModalVisible, \n        onSubmitMetadata, \n        onShowEditModal, \n        onDismissEditModal, \n        onDownloadCode, \n        onPublishAsync, \n        splitViewKind, \n        onChangeSplitViewKind, \n        onLoggedOn, \n        onLoggedOff, \n        loggedUser, \n        isAuthModalVisible, \n        isWizziJobWaiting, \n        onExecuteWizziJob, \n        onShowPackiManager\n     } = props;\n    const {\n        theme\n     } = preferences;\n    const isPublishing = saveStatus === 'publishing';\n    const isPublished = saveStatus === 'published';\n    return  (\n        <ToolbarShell\n        >\n            <ToolbarTitleShell\n            >\n                <img\n                 src={theme === 'dark' ? packiIconDark : packiIconLight} alt=\"Packi\" className={css(styles.logo)} />\n                <EditorTitle \n                    name={name}\n                    description={description}\n                    createdAt={createdAt}\n                    saveHistory={saveHistory}\n                    saveStatus={saveStatus}\n                    viewer={viewer}\n                    isEditModalVisible={isEditModalVisible}\n                    onSubmitMetadata={onSubmitMetadata}\n                    onShowEditModal={onShowEditModal}\n                    onDismissEditModal={onDismissEditModal}\n                 />\n            </ToolbarTitleShell>\n            <div\n             className={css(styles.buttons)}>\n                <Button \n                    variant=\"secondary\"\n                    onClick={() => \n                        \n                            onPublishAsync()\n                    }\n                    disabled={isPublishing || isPublished}\n                    loading={isPublishing}\n                    className={css(styles.saveButton)}\n                >\n                    {\n                        isPublishing ? 'Saving…' : isPublished ? 'Saved' : 'Save'\n                    }\n                </Button>\n                <Select\n                 value={splitViewKind} onChange={onChangeSplitViewKind}>\n                    <MenuItem\n                     value={'left'}>\n                        Left\n                    </MenuItem>\n                    <MenuItem\n                     value={'right'}>\n                        Right\n                    </MenuItem>\n                    <MenuItem\n                     value={'both'}>\n                        Both\n                    </MenuItem>\n                </Select>\n                <IconButton \n                    responsive\n                    title=\"Download as zip\"\n                    onClick={onDownloadCode}\n                    disabled={isDownloading || isPublishing}\n                >\n                    <svg\n                     width=\"20\" height=\"20\">\n                        <path\n                         d=\"M14.167 10H5.833L10 16.667 14.167 10z\" />\n                        <path\n                         d=\"M2.5 18.333h15M10 10V1.667\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n                    </svg>\n                </IconButton>\n                <UserMenu\n                 />\n            </div>\n        </ToolbarShell>\n        )\n    ;\n}\nexport default EditorToolbar;\nconst styles = StyleSheet.create({\n    logo: {\n        width: 24, \n        height: 24, \n        marginLeft: 16, \n        marginRight: 16\n     }, \n    buttons: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        position: 'relative', \n        zIndex: 5\n     }, \n    saveButton: {\n        height: 40, \n        fontWeight: 600, \n        minWidth: 80, \n        fontSize: '16px', \n        marginRight: 16\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorView.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {SDKVersion, PackiFiles} from '../../features/packi';\nimport {GeneratedArtifact, JobError} from '../../features/wizzi';\nimport {LoggedUser} from '../../features/app';\nimport {Viewer} from '../../features/account';\nimport {Annotation} from '../../features/annotations';\nimport {isScript, isJson, isTest} from '../../features/file/index';\nimport {EditorProps} from '../Editor/EditorProps';\nimport EditorFooter from './EditorFooter';\nimport EditorPanels from './EditorPanels';\nimport EditorToolbar from './EditorToolbar';\nimport {EditorViewProps as BaseEditorViewProps} from './EditorViewProps';\nimport FileList from '../FileList/FileList';\nimport KeyboardShortcuts, {Shortcuts} from './KeyboardShortcuts';\nimport NoFileSelected from './NoFileSelected';\nimport PageMetadata from '../PageMetadata';\nimport type {PanelType} from '../../features/preferences/index';\nimport {withPreferences, PreferencesContextType} from '../../features/preferences/index';\nimport PublishManager, {PublishModals} from '../Publish/PublishManager';\n// from shell\nimport {ContentShell} from '../shell/ContentShell';\nimport {EditorShell} from '../shell/EditorShell';\nimport {LayoutShell} from '../shell/LayoutShell';\nimport {c, s} from '../ThemeProvider';\n// from widgets\nimport Banner from '../widgets/Banner';\nimport KeybindingsManager from '../widgets/KeybindingsManager';\nimport LazyLoad from '../widgets/LazyLoad';\nimport {ModalDialog} from '../widgets/ModalDialog';\nimport {ProgressIndicator} from '../widgets/ProgressIndicator';\n\nimport PackiManagerContainer from '../Packi/PackiManagerContainer';\nimport GeneratedView from './GeneratedView';\nimport GenerationErrors from './GenerationErrors';\n\nconst EDITOR_LOAD_FALLBACK_TIMEOUT = 3000;\n\nexport type EditorViewProps = PreferencesContextType & BaseEditorViewProps & { \n    viewer?: Viewer;\n} & { \n    loggedUser?: LoggedUser;\n};\ntype ModalName = 'auth' | 'packi-manager' | 'github-commit' | 'github-create' | 'edit-info' | 'shortcuts' | 'previous-saves' | 'import-repo' | 'import-production';\ntype BannerName = 'connected' | 'disconnected' | 'reconnect' | 'autosave-disabled' | 'export-unavailable' | 'slow-connection';\ntype SplitViewKind = 'left' | 'right' | 'both';\ntype State = { \n    currentModal: ModalName | null;\n    currentBanner: BannerName | null;\n    loadedEditor: 'monaco' | 'simple' | null;\n    isMarkdownPreview: boolean;\n    shouldPreventRedirectWarning: boolean;\n    isDownloading: boolean;\n    splitViewKind: SplitViewKind;\n};\nconst BANNER_TIMEOUT_SHORT = 1500;\nconst BANNER_TIMEOUT_LONG = 5000;\nclass EditorViewComp extends React.Component<EditorViewProps, State> {\n    state: State = {\n        currentModal: null, \n        currentBanner: null, \n        loadedEditor: null, \n        isMarkdownPreview: true, \n        shouldPreventRedirectWarning: false, \n        isDownloading: false, \n        splitViewKind: 'both' as SplitViewKind\n    }\n    ;\n    \n    static getDerivedStateFromProps(props: EditorViewProps, state: State) {\n        const {\n            selectedFile, \n            files\n         } = props;\n        \n        // When an empty markdown file is opened, switch to edit mode\n        let newState: any = null;\n        if (state.isMarkdownPreview && selectedFile.endsWith('.md') && !files[selectedFile]?.contents) {\n            newState = newState || {};\n            newState.isMarkdownPreview = false;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        window.addEventListener('beforeunload', this._handleUnload);\n    }\n    \n    componentDidUpdate(prevProps: EditorViewProps) {\n        if (prevProps.autosaveEnabled !== this.props.autosaveEnabled && !this.props.autosaveEnabled) {\n            this._showBanner('autosave-disabled', BANNER_TIMEOUT_LONG);\n        }\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this._handleUnload);\n    }\n    \n    _handleUnload = (e: any) => {\n        const isUnsaved = this.props.saveStatus === 'edited' || this.props.saveStatus === 'publishing' || this.props.saveStatus === 'saving-draft';\n        if (!isUnsaved || this.state.shouldPreventRedirectWarning) {\n            this._allowRedirectWarning();\n            return ;\n        }\n        const message = 'You have unsaved changes. Are you sure you want to leave this page?';\n        e.returnValue = message;\n        return message;\n    };\n    _showBanner = (name: BannerName, duration: number) => {\n        this.setState({\n            currentBanner: name\n         })\n        setTimeout(() => \n        \n            // @ts-ignore\n            this.setState((state) => \n            \n                (state.currentBanner === name ? {\n                        currentBanner: null\n                     } : state)\n            )\n        , duration)\n    };\n    \n    _handleChangeSplitViewKind = (e: React.ChangeEvent<HTMLSelectElement>) => \n    \n        this.setState({\n            splitViewKind: e.target.value as SplitViewKind\n         })\n    ;\n    \n    _handleDismissEditModal = () => \n        this.setState({\n            currentModal: null\n         });\n    _handleShowTitleDescriptionModal = () => \n        this.setState({\n            currentModal: 'edit-info'\n         });\n    _handleShowPackiManager = () => \n    \n        this.setState({\n            currentModal: 'packi-manager'\n         })\n    ;\n    _handleShowAuthModal = () => \n    \n        this.setState({\n            currentModal: 'auth'\n         })\n    ;\n    _handleShowShortcuts = () => \n        this.setState({\n            currentModal: 'shortcuts'\n         });\n    _handleShowImportRepoModal = () => \n        this.setState({\n            currentModal: 'import-repo'\n         });\n    _handleShowImportProductionModal = () => \n        this.setState({\n            currentModal: 'import-production'\n         });\n    _handleHideModal = () => \n        this.setState({\n            currentModal: null\n         });\n    _handleShowModal = (name: any) => \n        this.setState({\n            currentModal: name\n         });\n    _handleRemoveFile = (path: string) => \n        this._EditorComponent?.removePath?.(path);\n    _handleRenameFile = (oldPath: string, newPath: string) => \n        this._EditorComponent?.renamePath?.(oldPath, newPath);\n    _EditorComponent: any;\n    _showErrorPanel = () => \n        this.props.setPreferences({\n            panelType: 'errors'\n         });\n    _togglePanels = (panelType?: PanelType) => \n        this.props.setPreferences({\n            panelsShown: !this.props.preferences.panelsShown, \n            panelType: panelType && !this.props.preferences.panelsShown ? panelType : this.props.preferences.panelType\n         });\n    _toggleFileTree = () => \n        this.props.setPreferences({\n            fileTreeShown: !this.props.preferences.fileTreeShown\n         });\n    _toggleTheme = () => \n        this.props.setPreferences({\n            theme: this.props.preferences.theme === 'light' ? 'dark' : 'light'\n         });\n    _toggleMarkdownPreview = () => \n        this.setState((state) => \n        \n            ({\n                isMarkdownPreview: !state.isMarkdownPreview\n             })\n        );\n    _preventRedirectWarning = () => \n        this.setState({\n            shouldPreventRedirectWarning: true\n         });\n    _allowRedirectWarning = () => \n        this.setState({\n            shouldPreventRedirectWarning: false\n         });\n    render() {\n        const {\n            currentModal, \n            currentBanner, \n            isDownloading\n         } = this.state;\n        const {\n            id, \n            createdAt, \n            saveHistory, \n            saveStatus, \n            viewer, \n            packierURL, \n            files, \n            selectedFile, \n            sendCodeOnChangeEnabled, \n            userAgent, \n            onSendCode, \n            onToggleSendCode, \n            onTogglePreview, \n            uploadFileAsync, \n            preferences, \n            name, \n            description, \n            previewRef, \n            previewURL, \n            previewShown, \n            loggedUser, \n            onLoggedOn, \n            onLoggedOff, \n            currentPacki, \n            onExecuteWizziJob, \n            generatedArtifact, \n            jobError, \n            isWizziJobWaiting, \n            onSaveCode\n         } = this.props;\n        const annotations = this.props.annotations;\n        const testPreviewURL = `${process.env.API_SERVER_URL}/api/v1/packi/render/${encodeURIComponent('guest/test')}/${encodeURIComponent(selectedFile)}`;\n        return  (\n            <ContentShell\n            >\n                {\n                    this.state.loadedEditor ? null :  (\n                        <ProgressIndicator\n                         />\n                        )\n                    \n                }\n                <PageMetadata\n                 name={name} description={description} id={id} />\n                <PublishManager \n                    id={id}\n                    sdkVersion={sdkVersion}\n                    name={name}\n                    description={description}\n                    onSubmitMetadata={this.props.onSubmitMetadata}\n                    onPublishAsync={this.props.onPublishAsync}\n                    onShowModal={this._handleShowModal}\n                    onHideModal={this._handleHideModal}\n                    currentModal={currentModal}\n                >\n                    {\n                        ({\n                            onPublishAsync\n                         }) => {\n                        \n                            return  (\n                                <React.Fragment\n                                >\n                                    <KeybindingsManager\n                                     bindings={Shortcuts} onTrigger={(type) => {\n                                        \n                                            const commands: { \n                                                [key: string]: (() => void) | null;\n                                            } = {\n                                                save: saveStatus === 'published' ? null : onPublishAsync, \n                                                tree: this._toggleFileTree, \n                                                panels: this._togglePanels, \n                                                shortcuts: this._handleShowShortcuts, \n                                                update: onSendCode\n                                             };\n                                            const fn = commands[type];\n                                            if (fn) {\n                                                fn();\n                                            }\n                                        }\n                                    } />\n                                    <EditorToolbar \n                                        name={name}\n                                        description={description}\n                                        createdAt={createdAt}\n                                        saveHistory={saveHistory}\n                                        saveStatus={saveStatus}\n                                        viewer={viewer}\n                                        isEditModalVisible={currentModal === 'edit-info'}\n                                        loggedUser={loggedUser}\n                                        isWizziJobWaiting={isWizziJobWaiting}\n                                        onChangeSplitViewKind={this._handleChangeSplitViewKind}\n                                        \n                                        // name={name}\n                                        \n                                        // description={description}\n                                        creatorUsername={this.props.creatorUsername}\n                                        currentPacki={currentPacki}\n                                        splitViewKind={this.state.splitViewKind}\n                                        isDownloading={isDownloading}\n                                        isAuthModalVisible={currentModal === 'auth'}\n                                        onLoggedOn={onLoggedOn}\n                                        onLoggedOff={onLoggedOff}\n                                        onShowEditModal={this._handleShowTitleDescriptionModal}\n                                        onDismissEditModal={this._handleDismissEditModal}\n                                        onExecuteWizziJob={onExecuteWizziJob}\n                                        onShowPackiManager={this._handleShowPackiManager}\n                                        onSaveCode={onSaveCode}\n                                        onSubmitMetadata={this.props.onSubmitMetadata}\n                                        onDownloadCode={this.props.onDownloadAsync}\n                                        onPublishAsync={onPublishAsync}\n                                     />\n                                    <div\n                                     className={css(styles.editorAreaOuterWrapper)}>\n                                        <div\n                                         className={css(styles.editorAreaOuter)}>\n                                            <LayoutShell\n                                            >\n                                                <FileList \n                                                    annotations={annotations}\n                                                    visible={preferences.fileTreeShown}\n                                                    files={files}\n                                                    selectedFile={selectedFile}\n                                                    updateFiles={this.props.updateFiles}\n                                                    onSelectFile={this.props.onSelectFile}\n                                                    onRemoveFile={this._handleRemoveFile}\n                                                    onRenameFile={this._handleRenameFile}\n                                                    uploadFileAsync={uploadFileAsync}\n                                                    onDownloadCode={this.props.onDownloadAsync}\n                                                    onImportRepo={this._handleShowImportRepoModal}\n                                                    onImportProduction={this._handleShowImportProductionModal}\n                                                    saveStatus={saveStatus}\n                                                    sdkVersion={sdkVersion}\n                                                 />\n                                                {\n                                                    (this.state.splitViewKind == 'both' || this.state.splitViewKind == 'left')\n                                                     &&  (\n                                                        <LazyLoad\n                                                         load={async ():  Promise<{ \n                                                                default: React.ComponentType<EditorProps>;\n                                                            }> => {\n                                                            \n                                                                let timeout: any;\n                                                                \n                                                                // Fallback to simple editor if monaco editor takes too long to load\n                                                                const MonacoEditorPromise = import('../Editor/MonacoEditor').then((editor) => \n                                                                \n                                                                    ({\n                                                                        editor, \n                                                                        type: 'monaco'\n                                                                     })\n                                                                )\n                                                                ;\n                                                                \n                                                                // Fallback to simple editor if monaco editor takes too long to load\n                                                                const SimpleEditorPromise = new Promise((resolve, reject) => \n                                                                \n                                                                    timeout = setTimeout(() => {\n                                                                    \n                                                                        this._showBanner('slow-connection', BANNER_TIMEOUT_LONG);\n                                                                        import('../Editor/SimpleEditor').then(resolve, reject)\n                                                                    }\n                                                                    , EDITOR_LOAD_FALLBACK_TIMEOUT)\n                                                                \n                                                                ).then((editor) => \n                                                                \n                                                                    ({\n                                                                        editor, \n                                                                        type: 'simple'\n                                                                     })\n                                                                );\n                                                                return Promise.race([\n                                                                        MonacoEditorPromise.catch(() => \n                                                                        \n                                                                            SimpleEditorPromise\n                                                                        \n                                                                        ), \n                                                                        SimpleEditorPromise\n                                                                    ]).then(({\n                                                                        editor, \n                                                                        type\n                                                                     }: any) => {\n                                                                    \n                                                                        this.setState({\n                                                                            loadedEditor: type\n                                                                         })\n                                                                        clearTimeout(timeout);\n                                                                        return editor;\n                                                                    }\n                                                                    )\n                                                                ;\n                                                            }\n                                                        }>\n                                                            {\n                                                                ({\n                                                                    loaded, \n                                                                    data: Comp\n                                                                 }) => {\n                                                                \n                                                                    this._EditorComponent = Comp;\n                                                                    const file = files[selectedFile];\n                                                                    if (file) {\n                                                                        const {\n                                                                            contents\n                                                                         } = file;\n                                                                        const isMarkdown = selectedFile.endsWith('.md');\n                                                                        if (isMarkdown && this.state.isMarkdownPreview) {\n                                                                            return  (\n                                                                                <React.Fragment\n                                                                                >\n                                                                                    <LazyLoad\n                                                                                     load={() => \n                                                                                        \n                                                                                            import('../Markdown/MarkdownPreview')\n                                                                                    }>\n                                                                                        {\n                                                                                            ({\n                                                                                                loaded: mdLoaded, \n                                                                                                data: MarkdownPreview\n                                                                                             }) => {\n                                                                                            \n                                                                                                if (mdLoaded && MarkdownPreview) {\n                                                                                                    return  (\n                                                                                                        <MarkdownPreview\n                                                                                                         source={contents as string} />\n                                                                                                        )\n                                                                                                    ;\n                                                                                                }\n                                                                                                return  (\n                                                                                                    <EditorShell\n                                                                                                     />\n                                                                                                    )\n                                                                                                ;\n                                                                                            }\n                                                                                            \n                                                                                        }\n                                                                                    </LazyLoad>\n                                                                                    <button\n                                                                                     className={css(styles.previewToggle)} onClick={this._toggleMarkdownPreview}>\n                                                                                        <svg \n                                                                                            width=\"12px\"\n                                                                                            height=\"12px\"\n                                                                                            viewBox=\"0 0 18 18\"\n                                                                                            className={css(styles.previewToggleIcon)}\n                                                                                        >\n                                                                                            <g\n                                                                                             transform=\"translate(-147.000000, -99.000000)\">\n                                                                                                <g\n                                                                                                 transform=\"translate(144.000000, 96.000000)\">\n                                                                                                    <path\n                                                                                                     d=\"M3,17.25 L3,21 L6.75,21 L17.81,9.94 L14.06,6.19 L3,17.25 L3,17.25 Z M20.71,7.04 C21.1,6.65 21.1,6.02 20.71,5.63 L18.37,3.29 C17.98,2.9 17.35,2.9 16.96,3.29 L15.13,5.12 L18.88,8.87 L20.71,7.04 L20.71,7.04 Z\" />\n                                                                                                </g>\n                                                                                            </g>\n                                                                                        </svg>\n                                                                                    </button>\n                                                                                </React.Fragment>\n                                                                                )\n                                                                            ;\n                                                                        }\n                                                                        if (loaded && Comp) {\n                                                                            return  (\n                                                                                <React.Fragment\n                                                                                >\n                                                                                    <Comp \n                                                                                        selectedFile={selectedFile}\n                                                                                        files={files}\n                                                                                        autoFocus={!/Untitled file.*\\.(js|tsx?)$/.test(selectedFile)}\n                                                                                        annotations={annotations}\n                                                                                        updateFiles={this.props.updateFiles}\n                                                                                        onSelectFile={this.props.onSelectFile}\n                                                                                        lineNumbers=\"undefined\"\n                                                                                     />\n                                                                                    {\n                                                                                        (isMarkdown ?  (\n                                                                                            <button\n                                                                                             className={css(styles.previewToggle)} onClick={this._toggleMarkdownPreview}>\n                                                                                                <svg \n                                                                                                    width=\"16px\"\n                                                                                                    height=\"12px\"\n                                                                                                    viewBox=\"0 0 22 16\"\n                                                                                                    className={css(styles.previewToggleIcon)}\n                                                                                                >\n                                                                                                    <g\n                                                                                                     transform=\"translate(-145.000000, -1156.000000)\">\n                                                                                                        <g\n                                                                                                         transform=\"translate(144.000000, 1152.000000)\">\n                                                                                                            <path\n                                                                                                             d=\"M12,4.5 C7,4.5 2.73,7.61 1,12 C2.73,16.39 7,19.5 12,19.5 C17,19.5 21.27,16.39 23,12 C21.27,7.61 17,4.5 12,4.5 L12,4.5 Z M12,17 C9.24,17 7,14.76 7,12 C7,9.24 9.24,7 12,7 C14.76,7 17,9.24 17,12 C17,14.76 14.76,17 12,17 L12,17 Z M12,9 C10.34,9 9,10.34 9,12 C9,13.66 10.34,15 12,15 C13.66,15 15,13.66 15,12 C15,10.34 13.66,9 12,9 L12,9 Z\" />\n                                                                                                        </g>\n                                                                                                    </g>\n                                                                                                </svg>\n                                                                                            </button>\n                                                                                            )\n                                                                                         : null)\n                                                                                    }\n                                                                                </React.Fragment>\n                                                                                )\n                                                                            ;\n                                                                        }\n                                                                    }\n                                                                    else {\n                                                                        return  (\n                                                                            <NoFileSelected\n                                                                             />\n                                                                            )\n                                                                        ;\n                                                                    }\n                                                                    return  (\n                                                                        <EditorShell\n                                                                         />\n                                                                        )\n                                                                    ;\n                                                                }\n                                                                \n                                                            }\n                                                        </LazyLoad>\n                                                        )\n                                                    \n                                                }\n                                                {\n                                                    ((this.state.splitViewKind == 'both' || this.state.splitViewKind == 'right') && generatedArtifact) && generatedArtifact.artifactContent ?  (\n                                                        <GeneratedView \n                                                            generatedContent={generatedArtifact.artifactContent}\n                                                            generatedSourcePath={generatedArtifact.sourcePath}\n                                                            generatedPreviewURL={testPreviewURL}\n                                                            splitViewKind={this.state.splitViewKind}\n                                                         />\n                                                        )\n                                                     : generatedArtifact && generatedArtifact.errorLines ?  (\n                                                            <GenerationErrors \n                                                                errorName={generatedArtifact.errorName}\n                                                                errorLines={generatedArtifact.errorLines}\n                                                                errorMessage={generatedArtifact.errorMessage}\n                                                                errorStack={generatedArtifact.errorStack}\n                                                             />\n                                                            )\n                                                         : null\n                                                }\n                                                {\n                                                    jobError ?  (\n                                                        <GenerationErrors \n                                                            errorName={jobError.errorName}\n                                                            errorLines={[]}\n                                                            errorMessage={jobError.errorMessage}\n                                                            errorStack={jobError.errorStack}\n                                                         />\n                                                        )\n                                                     : null\n                                                }\n                                            </LayoutShell>\n                                            {\n                                                preferences.panelsShown ?  (\n                                                    <EditorPanels \n                                                        annotations={annotations}\n                                                        onShowErrorPanel={this._showErrorPanel}\n                                                        onTogglePanels={this._togglePanels}\n                                                        onSelectFile={this.props.onSelectFile}\n                                                        panelType={preferences.panelType}\n                                                     />\n                                                    )\n                                                 : null\n                                            }\n                                        </div>\n                                    </div>\n                                    <EditorFooter \n                                        annotations={annotations}\n                                        fileTreeShown={preferences.fileTreeShown}\n                                        previewShown={previewShown}\n                                        panelsShown={preferences.panelsShown}\n                                        sendCodeOnChangeEnabled={sendCodeOnChangeEnabled}\n                                        sdkVersion={sdkVersion}\n                                        onSendCode={onSendCode}\n                                        onToggleTheme={this._toggleTheme}\n                                        onTogglePanels={this._togglePanels}\n                                        onToggleFileTree={this._toggleFileTree}\n                                        onTogglePreview={onTogglePreview}\n                                        onToggleSendCode={onToggleSendCode}\n                                        onChangeSDKVersion={this.props.onChangeSDKVersion}\n                                        onShowShortcuts={this._handleShowShortcuts}\n                                        theme={this.props.preferences.theme}\n                                        loggedUid={preferences.loggedUid}\n                                        autoGenSingleDoc={preferences.autoGenSingleDoc}\n                                        autoExecJob={preferences.autoExecJob}\n                                        trustLocalStorage={preferences.trustLocalStorage}\n                                     />\n                                    {\n                                        loggedUser\n                                         &&  (\n                                            <ModalDialog\n                                             title=\"Manage your packies\" visible={currentModal === 'packi-manager'} onDismiss={this._handleHideModal}>\n                                                <PackiManagerContainer\n                                                 onClose={this._handleHideModal} />\n                                            </ModalDialog>\n                                            )\n                                        \n                                    }\n                                    <ModalDialog\n                                     visible={currentModal === 'shortcuts'} onDismiss={this._handleHideModal}>\n                                        <KeyboardShortcuts\n                                         />\n                                    </ModalDialog>\n                                    <Banner\n                                     type=\"success\" visible={currentBanner === 'connected'}>\n                                        Device connected!\n                                    </Banner>\n                                    <Banner\n                                     type=\"error\" visible={currentBanner === 'disconnected'}>\n                                        Device disconnected!\n                                    </Banner>\n                                    <Banner\n                                     type=\"info\" visible={currentBanner === 'autosave-disabled'}>\n                                        Automatic saving has been disabled in this Packi because you have it open in\n                  another tab.\n                                    </Banner>\n                                    <Banner\n                                     type=\"info\" visible={currentBanner === 'sdk-upgraded'}>\n                                        This Packi was written in an older Wizzi version that is not longer supported. We\n                  have upgraded the Wizzi version to\n                                        {sdkVersion}\n                                        .\n                                        <br\n                                         />\n                                        You might need to do some manual changes to make the Packi work correctly.\n                                    </Banner>\n                                    <Banner\n                                     type=\"info\" visible={currentBanner === 'slow-connection'}>\n                                        Slow network detected. Trying to load a basic version of the editor. Some features\n                  such as linting and autocomplete may not work.\n                                    </Banner>\n                                    <Banner\n                                     type=\"info\" visible={currentBanner === 'export-unavailable'}>\n                                        You need to save the Packi first to export the code!\n                                    </Banner>\n                                </React.Fragment>\n                                )\n                            ;\n                        }\n                        \n                    }\n                </PublishManager>\n            </ContentShell>\n            )\n        ;\n    }\n}\nexport const EditorView = withPreferences(connect((state: any) => \n\n    ({\n        viewer: state.viewer, \n        loggedUser: state.loggedUser\n     })\n)(EditorViewComp)\n);\nexport default EditorView;\nconst styles = StyleSheet.create({\n    editorAreaOuter: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'column', \n        minWidth: 0, \n        minHeight: 0\n     }, \n    editorAreaOuterWrapper: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'row', \n        minHeight: 0, \n        minWidth: 0\n     }, \n    embedModal: {\n        minWidth: 0, \n        minHeight: 0, \n        maxWidth: 'calc(100% - 48px)', \n        maxHeight: 'calc(100% - 48px)'\n     }, \n    preview: {\n        backgroundColor: c('content'), \n        borderLeft: `1px solid ${c('border')}`\n     }, \n    previewToggle: {\n        appearance: 'none', \n        position: 'absolute', \n        right: 0, \n        bottom: 0, \n        margin: 32, \n        padding: 12, \n        height: 48, \n        width: 48, \n        border: 0, \n        borderRadius: '50%', \n        backgroundColor: c('secondary'), \n        color: c('secondary-text'), \n        outline: 0, \n        transitionDuration: '170ms', \n        transitionProperty: 'box-shadow', \n        transitionTimingFunction: 'linear', \n        ':focus-visible': {\n            outline: 'auto'\n         }, \n        ':hover': {\n            boxShadow: s('small')\n         }\n     }, \n    previewToggleIcon: {\n        fill: 'currentColor', \n        verticalAlign: -1\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\GeneratedView.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport HelpIcon from '@material-ui/icons/Help';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SimpleEditor from '../Editor/SimpleEditor';\nimport WebFrame from '../widgets/WebFrame';\ntype ViewKindType = 'generated' | 'mtree' | 'debug' | 'browser';\ntype Props = { \n    classes: any;\n    generatedContent: string;\n    generatedSourcePath?: string;\n    generatedPreviewURL?: string;\n    splitViewKind: string;\n};\ntype State = { \n    view: ViewKindType | null;\n};\nclass GeneratedView extends React.Component<Props, State> {\n    state = {\n        view: 'generated' as ViewKindType\n    }\n    ;\n    _handleGenerated = () => \n    \n        this.setState({\n            view: 'generated'\n         })\n    ;\n    _handleMTree = () => \n    \n        this.setState({\n            view: 'mtree'\n         })\n    ;\n    _handleDebug = () => \n    \n        this.setState({\n            view: 'debug'\n         })\n    ;\n    _handleBrowser = () => \n    \n        this.setState({\n            view: 'browser'\n         })\n    ;\n    render() {\n        const {\n            classes, \n            splitViewKind\n         } = this.props;\n        const {\n            view\n         } = this.state;\n        const selectedFile = 'gen.txt';\n        const files: PackiFiles = {\n            [selectedFile]: {\n                contents: this.props.generatedContent, \n                type: \"CODE\"\n             }\n         };\n        return  (\n            <div\n             className={splitViewKind === 'right' ? classes.containerFull : classes.container}>\n                {\n                    view === 'generated'\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            <SimpleEditor \n                                path=\"\"\n                                value={this.props.generatedContent}\n                                selectedFile={selectedFile}\n                                files={files}\n                                onValueChange={() => \n                                    \n                                        null\n                                    \n                                }\n                                lineNumbers=\"on\"\n                             />\n                        </div>\n                        )\n                    \n                }\n                {\n                    view === 'browser'\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            {\n                                ((this.props.generatedSourcePath.endsWith('.html.ittf') || this.props.generatedSourcePath.endsWith('.svg.ittf')) ?  (\n                                    <WebFrame\n                                     previewURL={this.props.generatedPreviewURL} />\n                                    )\n                                 :  (\n                                    <h1\n                                    >\n                                        No viewer for document\n                                        {this.props.generatedSourcePath}\n                                    </h1>\n                                    )\n                                )\n                            }\n                        </div>\n                        )\n                    \n                }\n                <div\n                 className={classes.sidebar}>\n                    <List\n                    >\n                        <ListItem\n                         disableGutters={true}>\n                            <Tooltip\n                             title=\"View generated content\">\n                                <IconButton\n                                 onClick={this._handleGenerated} classes={{\n                                        root: classes.iconButton\n                                     }}>\n                                    <ViewListIcon\n                                     />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItem>\n                        <ListItem\n                         disableGutters={true}>\n                            <Tooltip\n                             title=\"View mTree\">\n                                <IconButton\n                                 onClick={this._handleMTree} classes={{\n                                        root: classes.iconButton\n                                     }}>\n                                    <HelpIcon\n                                     />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItem>\n                        <ListItem\n                         disableGutters={true}>\n                            <Tooltip\n                             title=\"View mTree build script\">\n                                <IconButton\n                                 onClick={this._handleDebug} classes={{\n                                        root: classes.iconButton\n                                     }}>\n                                    <InfoIcon\n                                     />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItem>\n                        <ListItem\n                         disableGutters={true}>\n                            <Tooltip\n                             title=\"Browse artifact\">\n                                <IconButton\n                                 onClick={this._handleBrowser} classes={{\n                                        root: classes.iconButton\n                                     }}>\n                                    <InfoIcon\n                                     />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItem>\n                    </List>\n                </div>\n            </div>\n            )\n        ;\n    }\n}\nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        container: {\n            display: 'flex', \n            flexDirection: 'row', \n            borderLeft: '1px solid #cccccc', \n            width: '44vw', \n            height: '100%'\n         }, \n        containerFull: {\n            display: 'flex', \n            flexDirection: 'row', \n            borderLeft: '1px solid #cccccc', \n            width: '100%', \n            height: '100%'\n         }, \n        editor: {\n            padding: '5px', \n            flex: 'auto'\n         }, \n        sidebar: {\n            display: 'flex', \n            flexDirection: 'column', \n            padding: '15px', \n            background: theme.palette.primary.light\n         }, \n        iconButton: {\n            padding: '10px'\n         }\n     })\n;\nexport default withStyles(muiStyles)(GeneratedView);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\GenerationErrors.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nexport type GenerationErrorsProps = { \n    classes?: any;\n    errorName?: string;\n    errorLines?: string[];\n    errorMessage?: string;\n    errorStack?: string;\n};\n\nexport class GenerationErrors extends React.Component<GenerationErrorsProps> {\n    render() {\n        const {\n            classes, \n            errorName, \n            errorMessage, \n            errorLines, \n            errorStack\n         } = this.props;\n        return  (\n            <div\n             className={classes.container}>\n                <div\n                 className={classes.errorName}>\n                    {errorName}\n                </div>\n                <div\n                 className={classes.message}>\n                    {\n                        errorMessage\n                         && errorMessage.split(',').map((line, i) => \n                        \n                             (\n                            <div\n                             key={i}>\n                                {line}\n                            </div>\n                            )\n                        \n                        )\n                    }\n                </div>\n                <pre\n                 className={classes.lines}>\n                    {errorLines && errorLines.join('\\n')}\n                </pre>\n                <ul\n                >\n                    {\n                        errorStack\n                         && errorStack.split('\\n').map((line, i) => \n                        \n                             (\n                            <li\n                             key={i}>\n                                {line}\n                            </li>\n                            )\n                        \n                        )\n                    }\n                </ul>\n            </div>\n            )\n        ;\n    }\n}\n\nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        container: {\n            display: 'flex', \n            flexDirection: 'column', \n            borderLeft: '1px solid #cccccc', \n            width: '44vw', \n            height: '100%', \n            overflow: 'scroll'\n         }, \n        errorName: {\n            padding: '15px 30px', \n            fontSize: '28px'\n         }, \n        message: {\n            padding: '15px 30px', \n            fontSize: '20px'\n         }, \n        lines: {\n            padding: '15px 30px', \n            fontSize: '18px', \n            fontFamily: 'Courier, mono'\n         }\n     })\n;\n\nexport default withStyles(muiStyles)(GenerationErrors);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\KeyboardShortcuts.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {KeyMap} from '../widgets/KeybindingsManager';\nimport ShortcutLabel from '../widgets/ShortcutLabel';\nexport const Shortcuts = {\n    save: {\n        description: 'Save changes', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.S\n        ]\n     }, \n    update: {\n        type: 'update', \n        description: 'Update code on device', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.U\n        ]\n     }, \n    tree: {\n        description: 'Toggle sidebar', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.Backslash\n        ]\n     }, \n    panels: {\n        description: 'Toggle error and log panels', \n        combo: [\n            KeyMap.Ctrl, \n            KeyMap.Tilde\n        ]\n     }, \n    format: {\n        description: 'Format code with prettier', \n        combo: [\n            KeyMap.Ctrl, \n            KeyMap.Alt, \n            KeyMap.F\n        ]\n     }, \n    shortcuts: {\n        description: 'Show keyboard shortcuts', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.Alt, \n            KeyMap.Shift\n        ]\n     }\n };\nclass KeyboardShortcuts extends React.PureComponent {\n    render() {\n        return  (\n            <table\n             className={css(styles.shortcutList)}>\n                <tbody\n                >\n                    {\n                        Object.entries(Shortcuts).map(([type, binding]) => \n                        \n                             (\n                            <tr\n                             key={type}>\n                                <td\n                                 className={css(styles.shortcutCell, styles.shortcutLabelCell)}>\n                                    <ShortcutLabel\n                                     boxed combo={binding.combo} />\n                                </td>\n                                <td\n                                 className={css(styles.shortcutCell, styles.shortcutDescriptionCell)}>\n                                    {binding.description}\n                                </td>\n                            </tr>\n                            )\n                        \n                        )\n                    }\n                </tbody>\n            </table>\n            )\n        ;\n    }\n}\nexport default KeyboardShortcuts;\nconst styles = StyleSheet.create({\n    shortcutList: {\n        fontSize: '1.2em', \n        tableLayout: 'fixed'\n     }, \n    shortcutCell: {\n        padding: '6px 8px'\n     }, \n    shortcutLabelCell: {\n        textAlign: 'right', \n        marginRight: 8\n     }, \n    shortcutDescriptionCell: {\n        textAlign: 'left'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\ModalEditTitleAndDescription.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {DEFAULT_PACKI_DESCRIPTION} from '../../features/config';\nimport Form from '../Form/Form';\nimport withStatus from '../Form/withStatus';\nimport withValidation from '../Form/withValidation';\nimport {c} from '../ThemeProvider';\nimport {Button} from '../widgets/Button';\nimport LargeInput from '../widgets/LargeInput';\nimport LargeTextArea from '../widgets/LargeTextArea';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    visible: boolean;\n    title: string;\n    action: string;\n    onSubmit: (details: { \n        name: string;\n        description: string;\n    }) => void;\n    onDismiss: () => void;\n    description: string | undefined;\n    name: string;\n    isWorking?: boolean;\n};\n// @ts-ignore\ntype State = { \n    name: string;\n    description: string;\n    visible: boolean;\n};\n\n// @ts-ignore\nconst FormButton = withStatus(Button); \n\n// @ts-ignore\nconst ValidatedInput = withValidation(LargeInput); \nexport default class ModalEditTitleAndDescription extends React.Component<Props, State> {\n        static getDerivedStateFromProps(props: Props, state: State) {\n            if (state.visible !== props.visible) {\n                if (props.visible) {\n                    return {\n                            name: props.name || '', \n                            description: props.description ?? '', \n                            visible: props.visible\n                         };\n                }\n                else {\n                    return {\n                            visible: props.visible\n                         };\n                }\n            }\n            return null;\n        }\n        state = {\n            name: this.props.name || '', \n            description: this.props.description ?? '', \n            visible: this.props.visible\n        }\n        ;\n        _handleSubmit = () => \n            this.props.onSubmit({\n                name: this.state.name, \n                description: this.state.description\n             });\n        _validateName = (name: string) => \n            name ? /^[a-z_\\-\\d\\s]+$/i.test(name) ? null : new Error('Name can only contain letters, numbers, space, hyphen (-) and underscore (_).') : new Error('Name cannot be empty.');\n        render() {\n            const {\n                visible, \n                title, \n                onDismiss, \n                isWorking, \n                action\n             } = this.props;\n            return  (\n                <ModalDialog\n                 visible={visible} title={title} onDismiss={onDismiss}>\n                    <Form\n                     onSubmit={this._handleSubmit}>\n                        <h4\n                         className={css(styles.subtitle)}>\n                            Project name\n                        </h4>\n                        <ValidatedInput \n                            \n                            // @ts-ignore\n                            autoFocus\n                            value={this.state.name}\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>  \n                                    this.setState({\n                                        name: e.target.value\n                                     })\n                            }\n                            placeholder=\"Unnamed Packi\"\n                            validate={this._validateName}\n                         />\n                        <h4\n                         className={css(styles.subtitle)}>\n                            Description\n                        </h4>\n                        <LargeTextArea \n                            value={this.state.description}\n                            onChange={e => \n                                \n                                    this.setState({\n                                        description: e.target.value\n                                     })\n                            }\n                            minRows={4}\n                            placeholder={DEFAULT_PACKI_DESCRIPTION}\n                         />\n                        <div\n                         className={css(styles.buttons)}>\n                            <FormButton \n                                \n                                // @ts-ignore\n                                type=\"submit\"\n                                large\n                                variant=\"primary\"\n                                loading={isWorking}\n                            >\n                                {action}\n                            </FormButton>\n                        </div>\n                    </Form>\n                </ModalDialog>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({ subtitle: { fontSize: 16,  fontWeight: 500,  padding: 0,  lineHeight: '22px',  margin: '16px 0 6px 0'  },  buttons: { margin: '20px 0 0 0'  },  caption: { marginTop: 24,  fontSize: '16px',  lineHeight: '22px',  textAlign: 'center'  },  link: { cursor: 'pointer',  color: c('primary'),  textDecoration: 'underline'  }  }); \n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\NoFileSelected.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nexport default class NoFileSelected extends React.PureComponent {\n        render() {\n            return  (\n                <div\n                 className={css(styles.container)}>\n                    <h4\n                     className={css(styles.text)}>\n                        Select a file to view and edit\n                    </h4>\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1, \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center'\n     }, \n    text: {\n        fontSize: '1.5em', \n        fontWeight: 500, \n        opacity: 0.5\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\ProblemsPanel.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport trim from 'lodash/trim';\nimport * as React from 'react';\nimport {Annotation} from '../../features/annotations';\nimport {c, s} from '../ThemeProvider';\nexport type ProblemsPanelProps = { \n    annotations: Annotation[];\n    onSelectFile: (path: string) => void;\n};\nexport function ProblemsPanel({\n    annotations, \n    onSelectFile\n }: ProblemsPanelProps) {\n\n    const [selected, setSelected] = React.useState<string | undefined>(undefined);\n    return  (\n        <React.Fragment\n        >\n            {\n                annotations.map(({\n                    message, \n                    location, \n                    source, \n                    severity, \n                    action\n                 }, index) => {\n                \n                    let iconStyle = styles.infoIcon;\n                    let locationStyle = styles.infoColor;\n                    if (severity >= 3) {\n                        iconStyle = styles.errorIcon;\n                        locationStyle = styles.errorColor;\n                    }\n                    else {\n                        if (severity >= 2) {\n                            iconStyle = styles.warningIcon;\n                            locationStyle = styles.warningColor;\n                        }\n                        else {\n                            if (severity < 0) {\n                                iconStyle = styles.loadingIcon;\n                            }\n                        }\n                    }\n                    const file = location?.fileName ?  (\n                        <span\n                         className={css(styles.location, locationStyle)} onClick={() => \n                            \n                                onSelectFile(location.fileName)\n                        }>\n                            {\n                                `${location.fileName} (${location.startLineNumber}:${location.startColumn})`\n                            }\n                        </span>\n                        )\n                     : '';\n                    const icon =  (\n                    <div\n                     className={css(styles.icon, iconStyle)} />\n                    )\n                    ;\n                    const lines = message.split('\\n');\n                    const title = lines[0];\n                    let suffix;\n                    if (action) {\n                        suffix =  (\n                        <button\n                         className={css(styles.action)} onClick={action.run}>\n                            {\n                                action.icon ?  (\n                                    <span\n                                     className={css(styles.actionIcon)}>\n                                        <action.icon\n                                         />\n                                    </span>\n                                    )\n                                 : undefined\n                            }\n                            <span\n                             className={css(styles.actionText)}>\n                                {action.title}\n                            </span>\n                        </button>\n                        )\n                        ;\n                    }\n                    else {\n                        if (source) {\n                            suffix =  (\n                            <span\n                             className={css(styles.source)}>\n                                {\n                                    ` (${source})`\n                                }\n                            </span>\n                            )\n                            ;\n                        }\n                    }\n                    const key = `${location?.fileName ?? ''}.${title}.${source ?? ''}`;\n                    const expanded = annotations.length === 1 || selected === key;\n                    return  (\n                        <div\n                         key={index} className={css(styles.item)} onClick={() => \n                            \n                                setSelected(key)\n                        }>\n                            <div\n                             className={css(styles.line)}>\n                                {icon}\n                                {file}\n                                {title}\n                                {suffix}\n                            </div>\n                            {\n                                expanded && lines.length > 1 ?  (\n                                    <pre\n                                     className={css(styles.callstack)}>\n                                        {trim(message.substring(title.length), '\\r\\n')}\n                                    </pre>\n                                    )\n                                 : undefined\n                            }\n                        </div>\n                        )\n                    ;\n                }\n                )\n            }\n        </React.Fragment>\n        )\n    ;\n}\n\nexport default ProblemsPanel;\n\nconst styles = StyleSheet.create({\n    item: {\n        display: 'flex', \n        flexDirection: 'column', \n        padding: '0 1.5em'\n     }, \n    line: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        border: 0, \n        margin: 0, \n        padding: '1px 0', \n        color: c('text'), \n        minHeight: 30\n     }, \n    icon: {\n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: 'center center', \n        width: 16, \n        height: 16, \n        marginRight: '0.5em'\n     }, \n    loadingIcon: {\n        borderWidth: 2, \n        borderStyle: 'solid', \n        borderTopColor: c('text'), \n        borderLeftColor: c('text'), \n        borderBottomColor: c('text'), \n        borderRightColor: 'rgba(0, 0, 0, .16)', \n        opacity: 0.5, \n        borderRadius: '50%', \n        verticalAlign: -3, \n        animationName: [\n            {\n                from: {\n                    transform: 'rotate(0deg)'\n                 }, \n                to: {\n                    transform: 'rotate(360deg)'\n                 }\n             }\n        ], \n        animationDuration: '1s', \n        animationIterationCount: 'infinite', \n        animationTimingFunction: 'linear'\n     }, \n    infoIcon: {\n        backgroundImage: `url(${require('../../assets/info-icon.png')})`\n     }, \n    errorIcon: {\n        backgroundImage: `url(${require('../../assets/cross-red.png')})`\n     }, \n    warningIcon: {\n        backgroundImage: `url(${require('../../assets/cross.png')})`\n     }, \n    location: {\n        textDecoration: 'underline', \n        cursor: 'pointer', \n        marginRight: '0.5em'\n     }, \n    infoColor: {\n        opacity: 0.5\n     }, \n    errorColor: {\n        color: c('error')\n     }, \n    warningColor: {\n        color: c('warning')\n     }, \n    source: {\n        color: c('text'), \n        opacity: 0.5, \n        marginLeft: '0.5em'\n     }, \n    action: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        appearance: 'none', \n        outline: 0, \n        margin: '0 0 0 0.5em', \n        backgroundColor: c('content'), \n        color: c('selected'), \n        borderRadius: 3, \n        border: `1px solid ${c('selected')}`, \n        lineHeight: 1, \n        padding: '0 12px', \n        minWidth: 50, \n        minHeight: 30, \n        ':hover': {\n            backgroundColor: c('selected'), \n            color: c('content'), \n            boxShadow: s('small')\n         }\n     }, \n    actionIcon: {\n        marginRight: 4\n     }, \n    actionText: {\n        whiteSpace: 'nowrap', \n        overflow: 'hidden', \n        textOverflow: 'ellipsis'\n     }, \n    callstack: {\n        color: c('error'), \n        fontFamily: 'var(--font-monospace)', \n        margin: '0.5em 0px'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\UserMenu.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {withAuth, getLoginHref, AuthProps} from '../../features/auth';\nimport {c} from '../ThemeProvider';\nimport {Avatar} from '../widgets/Avatar';\nimport ContextMenu from '../widgets/ContextMenu';\nexport type UserMenuProps = AuthProps;\ntype State = { \n    visible: boolean;\n};\nexport class UserMenuComp extends React.Component<UserMenuProps, State> {\n    state: State = {\n        visible: false\n    }\n    ;\n    componentDidMount() {\n        document.addEventListener('click', this._handleDocumentClick);\n        document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click', this._handleDocumentClick);\n        document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    _handleDocumentClick = (e: MouseEvent) => {\n        if (this.state.visible) {\n            if (this._menu.current && e.target !== this._menu.current && !this._menu.current.contains(e.target as HTMLElement)) {\n                this._hideMenu();\n            }\n        }\n        else {\n            if (this._avatar.current && (e.target === this._avatar.current || this._avatar.current.contains(e.target as Node))) {\n                this.setState((state) => \n                \n                    ({\n                        visible: !state.visible\n                     })\n                )\n            }\n        }\n    };\n    _handleDocumentContextMenu = () => {\n        if (this.state.visible) {\n            this._hideMenu();\n        }\n    };\n    _hideMenu = () => \n        this.setState({\n            visible: false\n         });\n    _menu = React.createRef<HTMLUListElement>();\n    _avatar = React.createRef<HTMLButtonElement>();\n    render() {\n        const {\n            viewer\n         } = this.props;\n        return  (\n            <div\n             className={css(styles.container)}>\n                <button\n                 ref={this._avatar} className={css(styles.button)}>\n                    <Avatar\n                     source={viewer?.picture ? viewer.picture : null} size={26} />\n                </button>\n                <ContextMenu \n                    ref={this._menu}\n                    visible={this.state.visible}\n                    actions={viewer ? [\n                                {\n                                    label: 'My Packies', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/@${viewer.username}/packies`)\n                                    \n                                 }, \n                                {\n                                    label: 'Account Settings', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/settings`)\n                                    \n                                 }\n                            ] : [\n                                {\n                                    label: 'Log in to Wizzi', \n                                    handler: () => \n                                    \n                                        window.location.href = '#'\n                                    \n                                 }\n                            ]}\n                    onHide={this._hideMenu}\n                    className={css(styles.menu)}\n                 />\n            </div>\n            )\n        ;\n    }\n}\nexport const UserMenu = withAuth(UserMenuComp);\nexport default withAuth(UserMenuComp);\nconst styles = StyleSheet.create({\n    container: {\n        marginRight: 16\n     }, \n    menu: {\n        position: 'absolute', \n        margin: '4px 0', \n        right: 16, \n        top: '100%'\n     }, \n    button: {\n        appearance: 'none', \n        background: 'transparent', \n        padding: 0, \n        margin: 0, \n        border: 0, \n        outline: 0, \n        height: 40, \n        width: 40, \n        borderRadius: 2, \n        textDecoration: 'none', \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        ':hover': {\n            backgroundColor: c('hover')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Editor\\SimpleEditor.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {useState, useEffect} from \"react\";\nimport Prism from \"prismjs\";\n\nexport interface SimpleEditorProps {\n    content: string;\n    language: string;\n}\n\nexport const SimpleEditor: FunctionComponent<SimpleEditorProps> = ({\n    content, \n    language\n }) => {\n\n    \n    const [contentValue, setContentValue] = useState(content);\n    const handleKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    \n        let value = contentValue,\n            selStartPos = evt.currentTarget.selectionStart;\n        // handle 4-space indent on\n        console.log(evt.currentTarget);\n        if (evt.key === \"Tab\") {\n            value = value.substring(0, selStartPos) + \"    \" + value.substring(selStartPos, value.length);\n            evt.currentTarget.selectionStart = selStartPos + 3;\n            evt.currentTarget.selectionEnd = selStartPos + 4;\n            evt.preventDefault();\n            setContentValue(value);\n        }\n    }\n    ;\n    useEffect(() => \n    \n        Prism.highlightAll()\n    , [\n        language, \n        contentValue\n    ])\n    return  (\n        <div\n         className=\"code-edit-container\">\n            <textarea \n                className=\"code-input\"\n                value={contentValue}\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => \n                    \n                        setContentValue(evt.target.value)\n                }\n                onKeyDown={handleKeyDown}\n             />\n            <pre\n             className=\"code-output\">\n                <code\n                 className={`language-${language}`}>\n                    {contentValue}\n                </code>\n            </pre>\n        </div>\n        )\n    ;\n}\n;\nexport default SimpleEditor;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileList.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport pickBy from 'lodash/pickBy';\nimport * as React from 'react';\nimport eslintrc from '../../features/lint/eslint.json';\nimport {SaveStatus, PackiFiles, PackiFile} from '../../features/packi';\nimport {Annotation} from '../../features/annotations';\nimport {FileSystemEntry, TextFileEntry, AssetFileEntry, isPackageJson, getUniquePath, isInsideFolder, isESLintConfig} from '../../features/file';\nimport ImportExportMenu from '../Import/ImportExportMenu';\nimport ImportFilesManager from '../Import/ImportFilesManager';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {SidebarShell} from '../shell/SidebarShell';\nimport {c} from '../ThemeProvider';\nimport ResizablePane from '../widgets/ResizablePane';\nimport Toast from '../widgets/Toast';\nimport FileListChildren from './FileListChildren';\nimport FileListEntryDropTarget from './FileListEntryDropTarget';\nimport FileListOpenEntry from './FileListOpenEntry';\nimport FileListPane from './FileListPane';\nimport FileListPaneButton from './FileListPaneButton';\nimport closeEntry from './actions/closeEntry';\nimport createNewEntry from './actions/createNewEntry';\nimport expandEntry from './actions/expandEntry';\nimport openEntry from './actions/openEntry';\nimport pasteEntry from './actions/pasteEntry';\nimport recursivelyCreateParents from './actions/recursivelyCreateParents';\nimport renameEntry from './actions/renameEntry';\nimport selectEntry from './actions/selectEntry';\nimport updateEntry from './actions/updateEntry';\nimport {filesToEntries, findFocusedEntry} from './utils/convertFileStructure';\nexport type FileListProps = { \n    visible: boolean;\n    files: PackiFiles;\n    selectedFile: string;\n    updateFiles: (updateFn: (files: PackiFiles) => { \n        [path: string]: PackiFile | null;\n    }) => void;\n    onSelectFile: (path: string) => void;\n    onRemoveFile: (path: string) => void;\n    onRenameFile: (oldPath: string, newPath: string) => void;\n    uploadFileAsync: (file: File) => Promise<string>;\n    onDownloadCode: () => Promise<void>;\n    onImportRepo: () => void;\n    onImportProduction: () => void;\n    saveStatus: SaveStatus;\n    theme: ThemeName;\n    annotations: Annotation[];\n};\ntype State = { \n    clipboard: FileSystemEntry[];\n    deleted: { \n        id: number;\n        path: string;\n        entries: FileSystemEntry[];\n    }[];\n    openFilesPane: boolean;\n    projectPane: boolean;\n    entries: FileSystemEntry[];\n    selectedFile: string;\n};\nconst AddIcon = () => \n\n     (\n    <g\n     transform=\"translate(7.000000, 7.000000)\">\n        <circle \n            fill={c('success')}\n            cx=\"4.5\"\n            cy=\"4.5\"\n            r=\"4.5\"\n         />\n        <rect \n            fill={c('success-text')}\n            x=\"4\"\n            y=\"2\"\n            width=\"1\"\n            height=\"5\"\n         />\n        <rect \n            fill={c('success-text')}\n            x=\"2\"\n            y=\"4\"\n            width=\"5\"\n            height=\"1\"\n         />\n    </g>\n    )\n\n;\nclass FileListComp extends React.PureComponent<FileListProps, State> {\n    state: State = {\n        clipboard: [], \n        deleted: [], \n        openFilesPane: true, \n        projectPane: true, \n        entries: [], \n        selectedFile: ''\n    }\n    ;\n    static getDerivedStateFromProps(props: FileListProps, state: State) {\n        let entries = filesToEntries(props.files, props.annotations, state.entries);\n        entries = state.selectedFile !== props.selectedFile ? openEntry(entries, props.selectedFile) : entries;\n        return {\n                entries, \n                selectedFile: props.selectedFile\n             };\n    }\n    private updateEntries(entries: FileSystemEntry[]) {\n        const prevEntries = this.state.entries;\n        // Sync changes\n        this.setState({\n            entries\n         })\n        // Sync changes\n        // Update focus\n        this.props.updateFiles((files) => {\n        \n            \n            // Handle file removal (and rename)\n            const updates: { \n                [path: string]: PackiFile | null;\n            } = {};\n            for (const path in files) {\n                const entry = entries.find(entry => \n                \n                    entry.item.path === path\n                );\n                if (!entry) {\n                    updates[path] = null;\n                }\n                // Handle file removal (and rename)\n                // Handle added/renamed files\n            }\n            // Handle added/renamed files\n            entries.forEach((entry) => {\n            \n                if (entry.item.type === 'file' && !files[entry.item.path] && !isPackageJson(entry.item.path)) {\n                    updates[entry.item.path] = {\n                        type: entry.item.asset ? 'ASSET' : 'CODE', \n                        contents: entry.item.asset ? entry.item.uri : entry.item.content\n                     };\n                }\n            }\n            )\n            return updates;\n        }\n        )\n        \n        // Update focus\n        const prevFocusedEntry = findFocusedEntry(prevEntries);\n        const focusedEntry = findFocusedEntry(entries);\n        if (focusedEntry?.item?.path !== prevFocusedEntry?.item?.path) {\n            this.props.onSelectFile(focusedEntry?.item?.path ?? '');\n        }\n    }\n    _handleEntrySelect = (path: string) => \n        this.updateEntries(selectEntry(this.state.entries, path));\n    _handleEntryOpen = (path: string) => \n        this.updateEntries(openEntry(this.state.entries, path));\n    _handleEntryFocus = (path: string) => \n        this.updateEntries(openEntry(this.state.entries, path, true));\n    _handleEntryExpand = (path: string, expand?: boolean) => \n        this.updateEntries(expandEntry(this.state.entries, path, expand));\n    _handleEntryRename = (oldPath: string, newPath: string) => {\n        if (oldPath === newPath) {\n            return ;\n        }\n        const entry = this.state.entries.find(e => \n        \n            e.item.path === oldPath\n        );\n        if (entry) {\n            if (entry.item.type === 'folder') {\n                this.state.entries.filter(e => \n                \n                    e.item.type === 'file' && e.item.path.startsWith(oldPath)\n                ).forEach(renamedFile => \n                \n                    this.props.onRenameFile(renamedFile.item.path, `${newPath}${renamedFile.item.path.substring(oldPath.length)}`)\n                )\n            }\n            else {\n                this.props.onRenameFile(oldPath, newPath);\n            }\n        }\n        this.updateEntries(renameEntry(this.state.entries, oldPath, newPath));\n    };\n    _restoreEntries = (entries: FileSystemEntry[]) => \n        this.updateEntries([\n            ...this.state.entries, \n            ...(entries.map(e => \n                \n                    updateEntry(e, {\n                        item: {\n                            path: getUniquePath(this.state.entries.map(it => \n                            \n                                it.item.path\n                            ), e.item.path)\n                         }\n                     })\n                ))\n            \n        ]);\n    _handleDismissDelete = (id: number) => \n        this.setState((state) => \n        \n            ({\n                deleted: state.deleted.filter(g => \n                \n                    g.id !== id\n                )\n             })\n        );\n    _handleEntryClose = (path: string) => \n        this.updateEntries(this.state.entries.map((e) => \n        \n            (e.item.path === path ? closeEntry(e) : e)\n        ));\n    _handleEntryCloseOthers = (path: string) => \n        this.updateEntries(this.state.entries.map((e) => \n        \n            (e.item.path !== path ? closeEntry(e) : e)\n        ));\n    _handleEntryCloseAll = () => \n        this.updateEntries(this.state.entries.map(e => \n        \n            closeEntry(e)\n        ));\n    _handleEntryDelete = (path: string) => {\n        const entry = this.state.entries.find(e => \n        \n            e.item.path === path\n        );\n        const deletedEntries: FileSystemEntry[] = [];\n        this.updateEntries(this.state.entries.filter((e) => {\n        \n            const remove = e.item.path === path || isInsideFolder(e.item.path, path);\n            if (remove) {\n                deletedEntries.push(e);\n                if (e.item.type === 'file') {\n                    this.props.onRemoveFile(e.item.path);\n                }\n            }\n            return !remove;\n        }\n        ))\n        this.setState((state) => \n        \n            ({\n                deleted: [\n                    ...state.deleted, \n                    {\n                        id: this._currentDeleteID++, \n                        path: entry ? entry.item.path : 'Item', \n                        entries: deletedEntries\n                     }\n                ]\n             })\n        )\n    };\n    _currentDeleteID: number = 0;\n    _handleEntryImport = (entry: TextFileEntry | AssetFileEntry) => {\n        let entries: FileSystemEntry[];\n        if (isPackageJson(entry.item.path)) {\n            \n            // Merge dependencies from package.json file\n            entries = this.state.entries.map((e) => {\n            \n                if (isPackageJson(e.item.path)) {\n                    try {\n                        \n                        // @ts-ignore\n                        \n                        // @ts-ignore\n                        const previous = JSON.parse(e.item.content); \n                        \n                        // @ts-ignore\n                        const next = JSON.parse(entry.item.content); \n                        return {\n                                    ...e, \n                                    item: {\n                                        ...e.item, \n                                        content: JSON.stringify({\n                                            ...previous, \n                                            dependencies: {\n                                                ...previous.dependencies, \n                                                ...Object.keys(next.dependencies).reduce((acc: { \n                                                    [key: string]: string;\n                                                }, name) => {\n                                                \n                                                    return acc;\n                                                }\n                                                , {})\n                                             }\n                                         }, null, 2)\n                                     }\n                                 } as TextFileEntry;\n                    } \n                    catch (err) {\n                    } \n                }\n                return e;\n            }\n            )\n            ;\n        }\n        else {\n            if (isESLintConfig(entry.item.path)) {\n                try {\n                    \n                    // Cleanup the config file to remove unsupported plugins and rules\n                    const content = JSON.parse((entry as TextFileEntry).item.content);\n                    if (content.plugins) {\n                        content.plugins = content.plugins.filter((name: string) => \n                        \n                            eslintrc.plugins.includes(name)\n                        )\n                        ;\n                        if (!content.plugins.length) {\n                            delete content.plugins\n                        }\n                    }\n                    if (content.rules) {\n                        content.rules = pickBy(content.rules, (_, key) => {\n                        \n                            if (key.includes('/')) {\n                                return eslintrc.plugins.some(name => \n                                    \n                                        key.startsWith(`${name}/`)\n                                    );\n                            }\n                            return key;\n                        }\n                        )\n                        ;\n                    }\n                    if (content.extends) {\n                        if (typeof content.extends === 'string' && !content.extends.startsWith('eslint:')) {\n                            delete content.extends\n                        }\n                        else {\n                            content.extends = content.extends.filter((name: string) => \n                            \n                                name.startsWith('eslint:')\n                            )\n                            ;\n                            if (!content.extends.length) {\n                                delete content.extends\n                            }\n                        }\n                    }\n                    \n                    // Remove existing eslintrc if any\n                    entries = this.state.entries.filter(e => \n                    \n                        !isESLintConfig(e.item.path)\n                    )\n                    ;\n                    entries.push(updateEntry(entry, {\n                        item: {\n                            content: JSON.stringify(content, null, 2)\n                         }\n                     }))\n                } \n                catch (e) {\n                    \n                    // Ignore errors\n                    entries = this.state.entries;\n                } \n            }\n            else {\n                const parents = recursivelyCreateParents(this.state.entries, entry.item.path);\n                entries = [\n                    ...this.state.entries, \n                    ...parents\n                ];\n                entries.push(updateEntry(entry, {\n                    item: {\n                        path: getUniquePath(entries.map(e => \n                        \n                            e.item.path\n                        ), entry.item.path)\n                     }\n                 }))\n            }\n        }\n        this.updateEntries(entries);\n    };\n    _handleEntryPaste = (path: string | undefined, e: FileSystemEntry) => \n        this.updateEntries(pasteEntry(this.state.entries, path, e));\n    _handleCopy = (path: string) => \n        this.setState((state) => \n        \n            ({\n                clipboard: state.entries.filter(e => \n                \n                    e.item.path === path\n                )\n             })\n        );\n    _handleClearClipboard = () => \n        this.setState({\n            clipboard: []\n         });\n    _toggleOpenFilesPane = () => \n        this.setState((state) => \n        \n            ({\n                openFilesPane: !state.openFilesPane\n             })\n        );\n    _toggleProjectPane = () => \n        this.setState((state) => \n        \n            ({\n                projectPane: !state.projectPane\n             })\n        );\n    _handleCreateFile = (path?: string | undefined) => {\n        let entries = createNewEntry(this.state.entries, 'file', path);\n        const newEntry = entries.find(e => \n        \n            !this.state.entries.find(e2 => \n                \n                    e2.item.path === e.item.path\n                )\n        );\n        entries = newEntry ? openEntry(entries, newEntry.item.path, true) : entries;\n        this.updateEntries(entries);\n    };\n    _handleCreateFolder = (path?: string | undefined) => \n        this.updateEntries(createNewEntry(this.state.entries, 'folder', path));\n    render() {\n        return  (\n            <ImportFilesManager \n                className={css(styles.container)}\n                entries={this.state.entries}\n                onImportFile={this._handleEntryImport}\n                uploadFileAsync={this.props.uploadFileAsync}\n                render={({\n                        onImportStart: any\n                     }) => \n                    \n                        this.props.visible ?  (\n                            <ResizablePane\n                             direction=\"horizontal\" className={css(styles.pane)}>\n                                <SidebarShell\n                                >\n                                    <FileListPane \n                                        className={css(this.state.projectPane ? styles.openFilesSmall : styles.openFilesLarge)}\n                                        title=\"Open files\"\n                                        expanded={this.state.openFilesPane}\n                                        onClick={this._toggleOpenFilesPane}\n                                    >\n                                        <ul\n                                         className={css(styles.tabs)} data-test-id=\"file-list-open-files-content\">\n                                            {\n                                            this.state.entries.filter(e => \n                                            \n                                                e.item.type === 'file' && e.state.isOpen\n                                            ).map((e: any) => \n                                            \n                                                 (\n                                                <FileListOpenEntry \n                                                    key={e.item.path}\n                                                    entry={e}\n                                                    onOpen={() => \n                                                        \n                                                            this._handleEntryOpen(e.item.path)\n                                                    }\n                                                    onClose={() => \n                                                        \n                                                            this._handleEntryClose(e.item.path)\n                                                    }\n                                                    onCloseOthers={() => \n                                                        \n                                                            this._handleEntryCloseOthers(e.item.path)\n                                                    }\n                                                    onCloseAll={this._handleEntryCloseAll}\n                                                 />\n                                                )\n                                            \n                                            )\n                                            }</ul>\n                                    </FileListPane>\n                                    <FileListPane \n                                        className={css(styles.project)}\n                                        title=\"Project\"\n                                        expanded={this.state.projectPane}\n                                        onClick={this._toggleProjectPane}\n                                        buttons={[\n                                                 (\n                                                <FileListPaneButton\n                                                 key=\"create-file\" onClick={() => \n                                                    \n                                                        this._handleCreateFile()\n                                                }>\n                                                    <path\n                                                     fillOpacity=\"0.7\" d=\"M3,2 L13,2 L13,14 L3,14 L3,2 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                                                    <AddIcon\n                                                     />\n                                                </FileListPaneButton>\n                                                )\n                                                , \n                                                 (\n                                                <FileListPaneButton\n                                                 key=\"create-folder\" onClick={() => \n                                                    \n                                                        this._handleCreateFolder()\n                                                }>\n                                                    <path\n                                                     fillOpacity=\"0.7\" d=\"M7.25,4 L7.5,4 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L7.25,4 Z M6.75,4 L5,4 L7,2 L7,3.5 L6.5,4 L6.75,4 Z M1,4 L15,4 L15,14 L1,14 L1,4 Z M7.5,3 L7.5,4 L14,4 L14,3 L7.5,3 Z\" />\n                                                    <AddIcon\n                                                     />\n                                                </FileListPaneButton>\n                                                )\n                                                \n                                            ]}\n                                    >\n                                        <FileListEntryDropTarget\n                                         className={css(styles.files)} rest={this.state.entries} onRename={this._handleEntryRename}>\n                                            <div\n                                             className={css(styles.children)} data-test-id=\"file-list-project-content\">\n                                                <FileListChildren \n                                                    parent=\"\"\n                                                    entries={this.state.entries}\n                                                    clipboard={this.state.clipboard}\n                                                    onCreateFile={this._handleCreateFile}\n                                                    onCreateFolder={this._handleCreateFolder}\n                                                    onOpen={this._handleEntryOpen}\n                                                    onSelect={this._handleEntrySelect}\n                                                    onFocus={this._handleEntryFocus}\n                                                    onPaste={this._handleEntryPaste}\n                                                    onRename={this._handleEntryRename}\n                                                    onExpand={this._handleEntryExpand}\n                                                    onDelete={this._handleEntryDelete}\n                                                    onCopy={this._handleCopy}\n                                                    onClearClipboard={this._handleClearClipboard}\n                                                    theme={this.props.theme}\n                                                    className={css(styles.list)}\n                                                 />\n                                            </div>\n                                        </FileListEntryDropTarget>\n                                    </FileListPane>\n                                    {\n                                    this.state.deleted.map((group) => \n                                    \n                                         (\n                                        <Toast \n                                            key={group.id}\n                                            label={`Deleted ${group.path.split('/').pop()}`}\n                                            actions={[\n                                                    {\n                                                        label: 'Undo', \n                                                        action: () => {\n                                                        \n                                                            this._restoreEntries(group.entries);\n                                                            this._handleDismissDelete(group.id);\n                                                        }\n                                                        \n                                                     }, \n                                                    {\n                                                        label: 'Dismiss'\n                                                     }\n                                                ]}\n                                            onDismiss={() => \n                                                \n                                                    this._handleDismissDelete(group.id)\n                                            }\n                                         />\n                                        )\n                                    \n                                    ).reverse()\n                                    }</SidebarShell>\n                            </ResizablePane>\n                            )\n                         : null\n                }\n             />\n            )\n        ;\n    }\n}\n\nexport const FileList = withThemeName(FileListComp);\n\nexport default withThemeName(FileListComp);\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flexDirection: 'column'\n     }, \n    list: {\n        padding: '0 12px', \n        height: '100%'\n     }, \n    pane: {\n        flex: 1, \n        display: 'flex', \n        flexDirection: 'column', \n        width: 240, \n        minWidth: 240, \n        height: '100%', \n        zIndex: 10\n     }, \n    project: {\n        flex: 1\n     }, \n    openFilesSmall: {\n        maxHeight: '50%'\n     }, \n    openFilesLarge: {\n        maxHeight: 'calc(100% - 30px)'\n     }, \n    files: {\n        flex: '1 0 0', \n        overflow: 'auto', \n        paddingBottom: 16\n     }, \n    children: {\n        position: 'relative'\n     }, \n    tabs: {\n        margin: 0, \n        listStyle: 'none', \n        padding: '2px 0', \n        overflow: 'auto', \n        ':empty': {\n            display: 'none'\n         }\n     }, \n    toolbar: {\n        padding: 8\n     }, \n    toasts: {\n        position: 'fixed', \n        bottom: '3em', \n        left: '1em', \n        zIndex: 10\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListChildren.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport escapeRegexp from 'escape-string-regexp';\nimport * as React from 'react';\nimport {FileSystemEntry, isInsideFolder} from '../../features/file';\nimport {ThemeName} from '../../features/preferences';\nimport FileListEntry from './FileListEntry';\ntype Props = { \n    parent: string;\n    entries: FileSystemEntry[];\n    clipboard: FileSystemEntry[];\n    onOpen: (path: string) => void;\n    onFocus: (path: string) => void;\n    onSelect: (path: string) => void;\n    onCopy: (path: string) => void;\n    onDelete: (path: string) => void;\n    onExpand: (path: string, expand?: boolean) => void;\n    onCreateFile: (path: string | undefined) => void;\n    onCreateFolder: (path: string | undefined) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    onPaste: (path: string | undefined, entry: FileSystemEntry) => void;\n    onClearClipboard: () => void;\n    theme: ThemeName;\n    className?: string;\n};\nexport default class FileListChildren extends React.PureComponent<Props> {\n        _getImmediateChildren = () => \n            this.props.entries.filter(e => \n            \n                !e.item.path.replace(new RegExp(`^${escapeRegexp(this.props.parent)}/`), '').includes('/')\n                    // Filter-out non-immediate children\n            \n            );\n        render() {\n            const {\n                entries, \n                clipboard, \n                onCreateFile, \n                onCreateFolder, \n                onFocus, \n                onOpen, \n                onSelect, \n                onPaste, \n                onRename, \n                onExpand, \n                onDelete, \n                onCopy, \n                onClearClipboard, \n                className, \n                theme\n             } = this.props;\n            return  (\n                <div\n                 className={`${css(styles.container)} ${className ?? ''}`}>\n                    {\n                        this._getImmediateChildren().sort((a, b) => {\n                        \n                            if (a.item.type === b.item.type) {\n                                if (a.item.path.startsWith('.') && !b.item.path.startsWith('.')) {\n                                    return 1;\n                                }\n                                if (b.item.path.startsWith('.') && !a.item.path.startsWith('.')) {\n                                    return -1;\n                                }\n                                return a.item.path.localeCompare(b.item.path);\n                            }\n                            else {\n                                if (a.item.type === 'folder') {\n                                    return -1;\n                                }\n                                else {\n                                    return 1;\n                                }\n                            }\n                        }\n                        ).map((e) => \n                        \n                             (\n                            <FileListEntry \n                                key={e.item.path}\n                                entry={e}\n                                rest={entries.filter(en => \n                                    \n                                        isInsideFolder(en.item.path, e.item.path)\n                                    )}\n                                clipboard={clipboard}\n                                onCreateFile={onCreateFile}\n                                onCreateFolder={onCreateFolder}\n                                onOpen={onOpen}\n                                onSelect={onSelect}\n                                onFocus={onFocus}\n                                onCopy={onCopy}\n                                onPaste={onPaste}\n                                onDelete={onDelete}\n                                onRename={onRename}\n                                onExpand={onExpand}\n                                onClearClipboard={onClearClipboard}\n                                getAdjacentEntries={this._getImmediateChildren}\n                                theme={theme}\n                             />\n                            )\n                        \n                        )\n                        \n                    }\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        display: 'inline-block', \n        width: '100%'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {FileSystemEntry, isEntryPoint, getParentPath, isTest} from '../../features/file';\nimport {ThemeName} from '../../features/preferences';\nimport {c} from '../ThemeProvider';\nimport {Action} from '../widgets/ContextMenu';\nimport {KeyMap} from '../widgets/KeybindingsManager';\nimport FileListChildren from './FileListChildren';\nimport FileListEntryBase from './FileListEntryBase';\nimport FileListEntryIcon from './FileListEntryIcon';\nexport type FileListEntryProps = { \n    entry: FileSystemEntry;\n    rest: FileSystemEntry[];\n    clipboard: FileSystemEntry[];\n    onOpen: (path: string) => void;\n    onFocus: (path: string) => void;\n    onSelect: (path: string) => void;\n    onDelete: (path: string) => void;\n    onCopy: (path: string) => void;\n    onExpand: (path: string, expand?: boolean) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    onCreateFile: (path: string | undefined) => void;\n    onCreateFolder: (path: string | undefined) => void;\n    onPaste: (path: string | undefined, entry: FileSystemEntry) => void;\n    onClearClipboard: () => void;\n    getAdjacentEntries: () => FileSystemEntry[];\n    theme: ThemeName;\n};\ntype State = { \n    name: string;\n    error: Error | null;\n    isRenaming: boolean;\n};\nconst toggleTSExt = (name: string) => \n\n    name.replace(/(\\.[^.]+$)/, (_, $1) => \n    \n        ($1 === '.js' ? '.tsx' : '.js')\n    )\n;\nexport class FileListEntry extends React.Component<FileListEntryProps, State> {\n    constructor(props: FileListEntryProps) {\n        super(props);\n        const {\n            entry\n         } = props;\n        this.state = {\n            name: entry.state.isCreating ? entry.item.path.split('/').pop() ?? '' : '', \n            error: null, \n            isRenaming: !entry.item.asset && !!entry.state.isCreating\n         };\n    }\n    state: State;\n    componentDidMount() {\n        if (this.props.entry.state.isCreating) {\n            this.props.onOpen(this.props.entry.item.path);\n        }\n    }\n    _handleToggleExpand = () => \n        this.props.onExpand(this.props.entry.item.path, !this.props.entry.state.isExpanded);\n    _handleToggleRename = () => {\n        if (this.state.isRenaming && !this.state.error) {\n            this._handleNameChange(this.state.name);\n        }\n        this.setState((state, props) => \n        \n            state.isRenaming ? {\n                    isRenaming: false, \n                    name: '', \n                    error: null\n                 } : {\n                    isRenaming: true, \n                    name: props.entry.item.path.split('/').pop() ?? '', \n                    error: null\n                 }\n        )\n    };\n    _handleDelete = () => \n        this.props.onDelete(this.props.entry.item.path);\n    _handleNameChange = (name: string) => {\n        const {\n            entry\n         } = this.props;\n        if (name && (name !== entry.item.path.split('/').pop() || entry.state.isCreating)) {\n            const newPath = entry.item.path.replace(/[^/]+$/, name);\n            this.props.onRename(entry.item.path, newPath);\n        }\n    };\n    _handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.value;\n        this.setState({\n            name, \n            error: this._validateName(name)\n         })\n    };\n    _validateName = (name: string) => {\n        if (name === this.props.entry.item.path.split('/').pop()) {\n            return null;\n        }\n        const invalidCharacters = [\n            '\\0', \n            '\\\\', \n            ':', \n            '*', \n            '?', \n            '\"', \n            '<', \n            '>', \n            '|'\n        ];\n        const usedCharacters = invalidCharacters.filter(c => \n        \n            name.includes(c)\n        );\n        if (usedCharacters.length) {\n            return new Error(`${\n                usedCharacters.length === 1\n                 ? `${usedCharacters[0]} is`\n                 : `${usedCharacters.join(', ')} are`}\n                 not allowed`);\n        }\n        const adjacentEntries = this.props.getAdjacentEntries();\n        if (adjacentEntries.some(e => \n        \n            (e.item.path.split('/').pop() ?? '').toLowerCase() === name.toLowerCase()\n        )) {\n            return new Error(`Another entry already exists with same name`);\n        }\n        if (isEntryPoint(name)) {\n            return new Error(`Cannot name a new file as ${name}`);\n        }\n        return null;\n    };\n    _handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        const input = e.target;\n        if (input instanceof HTMLInputElement) {\n            input.select();\n        }\n    };\n    _handleInputBlur = () => {\n        if (!this.state.error) {\n            this._handleNameChange(this.state.name);\n        }\n        this.setState({\n            isRenaming: false, \n            name: '', \n            error: null\n         })\n    };\n    _handleInputKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        switch (e.keyCode) {\n            case KeyMap.Enter: {\n                this._handleToggleRename();\n                break;\n            }\n            case KeyMap.Escape: {\n                this._handleInputBlur();\n                break;\n            }\n        }\n    };\n    _handleCreateFile = () => \n        this.props.onCreateFile(this.props.entry.item.path);\n    _handleCreateFolder = () => \n        this.props.onCreateFolder(this.props.entry.item.path);\n    _handleCopy = () => \n        this.props.onCopy(this.props.entry.item.path);\n    _handlePaste = () => {\n        const {\n            entry, \n            clipboard, \n            onPaste, \n            onClearClipboard\n         } = this.props;\n        clipboard.forEach(e => \n        \n            onPaste(entry.item.path, e)\n        )\n        onClearClipboard();\n    };\n    _handleDuplicate = () => {\n        const {\n            entry, \n            onPaste\n         } = this.props;\n        const path = entry.item.path.includes('/') ? entry.item.type === 'folder' ? getParentPath(entry.item.path) : entry.item.path : undefined;\n        onPaste(path, entry);\n    };\n    _handleToggleTSExt = () => {\n        const filepath = this.props.entry.item.path;\n        this.props.onRename(filepath, toggleTSExt(filepath));\n    };\n    _getActions = ():  (Action | undefined)[] => \n        [\n            {\n                label: 'New file', \n                handler: this._handleCreateFile\n             }, \n            {\n                label: 'New folder', \n                handler: this._handleCreateFolder\n             }, \n            this.props.entry.item.type === 'folder' ? {\n                    label: this.props.entry.item.type === 'folder' && this.props.entry.state.isExpanded ? 'Collapse' : 'Expand', \n                    handler: this._handleToggleExpand, \n                    combo: [\n                        KeyMap.Enter\n                    ]\n                 } : undefined, \n            this.props.clipboard.length ? {\n                    label: 'Paste', \n                    handler: this._handlePaste, \n                    combo: [\n                        KeyMap.Meta, \n                        KeyMap.V\n                    ]\n                 } : !this.props.entry.item.virtual ? {\n                        label: 'Copy', \n                        handler: this._handleCopy, \n                        combo: [\n                            KeyMap.Meta, \n                            KeyMap.C\n                        ]\n                     } : undefined, \n            !this.props.entry.item.virtual ? {\n                    label: 'Duplicate', \n                    handler: this._handleDuplicate, \n                    combo: [\n                        KeyMap.Meta, \n                        KeyMap.D\n                    ]\n                 } : undefined, \n            isEntryPoint(this.props.entry.item.path) ? {\n                    label: `Rename to ${toggleTSExt(this.props.entry.item.path)}`, \n                    handler: this._handleToggleTSExt\n                 } : undefined, \n            ...((!isEntryPoint(this.props.entry.item.path) && !this.props.entry.item.virtual ? [\n                        {\n                            label: 'Rename', \n                            handler: this._handleToggleRename, \n                            combo: [\n                                KeyMap.F2\n                            ]\n                         }, \n                        {\n                            label: 'Delete', \n                            handler: this._handleDelete, \n                            combo: [\n                                KeyMap.Delete\n                            ]\n                         }\n                    ] : []))\n            \n        ];\n    _renderItem = () => {\n        const {\n            entry\n         } = this.props;\n        const {\n            isRenaming, \n            name\n         } = this.state;\n        const displayName = isRenaming ? '\\u00A0' : entry.item.path.split('/').pop();\n        return  (\n            <div\n            >\n                {\n                    this.state.error ?  (\n                        <div\n                         className={css(styles.error)}>\n                            {this.state.error.message}\n                        </div>\n                        )\n                     : null\n                }\n                <FileListEntryIcon\n                 entry={entry} />\n                <span\n                 className={css(styles.label, isTest(entry.item.path) ? styles.labelTest : undefined, entry.state.isError ? styles.labelError : undefined)}>\n                    {displayName}\n                </span>\n                {\n                    isRenaming ?  (\n                        <input \n                            autoFocus\n                            type=\"text\"\n                            value={name}\n                            onChange={this._handleInputChange}\n                            onFocus={this._handleInputFocus}\n                            onBlur={this._handleInputBlur}\n                            onKeyUp={this._handleInputKeyUp}\n                            className={css(styles.input)}\n                         />\n                        )\n                     : null\n                }\n            </div>\n            )\n        ;\n    };\n    _renderTree = () => {\n        const {\n            entry, \n            rest, \n            clipboard, \n            onCreateFile, \n            onCreateFolder, \n            onOpen, \n            onSelect, \n            onFocus, \n            onPaste, \n            onRename, \n            onExpand, \n            onDelete, \n            onCopy, \n            onClearClipboard, \n            theme\n         } = this.props;\n        return entry.item.type === 'folder' && rest.length && entry.state.isExpanded ?  (\n                <div\n                 className={css(styles.child)}>\n                    <FileListChildren \n                        parent={entry.item.path}\n                        entries={rest}\n                        clipboard={clipboard}\n                        onCreateFile={onCreateFile}\n                        onCreateFolder={onCreateFolder}\n                        onOpen={onOpen}\n                        onSelect={onSelect}\n                        onFocus={onFocus}\n                        onCopy={onCopy}\n                        onPaste={onPaste}\n                        onRename={onRename}\n                        onExpand={onExpand}\n                        onDelete={onDelete}\n                        onClearClipboard={onClearClipboard}\n                        theme={theme}\n                     />\n                </div>\n                )\n             : null;\n    };\n    _renderMenuIcon = () => \n         (\n        <svg\n         className={css(styles.icon)} viewBox=\"0 0 16 16\">\n            <circle\n             cy=\"3\" cx=\"8\" r=\"1.5\" />\n            <circle\n             cy=\"8\" cx=\"8\" r=\"1.5\" />\n            <circle\n             cy=\"13\" cx=\"8\" r=\"1.5\" />\n        </svg>\n        )\n    ;\n    render() {\n        \n        // Disable drag n drop for the entry file and virtual files\n        \n        // Also disable for files being created because they will have a nested input\n        \n        // Otherwise it'll be impossible to move the cursor in the input by dragging\n        const {\n            entry, \n            rest, \n            onOpen, \n            onFocus, \n            onRename, \n            onExpand, \n            theme\n         } = this.props;\n        \n        // Disable drag n drop for the entry file and virtual files\n        \n        // Also disable for files being created because they will have a nested input\n        \n        // Otherwise it'll be impossible to move the cursor in the input by dragging\n        const draggable = !((isEntryPoint(this.props.entry.item.path) || this.props.entry.item.virtual) ?? this.props.entry.state.isCreating);\n        return  (\n            <FileListEntryBase \n                entry={entry}\n                rest={rest}\n                onOpen={onOpen}\n                onFocus={onFocus}\n                onRename={onRename}\n                onExpand={onExpand}\n                renderItem={this._renderItem}\n                renderTree={this._renderTree}\n                renderMenuIcon={this._renderMenuIcon}\n                actions={this._getActions()}\n                draggable={draggable}\n                theme={theme}\n             />\n            )\n        ;\n    }\n}\n\nexport default FileListEntry;\n\nconst styles = StyleSheet.create({\n    child: {\n        marginLeft: 16\n     }, \n    label: {\n        verticalAlign: -1, \n        margin: '0 6px', \n        userSelect: 'none'\n     }, \n    labelError: {\n        color: c('error')\n     }, \n    labelTest: {\n        color: c('soft')\n     }, \n    input: {\n        position: 'absolute', \n        top: 0, \n        left: 35, \n        height: 28, \n        margin: 1, \n        border: `1px solid ${c('selected')}`, \n        borderRadius: 3, \n        backgroundColor: c('content'), \n        outline: 0, \n        paddingLeft: 2\n     }, \n    error: {\n        backgroundColor: c('error'), \n        color: c('error-text'), \n        padding: '4px 8px', \n        position: 'fixed', \n        marginTop: -32, \n        marginLeft: 20, \n        borderRadius: 3\n     }, \n    icon: {\n        height: 16, \n        width: 16, \n        opacity: 0.7, \n        fill: 'currentColor'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntryBase.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport ContextMenu, {Action} from '../widgets/ContextMenu';\nimport {isKeyCombo} from '../widgets/KeybindingsManager';\nimport FileListEntryDropTarget from './FileListEntryDropTarget';\nimport {FileSystemEntry} from '../../features/file';\ntype Props = { \n    entry: FileSystemEntry;\n    rest: FileSystemEntry[];\n    onOpen: (path: string) => void;\n    onFocus: (path: string) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    onExpand?: (path: string, expand?: boolean) => void;\n    renderMenuIcon: () => React.ReactNode;\n    renderItem: () => React.ReactNode;\n    renderTree?: () => React.ReactNode;\n    actions: (Action | undefined)[];\n    draggable?: boolean;\n    theme: string | undefined;\n};\ntype State = { \n    menu: { \n        pageX: number;\n        pageY: number;\n    } | null;\n    isHovered: boolean;\n};\nexport let lastDraggedEntry: FileSystemEntry | null;\nexport default class FileListEntry extends React.Component<Props, State> {\n        static defaultProps = {\n            draggable: true\n        }\n        ;\n        state = {\n            menu: null, \n            isHovered: false\n        }\n        ;\n        componentDidMount() {\n            document.addEventListener('click', this._handleDocumentClick);\n            document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n        }\n        componentWillUnmount() {\n            document.removeEventListener('click', this._handleDocumentClick);\n            document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n        }\n        _handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n            if (((event.target as HTMLDivElement).tagName) === 'INPUT') {\n                return ;\n            }\n            this.props.onOpen(this.props.entry.item.path);\n        };\n        _handleMouseEnter = () => \n            this.setState({\n                isHovered: true\n             });\n        _handleMouseLeave = () => \n            this.setState({\n                isHovered: false\n             });\n        _handleMouseDown = () => \n            this._click = true;\n        _handleFocus = () => {\n            if (this._click) {\n                \n                // The focus was triggered by a click event\n                \n                // Ignore it to avoid double handling\n                this._click = false;\n                return ;\n            }\n            this.props.onFocus(this.props.entry.item.path);\n        };\n        _handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (((event.target as HTMLDivElement).tagName) === 'INPUT') {\n                return ;\n            }\n            const bindings = this.props.actions.filter(action => \n            \n                action?.combo ? isKeyCombo(event as any, action.combo) : false\n            );\n            if (bindings.length) {\n                event.preventDefault();\n                bindings.forEach(binding => \n                \n                    binding?.handler?.()\n                )\n            }\n        };\n        _hideContextMenu = () => \n            this.setState({\n                menu: null\n             });\n        _showContextMenu = (e: MouseEvent) => \n            this.setState({\n                menu: {\n                    pageX: e.pageX, \n                    pageY: e.pageY\n                 }\n             });\n        _handleDocumentClick = (e: MouseEvent) => {\n            if (this.state.menu) {\n                if (this._menu.current && e.target !== this._menu.current && !this._menu.current.contains(e.target as HTMLElement)) {\n                    this._hideContextMenu();\n                }\n            }\n            else {\n                if (this._more.current && (e.target === this._more.current || this._more.current.contains(e.target as Node))) {\n                    if (this.state.menu) {\n                        this._hideContextMenu();\n                    }\n                    else {\n                        this._showContextMenu(e);\n                    }\n                }\n            }\n        };\n        _handleDocumentContextMenu = (e: MouseEvent) => {\n            if (e.target === this._item.current || this._item.current?.contains?.(e.target as Node)) {\n                e.preventDefault();\n                this._showContextMenu(e);\n            }\n            else {\n                if (this.state.menu) {\n                    this._hideContextMenu();\n                }\n            }\n        };\n        _handleDragStart = (e: React.DragEvent<HTMLDivElement>) => {\n            e.dataTransfer.effectAllowed = 'move';\n            e.dataTransfer.setData('application/json', JSON.stringify(this.props.entry));\n            lastDraggedEntry = this.props.entry;\n        };\n        _handleDragEnd = () => \n            lastDraggedEntry = null;\n        _click: boolean = false;\n        _item = React.createRef<HTMLDivElement>();\n        _more = React.createRef<HTMLButtonElement>();\n        _menu = React.createRef<HTMLUListElement>();\n        render() {\n            const {\n                entry, \n                rest, \n                draggable, \n                onRename, \n                onExpand, \n                theme, \n                actions\n             } = this.props;\n            const {\n                menu, \n                isHovered\n             } = this.state;\n            return  (\n                <FileListEntryDropTarget \n                    entry={entry}\n                    rest={rest}\n                    onRename={onRename}\n                    onExpand={onExpand}\n                >\n                    <div \n                        ref={this._item}\n                        draggable={draggable}\n                        onDragStart={this._handleDragStart}\n                        onDragEnd={this._handleDragEnd}\n                        tabIndex={0}\n                        className={css(styles.entry)}\n                        onClick={this._handleClick}\n                        onMouseEnter={this._handleMouseEnter}\n                        onMouseLeave={this._handleMouseLeave}\n                        onMouseDown={this._handleMouseDown}\n                        onFocus={this._handleFocus}\n                        onKeyDown={this._handleKeyDown}\n                    >\n                        {this.props.renderItem()}\n                    </div>\n                    <div\n                     className={css(styles.highlight, theme === 'dark' ? styles.highlightDark : styles.highlightLight, entry.state.isSelected ? styles.highlightActive : null)} />\n                    <ContextMenu \n                        ref={this._menu}\n                        visible={Boolean(menu)}\n                        position={menu}\n                        actions={actions}\n                        onHide={this._hideContextMenu}\n                     />\n                    <button\n                     ref={this._more} tabIndex={-1} className={css(styles.more, isHovered || menu ? styles.moreVisible : styles.moreInvisible)}>\n                        {this.props.renderMenuIcon()}\n                    </button>\n                    {this.props.renderTree?.()}\n                </FileListEntryDropTarget>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    entry: {\n        position: 'relative', \n        display: 'inline-block', \n        outline: 0, \n        padding: '1px 16px', \n        width: '100%', \n        cursor: 'pointer', \n        zIndex: 1, \n        whiteSpace: 'nowrap'\n     }, \n    highlight: {\n        content: '\"\"', \n        display: 'inline-block', \n        height: 30, \n        position: 'absolute', \n        left: 0, \n        right: 0, \n        opacity: 0, \n        zIndex: 1, \n        pointerEvents: 'none'\n     }, \n    highlightLight: {\n        backgroundColor: 'rgba(0, 0, 0, .04)'\n     }, \n    highlightDark: {\n        backgroundColor: 'rgba(255, 255, 255, .04)'\n     }, \n    highlightActive: {\n        opacity: 1\n     }, \n    more: {\n        position: 'absolute', \n        left: -8, \n        border: 0, \n        outline: 0, \n        background: 'none', \n        height: 30, \n        zIndex: 2, \n        padding: '7px 12px', \n        textAlign: 'right', \n        ':hover': {\n            opacity: 1\n         }\n     }, \n    moreInvisible: {\n        opacity: 0\n     }, \n    moreVisible: {\n        opacity: 1\n     }, \n    icon: {\n        fill: 'currentColor', \n        height: 16, \n        width: 16\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntryDropTarget.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {FileSystemEntry, getUniquePath, dragEventIncludes} from '../../features/file';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {lastDraggedEntry} from './FileListEntryBase';\ntype Props = { \n    entry?: FileSystemEntry;\n    rest: FileSystemEntry[];\n    onExpand?: (path: string, expand?: boolean) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    className?: string;\n    theme: ThemeName;\n    children?: any;\n};\n\nclass FileListEntryDropTarget extends React.PureComponent<Props> {\n    componentDidMount() {\n        const container = this._container.current;\n        if (container) {\n            // We don't use react's event system since we need to stop the events from bubbling up\n            container.addEventListener('dragover', this._handleDragOver);\n            container.addEventListener('dragleave', this._handleDragLeave);\n            container.addEventListener('dragend', this._handleDragLeave);\n            container.addEventListener('drop', this._handleDrop);\n        }\n    }\n    componentWillUnmount() {\n        const container = this._container.current;\n        if (container) {\n            container.removeEventListener('dragover', this._handleDragOver);\n            container.removeEventListener('dragleave', this._handleDragLeave);\n            container.removeEventListener('dragend', this._handleDragLeave);\n            container.removeEventListener('drop', this._handleDrop);\n        }\n    }\n    _getParentPath = (path: string) => \n        (path.includes('/') ? path.replace(/\\/[^/]+$/, '') : null);\n    _isDirectChild = (path: string) => {\n        if (this.props.entry && this.props.entry.item.path === path) {\n            return true;\n        }\n        const parent = this._getParentPath(path);\n        if (this.props.entry && parent) {\n            return this.props.entry.item.path === parent;\n        }\n        return this.props.entry == null && parent == null;\n    };\n    _handleDragLeave = (e: any) => {\n        e.currentTarget.style.backgroundColor = null;\n        clearTimeout(this._dragTimer);\n        this._dragTimer = null;\n    };\n    _handleDragOver = (e: any) => {\n        const entry = lastDraggedEntry;\n        if (!dragEventIncludes(e, 'application/json') || (this.props.entry && this.props.entry.item.type !== 'folder') || !entry) {\n            return ;\n        }\n        if (entry.item.type !== 'file' && entry.item.type !== 'folder') {\n            return ;\n        }\n        e.stopPropagation();\n        if (this._isDirectChild(entry.item.path)) {\n            return ;\n        }\n        e.preventDefault();\n        e.currentTarget.style.backgroundColor = this.props.theme === 'dark' ? 'rgba(255, 255, 255, .1)' : 'rgba(0, 0, 0, .1)';\n        if (this._dragTimer) {\n            return ;\n        }\n        this._dragTimer = setTimeout(() => {\n        \n            if (this.props.entry && !this.props.entry.state.isExpanded && this.props.onExpand) {\n                this.props.onExpand(this.props.entry.item.path);\n            }\n        }\n        , 500)\n        ;\n    };\n    _dragTimer: any;\n    _handleDrop = (e: any) => {\n        e.currentTarget.style.backgroundColor = null;\n        if (!dragEventIncludes(e, 'application/json') || (this.props.entry && this.props.entry.item.type !== 'folder')) {\n            return ;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        try {\n            const data = e.dataTransfer.getData('application/json');\n            const entry = JSON.parse(data);\n            if ((entry.item.type !== 'file' && entry.item.type !== 'folder') || this._isDirectChild(entry.item.path)) {\n                return ;\n            }\n            const name = entry.item.path.split('/').pop();\n            this.props.onRename(entry.item.path, getUniquePath(this.props.rest.map(e => \n            \n                e.item.path\n            ), this.props.entry ? this.props.entry.item.path + '/' + name : name))\n        } \n        catch (e) {\n        } \n    };\n    _container = React.createRef<HTMLDivElement>();\n    render() {\n        \n        // eslint-disable-next-line no-unused-vars\n        const {\n            entry, \n            rest, \n            onExpand, \n            onRename, \n            theme, \n            ...restProps\n         } = this.props;\n        return  (\n            <div\n             {...restProps} ref={this._container} />\n            )\n        ;\n    }\n}\nexport default withThemeName(FileListEntryDropTarget);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntryIcon.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {FileSystemEntry, isEntryPoint, isPackageJson, isImage, isTest} from '../../features/file';\nimport {c} from '../ThemeProvider';\ntype Props = { \n    entry: FileSystemEntry;\n};\nexport default function FileListEntryIcon({\n        entry\n     }: Props) {\n    \n        let icon;\n        if (entry.state.isLoading) {\n            return  (\n                <div\n                 className={css(styles.spinner)} />\n                )\n            ;\n        }\n        else {\n            if (isEntryPoint(entry.item.path)) {\n                icon =  (\n                <g\n                >\n                    <path\n                     d=\"M7.46487122,14 C7.80521143,13.4116533 8,12.7285743 8,12 C8,9.790861 6.209139,8 4,8 C3.65470043,8 3.31961992,8.043753 3,8.12601749 L3,2 L13,2 L13,14 L7.46487122,14 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                    <circle\n                     cx=\"4\" cy=\"12\" r=\"3\" />\n                </g>\n                )\n                ;\n            }\n            else {\n                if (isPackageJson(entry.item.path)) {\n                    icon =  (\n                    <path\n                     d=\"M2,5.09257608 L7.47329684,8.31213064 L7.47329684,14.7092088 L2,11.5325867 L2,5.09257608 Z M2.49245524,4.22207437 L7.97432798,1 L13.506361,4.2238509 L7.92838937,7.41965108 L2.49245524,4.22207437 Z M14,5.09352708 L14,11.5325867 L8.47329684,14.7128733 L8.47329684,8.25995389 L14,5.09352708 Z\" />\n                    )\n                    ;\n                }\n                else {\n                    if (entry.item.type === 'folder') {\n                        if (entry.state.isExpanded) {\n                            icon =  (\n                            <g\n                            >\n                                <path\n                                 d=\"M7.5,5 L2,5 L2,13 L7.75,13 L14,13 L14,4 L15,4 L15,14 L1,14 L1,4 L6.5,4 L5.5,5 L7.5,5 L7.5,4.5 L7.5,5 Z M14,4 L14,3 L7.5,3 L7.5,3.5 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L14,4 Z M6.5,4 L5,4 L7,2 L7,3.5 L6.5,4 Z\" />\n                                <polygon\n                                 points=\"0 7 13 7 14 14 1 14\" />\n                            </g>\n                            )\n                            ;\n                        }\n                        else {\n                            icon =  (\n                            <path\n                             d=\"M7.25,4 L7.5,4 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L7.25,4 Z M6.75,4 L5,4 L7,2 L7,3.5 L6.5,4 L6.75,4 Z M1,4 L15,4 L15,14 L1,14 L1,4 Z M7.5,3 L7.5,4 L14,4 L14,3 L7.5,3 Z\" />\n                            )\n                            ;\n                        }\n                    }\n                    else {\n                        if (isImage(entry.item.path)) {\n                            icon =  (\n                            <g\n                            >\n                                <circle\n                                 cx=\"5\" cy=\"5\" r=\"1\" />\n                                <polygon\n                                 points=\"5.71428571 8.41176471 8 11.2352941 10.8571429 7 14 13 2 13\" />\n                                <path\n                                 d=\"M3,3 L3,13 L13,13 L13,3 L3,3 Z M3,2 L13,2 C13.5522847,2 14,2.44771525 14,3 L14,13 C14,13.5522847 13.5522847,14 13,14 L3,14 C2.44771525,14 2,13.5522847 2,13 L2,3 C2,2.44771525 2.44771525,2 3,2 Z\" />\n                            </g>\n                            )\n                            ;\n                        }\n                        else {\n                            icon =  (\n                            <path\n                             d=\"M3,2 L13,2 L13,14 L3,14 L3,2 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                            )\n                            ;\n                        }\n                    }\n                }\n            }\n        }\n        return  (\n            <svg\n             className={css(styles.icon, isTest(entry.item.path) ? styles.test : undefined, entry.state.isError ? styles.error : undefined)} viewBox=\"0 0 16 16\">\n                {icon}\n            </svg>\n            )\n        ;\n    }\nconst spin = {\n    from: {\n        transform: 'rotate(0deg)'\n     }, \n    to: {\n        transform: 'rotate(360deg)'\n     }\n };\nconst styles = StyleSheet.create({\n    icon: {\n        height: 16, \n        width: 16, \n        fill: 'currentColor', \n        verticalAlign: 'middle', \n        opacity: 0.7\n     }, \n    error: {\n        fill: c('error')\n     }, \n    test: {\n        color: c('soft')\n     }, \n    spinner: {\n        display: 'inline-block', \n        verticalAlign: 'middle', \n        borderStyle: 'solid', \n        borderTopColor: 'currentColor', \n        borderLeftColor: 'currentColor', \n        borderBottomColor: 'currentColor', \n        borderRightColor: 'rgba(0, 0, 0, .16)', \n        borderWidth: 1, \n        height: 12, \n        width: 12, \n        borderRadius: '50%', \n        margin: '2px 2px', \n        animationDuration: '1s', \n        animationName: [\n            spin\n        ], \n        animationIterationCount: 'infinite', \n        animationTimingFunction: 'linear'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListOpenEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {c} from '../ThemeProvider';\nimport ContextMenu from '../widgets/ContextMenu';\nimport FileListEntryIcon from './FileListEntryIcon';\nimport {TextFileEntry, AssetFileEntry} from '../../features/file';\ntype Props = { \n    entry: TextFileEntry | AssetFileEntry;\n    onOpen: () => void;\n    onClose: () => void;\n    onCloseOthers: () => void;\n    onCloseAll: () => void;\n    theme: ThemeName;\n};\ntype State = { \n    isHovered: boolean;\n    menu: { \n        pageX: number;\n        pageY: number;\n    } | undefined | null;\n};\nclass FileListOpenEntry extends React.PureComponent<Props, State> {\n    state: State = {\n        isHovered: false, \n        menu: null\n    }\n    ;\n    componentDidMount() {\n        document.addEventListener('click', this._handleDocumentClick);\n        document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click', this._handleDocumentClick);\n        document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    _hideContextMenu = () => \n        this.setState({\n            menu: null\n         });\n    _showContextMenu = (e: MouseEvent) => \n        this.setState({\n            menu: {\n                pageX: e.pageX, \n                pageY: e.pageY\n             }\n         });\n    _handleDocumentClick = (e: MouseEvent) => {\n        if (this.state.menu) {\n            if (this._menu.current && e.target !== this._menu.current && !this._menu.current.contains(e.target as Node)) {\n                this._hideContextMenu();\n            }\n        }\n    };\n    _handleDocumentContextMenu = (e: MouseEvent) => {\n        if (e.target === this._item.current || this._item.current?.contains?.(e.target as Node)) {\n            e.preventDefault();\n            this._showContextMenu(e);\n        }\n        else {\n            if (this.state.menu) {\n                this._hideContextMenu();\n            }\n        }\n    };\n    _handleMouseEnter = () => \n        this.setState({\n            isHovered: true\n         });\n    _handleMouseLeave = () => \n        this.setState({\n            isHovered: false\n         });\n    _menu = React.createRef<HTMLUListElement>();\n    _item = React.createRef<HTMLLIElement>();\n    render() {\n        const {\n            entry, \n            theme\n         } = this.props;\n        const displayName = entry.item.path.split('/').pop();\n        return  (\n            <li \n                ref={this._item}\n                tabIndex={-1}\n                className={css(styles.item, entry.state.isFocused\n                     && ((theme === 'dark' ? styles.focusedDark : styles.focusedLight)))}\n                onMouseEnter={this._handleMouseEnter}\n                onMouseLeave={this._handleMouseLeave}\n            >\n                <button\n                 onClick={this.props.onClose} className={css(styles.close, this.state.isHovered ? styles.closeFocused : styles.closeBlurred)}>\n                    ×\n                </button>\n                <div\n                 onClick={this.props.onOpen}>\n                    <FileListEntryIcon\n                     entry={entry} />\n                    <span\n                     className={css(styles.label, entry.state.isError ? styles.labelError : undefined)}>\n                        {displayName}\n                    </span>\n                </div>\n                <ContextMenu \n                    ref={this._menu}\n                    visible={Boolean(this.state.menu)}\n                    position={this.state.menu}\n                    actions={[\n                            {\n                                label: 'Close', \n                                handler: this.props.onClose\n                             }, \n                            {\n                                label: 'Close Others', \n                                handler: this.props.onCloseOthers\n                             }, \n                            {\n                                label: 'Close All', \n                                handler: this.props.onCloseAll\n                             }\n                        ]}\n                    onHide={this._hideContextMenu}\n                 />\n            </li>\n            )\n        ;\n    }\n}\nexport default withThemeName(FileListOpenEntry);\nconst styles = StyleSheet.create({\n    item: {\n        paddingLeft: 24, \n        cursor: 'pointer', \n        outline: 0, \n        whiteSpace: 'nowrap'\n     }, \n    label: {\n        display: 'inline-block', \n        verticalAlign: -1, \n        margin: 6, \n        userSelect: 'none', \n        whiteSpace: 'nowrap'\n     }, \n    labelError: {\n        color: c('error')\n     }, \n    focusedLight: {\n        backgroundColor: 'rgba(0, 0, 0, .04)'\n     }, \n    focusedDark: {\n        backgroundColor: 'rgba(255, 255, 255, .04)'\n     }, \n    close: {\n        padding: '7px 8px', \n        fontSize: '18px', \n        border: 'none', \n        appearance: 'none', \n        position: 'absolute', \n        left: 0, \n        margin: '-3px 0 0 0', \n        background: 'none', \n        outline: 0\n     }, \n    closeFocused: {\n        opacity: 1\n     }, \n    closeBlurred: {\n        opacity: 0\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListPane.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\ntype Props = { \n    title: string;\n    expanded: boolean;\n    onClick: (event: React.MouseEvent<HTMLDivElement>) => void;\n    buttons?: React.ReactNode[];\n    children?: React.ReactNode;\n    className?: string;\n};\nexport default function FileListPane({\n        title, \n        expanded, \n        buttons, \n        children, \n        onClick, \n        className\n     }: Props) {\n    \n        return  (\n            <div\n             className={`${className ?? ''} ${css(styles.container)}`}>\n                <div\n                 className={css(styles.header)}>\n                    <div\n                     className={css(styles.left)} onClick={onClick} data-test-id={`file-list-pane-${title.toLowerCase().replace(/[^a-z]/g, '-')}`}>\n                        <svg \n                            className={css(styles.collapse, expanded ? styles.collapseExpanded : styles.collapseCollapsed)}\n                            width=\"12px\"\n                            height=\"12px\"\n                            viewBox=\"0 0 12 12\"\n                        >\n                            <g \n                                stroke=\"none\"\n                                strokeWidth=\"2\"\n                                fill=\"none\"\n                                fillRule=\"evenodd\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                            >\n                                <polyline\n                                 stroke=\"currentColor\" transform=\"translate(6.000000, 6.000000) scale(-1, 1) rotate(180.000000) translate(-6.000000, -6.000000) \" points=\"2 4 6 8 10 4\" />\n                            </g>\n                        </svg>\n                        <h4\n                         className={css(styles.label)}>\n                            {title}\n                        </h4>\n                    </div>\n                    <div\n                     className={css(styles.right)}>\n                        {buttons}\n                    </div>\n                </div>\n                {\n                    expanded ? children : null\n                }\n            </div>\n            )\n        ;\n    }\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flexDirection: 'column'\n     }, \n    header: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        padding: '0 4px'\n     }, \n    label: {\n        fontSize: '1em', \n        fontWeight: 500, \n        lineHeight: 1, \n        margin: 0\n     }, \n    collapse: {\n        margin: '1px 6px 1px 2px', \n        opacity: 0.7\n     }, \n    collapseCollapsed: {\n        transform: 'rotate(180deg)'\n     }, \n    collapseExpanded: {\n        transform: 'rotate(0deg)'\n     }, \n    left: {\n        flex: 1, \n        display: 'flex', \n        flexDirection: 'row', \n        padding: '2px 4px', \n        cursor: 'pointer'\n     }, \n    right: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListPaneButton.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\ntype Props = { \n    innerRef?: React.Ref<HTMLButtonElement>;\n    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    children?: React.ReactNode;\n};\nclass FileListPaneButton extends React.PureComponent<Props> {\n    render() {\n        const {\n            innerRef, \n            ...rest\n         } = this.props;\n        return  (\n            <button\n             {...rest} className={css(styles.button)} ref={innerRef}>\n                <svg\n                 className={css(styles.icon)} viewBox=\"0 0 16 16\">\n                    {this.props.children}\n                </svg>\n            </button>\n            )\n        ;\n    }\n}\nexport default React.forwardRef((props: Props, ref: React.Ref<HTMLButtonElement>) => \n    \n         (\n        <FileListPaneButton\n         {...props} innerRef={ref} />\n        )\n    \n    )\nconst styles = StyleSheet.create({\n    button: {\n        appearance: 'none', \n        background: 'transparent', \n        border: 0, \n        margin: 0, \n        outline: 0\n     }, \n    icon: {\n        fill: 'currentColor', \n        height: 16, \n        width: 16, \n        verticalAlign: -3\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\closeEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry} from '../../features/file';\nimport updateEntry from './updateEntry';\nexport default function closeEntry(entry: FileSystemEntry) {\n    \n        if (entry.item.type === 'file') {\n            if (entry.state.isSelected || entry.state.isFocused || entry.state.isOpen) {\n                \n                // Unselect and unfocus the file\n                return updateEntry(entry, {\n                        state: {\n                            isOpen: false, \n                            isSelected: false, \n                            isFocused: false\n                         }\n                     });\n            }\n        }\n        else {\n            if (entry.state.isSelected) {\n                \n                // Unselect the folder\n                return updateEntry(entry, {\n                        state: {\n                            isSelected: false\n                         }\n                     });\n            }\n        }\n        return entry;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\createEntryAtPath.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry, getUniquePath, getParentPath} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function createEntryAtPath(entries: FileSystemEntry[], path: string | undefined, e: FileSystemEntry, suffix?: string):  FileSystemEntry {\n    \n        \n        // Check if an entry exists for the path we want to create the entry at\n        \n        // If the entry is a folder, we create the new entry inside\n        \n        // Otherwise we create it inside the parent\n        const entry = path ? entries.find(e => \n            \n                e.item.path === path\n            ) : null;\n        \n        // If the entry is a folder, we create the new entry inside\n        \n        // Otherwise we create it inside the parent\n        \n        // @ts-ignore\n        const parent = entry ? entry.item.type === 'folder' ? entry.item.path : getParentPath(entry.item.path) : null; \n        \n        // @ts-ignore\n        const name: string = e.item.path.split('/').pop(); \n        \n        // @ts-ignore\n        const item = updateEntry(e, { item: { path: getUniquePath(entries.map(e =>  \n                    e.item.path\n                ), parent ? `${parent}/${name}` : name, suffix)\n             }\n         });\n        \n        \n        // @ts-ignore\n        item.state = { isCreating: true  }; \n        return item;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\createNewEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry, isInsideFolder} from '../../../features/file';\nimport createEntryAtPath from './createEntryAtPath';\nimport updateEntry from './updateEntry';\nexport default function createNewEntry(entries: FileSystemEntry[], type: 'file' | 'folder', at?: string | undefined) {\n    \n        const e: FileSystemEntry = type === 'file' ? {\n                item: {\n                    path: 'Untitled file.js', \n                    type: 'file', \n                    content: ''\n                 }, \n                state: {\n                    isCreating: true\n                 }\n             } : {\n                item: {\n                    path: 'Untitled folder', \n                    type: 'folder'\n                 }, \n                state: {\n                    isCreating: true\n                 }\n             };\n        let path = at;\n        if (typeof path !== 'string') {\n            \n            // Get the current folder if no path is specified\n            const entry = entries.find(e => \n            \n                e.state.isSelected === true\n            );\n            path = entry ? entry.item.path : undefined;\n        }\n        const entry = createEntryAtPath(entries, path, e);\n        const next = entries.map((e) => {\n        \n            if (e.item.type === 'folder' && isInsideFolder(entry.item.path, e.item.path) && !e.state.isExpanded) {\n                return updateEntry(e, {\n                        state: {\n                            isExpanded: true\n                         }\n                     });\n            }\n            return e;\n        }\n        );\n        return [\n                ...next, \n                entry\n            ];\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\expandEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function expandEntry(entries: FileSystemEntry[], path: string, expand: boolean = true):  FileSystemEntry[] {\n    \n        return entries.map((entry) => {\n            \n                if (entry.item.path === path && entry.item.type === 'folder') {\n                    return updateEntry(entry, {\n                            state: {\n                                isExpanded: expand\n                             }\n                         });\n                }\n                return entry;\n            }\n            );\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\openEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function openEntry(entries: FileSystemEntry[], path: string, focus: boolean = false):  FileSystemEntry[] {\n    \n        const entry = entries.find(e => \n        \n            e.item.path === path\n        );\n        const isFolder = entry ? entry.item.type === 'folder' : false;\n        return entries.map((e) => {\n            \n                if (e.item.path === path) {\n                    if (e.item.type === 'file') {\n                        if (e.state.isSelected && e.state.isFocused && e.state.isOpen) {\n                            return e;\n                        }\n                        \n                        // Select, open and focus the file\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: true, \n                                    isFocused: true, \n                                    isOpen: true\n                                 }\n                             });\n                    }\n                    else {\n                        \n                        // Select and toggle the expand for the directory\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: true, \n                                    isExpanded: focus ? e.state.isExpanded : !e.state.isExpanded\n                                 }\n                             });\n                    }\n                }\n                if (e.item.type === 'file') {\n                    if (e.state.isSelected || e.state.isFocused) {\n                        \n                        // Unselect and unfocus the file\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: false, \n                                    isFocused: isFolder ? e.state.isFocused : false\n                                 }\n                             });\n                    }\n                }\n                else {\n                    if (e.state.isSelected) {\n                        \n                        // Unselect the folder\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: false\n                                 }\n                             });\n                    }\n                }\n                return e;\n            }\n            );\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\pasteEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry, isInsideFolder, changeParentPath} from '../../../features/file';\nimport createEntryAtPath from './createEntryAtPath';\nimport updateEntry from './updateEntry';\nexport default function handleEntryPaste(entries: FileSystemEntry[], path: string | undefined, e: FileSystemEntry) {\n    \n        const entry = createEntryAtPath(entries, path, e, '- Copy');\n        if (e.item.type === 'folder') {\n            const children = entries.filter(it => \n            \n                // Get children of the old folder\n                isInsideFolder(it.item.path, e.item.path)\n            ).map(it => \n            \n                // Update the parent folder name to the new one\n                updateEntry(it, {\n                    item: {\n                        path: changeParentPath(it.item.path, e.item.path, entry.item.path)\n                     }\n                 })\n            )\n            ;\n            return [\n                    ...entries, \n                    ...children, \n                    entry\n                ];\n        }\n        else {\n            return [\n                    ...entries, \n                    entry\n                ];\n        }\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\recursivelyCreateParents.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry, getParentPath} from '../../../features/file';\nexport default function recursivelyCreateParents(entries: FileSystemEntry[], path: string, expand?: boolean):  FileSystemEntry[] {\n    \n        const next: FileSystemEntry[] = [];\n        let parent = getParentPath(path);\n        while (parent) {\n            const parentEntry = entries.find(e => \n            \n                e.item.path === parent\n            );\n            if (parentEntry) {\n                if (parentEntry.item.type !== 'folder') {\n                    throw new Error('File path must be inside a folder');\n                }\n                break;\n            }\n            else {\n                next.push({\n                    item: {\n                        type: 'folder', \n                        path: parent\n                     }, \n                    state: {\n                        isExpanded: !!expand\n                     }\n                 })\n                parent = getParentPath(parent);\n            }\n        }\n        return next;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\renameEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry, changeParentPath, isInsideFolder} from '../../../features/file';\nimport recursivelyCreateParents from './recursivelyCreateParents';\nimport updateEntry from './updateEntry';\nexport default function renameEntry(entries: FileSystemEntry[], oldPath: string, newPath: string) {\n    \n        const entry = entries.find(e => \n        \n            e.item.path === oldPath\n        );\n        if (!entry) {\n            return entries;\n        }\n        const renamed = updateEntry(entry, {\n            item: {\n                path: newPath\n             }\n         });\n        delete renamed.state.isCreating\n        const next: FileSystemEntry[] = entries.map((e) => {\n        \n            if (e.item.path === entry.item.path) {\n                return renamed;\n            }\n            if (renamed.item.type === 'folder' && isInsideFolder(e.item.path, entry.item.path)) {\n                return updateEntry(e, {\n                        item: {\n                            path: changeParentPath(e.item.path, entry.item.path, renamed.item.path)\n                         }\n                     });\n            }\n            return e;\n        }\n        );\n        const parents = recursivelyCreateParents(next, renamed.item.path, true);\n        return [\n                ...next, \n                ...parents\n            ];\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\selectEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function selectEntry(entries: FileSystemEntry[], path: string):  FileSystemEntry[] {\n    \n        return entries.map(e => \n            \n                e.item.path === path ? updateEntry(e, {\n                        state: {\n                            isSelected: !e.state.isSelected\n                         }\n                     }) : e\n            );\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\updateEntry.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FileSystemEntry} from '../../../features/file';\nexport default function updateEntry<T extends FileSystemEntry>(entry: T, updates: { \n        item?: Partial<T['item']>;\n        state?: Partial<T['state']>;\n    }):  T {\n    \n        return {\n                ...((entry as any))\n                , \n                item: updates.item ? {\n                        ...entry.item, \n                        ...((updates as any).item)\n                        \n                     } : entry.item, \n                state: updates.state ? {\n                        ...entry.state, \n                        ...((updates as any).state)\n                        \n                     } : entry.state\n             };\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\utils\\convertFileStructure.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {PackiFiles, PackiFile} from '../../../features/packi/index';\nimport {Annotation} from '../../../features/annotations/index';\nimport {isEntryPoint} from '../../../features/file/index';\nimport {FileSystemEntry, TextFileEntry, AssetFileEntry} from '../types';\nconst getFolders = (path: string):  string[] => {\n\n    \n    // TODO: change this to slice and join\n    const pathSegments = path.split('/');\n    if (pathSegments.length === 0) {\n        return [];\n    }\n    const result = [];\n    for (let pathIdx = 0; pathIdx < pathSegments.length - 1; pathIdx++) {\n        result.push(pathSegments.slice(0, pathIdx + 1).join('/'));\n    }\n    return result;\n}\n;\nfunction fileToEntry(path: string, file: PackiFile, annotations: Annotation[], prevEntry?: FileSystemEntry):  any {\n\n    const isLoading = !!annotations.find(({\n        location, \n        severity\n     }) => \n    \n        location?.fileName === path && severity < 0\n    );\n    const isError = !isLoading && !!annotations.find(({\n        location, \n        severity\n     }) => \n    \n        location?.fileName === path && severity >= 3\n    );\n    if (file.type === 'ASSET') {\n        if (prevEntry && prevEntry.item.type === 'file' && prevEntry.item.asset) {\n            return prevEntry.item.uri === file.contents && prevEntry.state.isError === isError && prevEntry.state.isLoading === isLoading ? prevEntry : {\n                        item: {\n                            ...prevEntry.item, \n                            uri: file.contents as string\n                         }, \n                        state: {\n                            ...prevEntry.state, \n                            isError, \n                            isLoading\n                         }\n                     };\n        }\n        else {\n            return {\n                    item: {\n                        path, \n                        type: 'file', \n                        uri: file.contents as string, \n                        asset: true\n                     }, \n                    state: {\n                        isError, \n                        isLoading\n                     }\n                 };\n        }\n    }\n    else {\n        const isEntry = isEntryPoint(path);\n        if (prevEntry && prevEntry.item.type === 'file' && !prevEntry.item.asset) {\n            return prevEntry.item.content === file.contents && prevEntry.state.isError === isError && prevEntry.state.isLoading === isLoading ? prevEntry : {\n                        item: {\n                            ...prevEntry.item, \n                            content: file.contents\n                         }, \n                        state: {\n                            ...prevEntry.state, \n                            isError, \n                            isLoading\n                         }\n                     };\n        }\n        else {\n            return {\n                    item: {\n                        path, \n                        type: 'file', \n                        content: file.contents, \n                        virtual: path === 'package.json'\n                     }, \n                    state: {\n                        isOpen: isEntry, \n                        isSelected: isEntry, \n                        isFocused: isEntry, \n                        isError, \n                        isLoading\n                     }\n                 };\n        }\n    }\n}\nexport function filesToEntries(files: PackiFiles, annotations: Annotation[], prevEntries: FileSystemEntry[]):  FileSystemEntry[] {\n\n    const fileSystem: FileSystemEntry[] = [];\n    \n    // Add entries from files\n    const foldersInFileSystem = new Set();\n    for (const filename of Object.keys(files).sort()) {\n        for (const folder of getFolders(filename)) {\n            if (!foldersInFileSystem.has(folder)) {\n                fileSystem.push((prevEntries.find(entry => \n                \n                    entry.item.path === folder\n                )) ?? ({\n                    item: {\n                        path: folder, \n                        type: 'folder'\n                     }, \n                    state: {\n                        \n                     }\n                 }))\n                foldersInFileSystem.add(folder);\n            }\n        }\n        const file = files[filename];\n        const prevEntry = prevEntries.find(entry => \n        \n            entry.item.path === filename\n        );\n        fileSystem.push(fileToEntry(filename, file, annotations, prevEntry));\n        // Add entries from files\n        // Restore empty folders that cannot be derived from files\n    }\n    // Restore empty folders that cannot be derived from files\n    prevEntries.forEach((entry) => {\n    \n        if (entry.item.type === 'folder' && !foldersInFileSystem.has(entry.item.path)) {\n            fileSystem.push(entry);\n        }\n    }\n    )\n    return fileSystem;\n}\nexport function findFocusedEntry(entries: FileSystemEntry[]):  TextFileEntry | AssetFileEntry | undefined {\n\n    return entries.find(entry => \n            \n                entry.item.type === 'file' && entry.state.isFocused\n            ) as any;\n}\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Form\\Form.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\ntype Props = { \n    onSubmit: () => void;\n    children: React.ReactNode;\n};\ntype State = { \n    isValid: boolean;\n};\ntype RegisterOptions = { \n    validate: () => Error | null;\n    focus: () => void;\n};\ntype Register = (options: RegisterOptions) => number;\ntype Unregister = (key: number) => void;\ntype Update = () => void;\nexport type FormValidation = { \n    register: Register;\n    unregister: Unregister;\n    update: Update;\n    valid: boolean;\n};\nexport const FormValidationContext = React.createContext<FormValidation | undefined>(undefined);\nexport default class Form extends React.Component<Props, State> {\n        state = {\n            isValid: false\n        }\n        ;\n        componentDidMount() {\n            this._update();\n        }\n        _key = 0;\n        _inputs: { \n            key: number;\n            validate: () => Error | null;\n            focus: () => void;\n        }[] = [];\n        _register = ({\n            validate, \n            focus\n         }: RegisterOptions) => {\n            const key = this._key++;\n            this._inputs.push({\n                key, \n                validate, \n                focus\n             })\n            return key;\n        };\n        _unregister = (key: number) => \n            this._inputs = this._inputs.filter(it => \n            \n                it.key !== key\n            )\n        ;\n        _update = () => \n            this.setState({\n                isValid: this._inputs.every(it => \n                \n                    !it.validate()\n                )\n             });\n        _handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n            e.preventDefault();\n            for (const input of this._inputs) {\n                if (input.validate()) {\n                    input.focus();\n                    return ;\n                }\n            }\n            this.props.onSubmit();\n        };\n        render() {\n            return  (\n                <FormValidationContext.Provider\n                 value={{\n                        register: this._register, \n                        unregister: this._unregister, \n                        update: this._update, \n                        valid: this.state.isValid\n                     }}>\n                    <form\n                     onSubmit={this._handleSubmit}>\n                        {this.props.children}\n                    </form>\n                </FormValidationContext.Provider>\n                )\n            ;\n        }\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Form\\withStatus.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {$Subtract} from '../../types';\nimport {FormValidationContext} from './Form';\ntype InjectedProps = { \n    disabled: boolean | undefined;\n};\nexport default function withStatus<P extends InjectedProps>(Comp: React.ComponentType<P>):  React.ComponentType<$Subtract<P, InjectedProps>> {\n    \n        function withStatusFn(props: any) {\n        \n            return  (\n                <FormValidationContext.Consumer\n                >\n                    {\n                        (value: { \n                            valid: boolean;\n                        } | undefined = {\n                            valid: true\n                         }) => \n                        \n                             (\n                            <Comp\n                             disabled={!value.valid} {...props} />\n                            )\n                        \n                        \n                    }\n                </FormValidationContext.Consumer>\n                )\n            ;\n        }\n        withStatusFn.displayName = `withStatus(${Comp.displayName ?? Comp.name})`;\n        return withStatusFn;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Form\\withValidation.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {$Subtract} from '../../types';\nimport {FormValidationContext, FormValidation} from './Form';\ntype ExternalProps = { \n    value: any;\n    validate: (value: any) => Error | null;\n};\ntype Props = ExternalProps & { \n    validation: FormValidation;\n};\ntype InjectedProps = { \n    error: Error | null;\n};\ntype State = { \n    initial: boolean;\n    error: Error | null;\n    value: any;\n};\nexport default function withValidation<P extends InjectedProps>(Comp: React.ComponentType<P>):  React.ComponentType<$Subtract<P, InjectedProps> & ExternalProps> {\n    \n        class EnhancedComponent extends React.Component<Props, State> {\n            static displayName = `withValidation(${Comp.displayName ?? Comp.name})`;\n            static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n                const initial = prevState.value !== nextProps.value ? false : prevState.initial;\n                return {\n                        initial, \n                        error: initial ? null : nextProps.validate ? nextProps.validate(nextProps.value) : null, \n                        value: nextProps.value\n                     };\n            }\n            state = {\n                initial: true, \n                error: null, \n                value: this.props.value\n            }\n            ;\n            _key: number = 0;\n            _root = React.createRef<any>();\n            componentDidMount() {\n                this._key = this.props.validation.register({\n                    validate: this._validate, \n                    focus: this._focus\n                 })\n                ;\n            }\n            componentDidUpdate(prevProps: Props) {\n                if (prevProps.value !== this.props.value) {\n                    this.props.validation.update();\n                }\n            }\n            componentWillUnmount() {\n                this.props.validation.unregister(this._key);\n            }\n            _validate = () => \n                this.props.validate(this.props.value);\n            _focus = () => {\n                this._root.current?.focus?.();\n                if (this.state.initial) {\n                    this.setState({\n                        initial: false, \n                        error: this.props.validate(this.props.value)\n                     })\n                }\n            };\n            render() {\n                \n                // @ts-ignore\n                return  ( <Comp\n                     ref={this._root} error={this.state.error} {...this.props} />\n                    )\n                ;\n                \n            }\n        }\n        return (props) => \n            \n                 (\n                <FormValidationContext.Consumer\n                >\n                    {\n                        (value: any) => {\n                        \n                            return  (\n                                <EnhancedComponent\n                                 validation={value} {...props} />\n                                )\n                            ;\n                        }\n                        \n                    }\n                </FormValidationContext.Consumer>\n                )\n            \n        ;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Import\\ImportFilesManager.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport convertDataTransferItemsToFiles, {WebkitFileEntry, WebkitDirectoryEntry} from '../../utils/convertDataTransferItemsToFiles';\nimport dragEventIncludes from '../../utils/dragEventIncludes';\nimport {getUniquePath, isESLintConfig} from '../../features/file/index';\nimport {FileSystemEntry, TextFileEntry, AssetFileEntry} from '../FileList/types';\nimport {c, s} from '../ThemeProvider';\nimport Button from '../widgets/Button';\nimport Modal from '../widgets/Modal';\nimport ModalDialog from '../widgets/ModalDialog';\ntype Props = { \n    entries: FileSystemEntry[];\n    onImportFile: (e: TextFileEntry | AssetFileEntry) => void;\n    uploadFileAsync: (file: File) => Promise<string>;\n    render: (options: { \n        onImportStart: () => void;\n    }) => React.ReactNode;\n    className?: string;\n};\ntype FileItem = File | WebkitFileEntry | WebkitDirectoryEntry;\ntype State = { \n    isImportModalShown: boolean;\n    isDragging: boolean;\n    isImporting: boolean;\n    itemsToImport: FileItem[];\n    itemsErrored: { \n        item: FileItem;\n        error: Error;\n    }[];\n    importTotal: number;\n    importProgress: number;\n};\nexport default class ImportFilesManager extends React.PureComponent<Props, State> {\n        state: State = {\n            isImportModalShown: false, \n            isDragging: false, \n            isImporting: false, \n            itemsToImport: [], \n            itemsErrored: [], \n            importProgress: 0, \n            importTotal: 0\n        }\n        ;\n        \n        // @ts-ignore\n        componentDidMount() {\n            document.addEventListener('dragover', this._handleDragOver);\n            document.addEventListener('drop', this._handleDrop);\n        }\n        \n        // @ts-ignore\n        _handleDragOver = (e: DragEvent) => {\n            if (dragEventIncludes(e, 'Files')) {\n                e.preventDefault();\n                if (this.state.isImportModalShown) {\n                    return true; \n                }\n                if (!this.state.isDragging) {\n                    this.setState({\n                        isDragging: true\n                     })\n                }\n                clearTimeout(this._dragTimer);\n                this._dragTimer = setTimeout(this._handleDragEnd, 300);\n            }\n        };\n        _handleDragEnd = () => {\n            if (this.state.isDragging) {\n                this.setState({\n                    isDragging: false\n                 })\n            }\n        };\n        _handleDrop = (e: DragEvent) => {\n            if (dragEventIncludes(e, 'Files') && e.dataTransfer && (e.dataTransfer.items || e.dataTransfer.files)) {\n                const dataTransfer = e.dataTransfer;\n                e.preventDefault();\n                const entries: FileItem[] = dataTransfer.items ? Array.from(dataTransfer.items).map(it => \n                    \n                        it.webkitGetAsEntry()\n                    ) : Array.from(dataTransfer.files);\n                this._handleSelectFilesForImport(entries);\n            }\n        };\n        _dragTimer: any;\n        _showImportModal = () => \n            this.setState({\n                isImportModalShown: true\n             });\n        _hideImportModal = () => \n            this.setState({\n                isImportModalShown: false, \n                itemsToImport: []\n             });\n        _handleSelectFilesForImport = (items: FileItem[]) => \n            this.setState((state) => \n            \n                ({\n                    isImportModalShown: true, \n                    itemsToImport: [\n                        ...state.itemsToImport, \n                        ...items\n                    ], \n                    itemsErrored: []\n                 })\n            );\n        _handleImportClick = async () => {\n        \n            this.setState({\n                isImporting: true, \n                isImportModalShown: false, \n                importProgress: 0\n             })\n            const allPaths = this.props.entries.map(e => \n            \n                e.item.path\n            );\n            const folderMappings: { \n                [key: string]: string;\n            } = {};\n            const {\n                itemsToImport\n             } = this.state;\n            itemsToImport.forEach((item) => {\n            \n                \n                // @ts-ignore\n                if (item.isDirectory) {\n                    folderMappings[item.name] = getUniquePath(allPaths, item.name); \n                }\n            }\n            )\n            const files = await convertDataTransferItemsToFiles(itemsToImport, folderMappings);\n            this.setState({\n                importTotal: files.length\n             })\n            await Promise.all(files.map(async ({\n                    file, \n                    path\n                 }) => {\n                \n                    try {\n                        const entry = /\\.(md|json|js|tsx?)$/.test(path) || isESLintConfig(path) ? await new Promise((resolve, reject) => {\n                                \n                                    const reader = new FileReader();\n                                    reader.onload = (e: ProgressEvent) => \n                                    \n                                        resolve({\n                                            item: {\n                                                path, \n                                                type: 'file', \n                                                \n                                                // @ts-ignore\n                                                content: e.target ? e.target.result : ''\n                                             }, \n                                            state: {   }\n                                            \n                                         })\n                                    ;\n                                    reader.onerror = error => \n                                    \n                                        reject(error)\n                                    ;\n                                    reader.readAsText(file);\n                                }\n                                ) : await this.props.uploadFileAsync(file).then((uri) => \n                                \n                                    ({\n                                            item: {\n                                                path, \n                                                type: 'file', \n                                                uri, \n                                                asset: true\n                                             }, \n                                            state: {\n                                                \n                                             }\n                                         } as AssetFileEntry)\n                                );\n                        ;\n                        if (!this.state.itemsToImport.length) {\n                            \n                            // Import was cancelled\n                            return ;\n                        }\n                        // @ts-ignore\n                        this.props.onImportFile(entry);\n                    } \n                    catch (error) {\n                        console.error(error);\n                        this.setState((state) => \n                        \n                            ({\n                                itemsErrored: [\n                                    ...state.itemsErrored, \n                                    {\n                                        item: file, \n                                        error\n                                     }\n                                ]\n                             })\n                        )\n                    } \n                    finally {\n                        this.setState((state) => \n                        \n                            ({\n                                importProgress: state.importProgress + 1\n                             })\n                        )\n                    } \n                }\n                ));\n            this.setState({\n                itemsToImport: []\n             })\n        }\n        ;\n        _handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>) => \n            // @ts-ignore\n            this._handleSelectFilesForImport(e.target.files);\n        _handleRemoveFileImport = (file: FileItem) => \n            this.setState((state) => \n            \n                ({\n                    itemsToImport: state.itemsToImport.filter(f => \n                    \n                        f !== file\n                    )\n                 })\n            );\n        _handleProgressDismiss = () => \n            this.setState({\n                itemsToImport: [], \n                itemsErrored: [], \n                importProgress: 0, \n                isImporting: false\n             });\n        render() {\n            const {\n                isImporting, \n                importProgress, \n                itemsToImport, \n                itemsErrored, \n                isDragging, \n                isImportModalShown, \n                importTotal\n             } = this.state;\n            const importedFiles = importProgress - itemsErrored.length;\n            return  (\n                <div\n                 className={this.props.className}>\n                    {\n                        this.props.render({\n                            onImportStart: this._showImportModal\n                         })\n                    }\n                    {\n                        isImporting ?  (\n                            <div\n                             className={css(styles.importProgress)}>\n                                <div\n                                 className={css(styles.importProgressHeader)}>\n                                    <h4\n                                     className={css(styles.importProgressLabel)}>\n                                        {\n                                            importTotal === 0 ? 'Reading files…' : importProgress === importTotal ? `${importedFiles} file${\n                                                    importedFiles === 1\n                                                     ? ''\n                                                     : 's'}\n                                                     imported${\n                                                    itemsErrored.length\n                                                     ? `, ${itemsErrored.length} failed to import`\n                                                     : ` successfully`}\n                                                    ` : `Importing files (${importProgress + 1}/${importTotal})`\n                                        }\n                                    </h4>\n                                    <button\n                                     onClick={this._handleProgressDismiss} className={css(styles.importProgressButton)}>\n                                        {\n                                            importProgress === importTotal ? 'Dismiss' : 'Cancel'\n                                        }\n                                    </button>\n                                </div>\n                                {\n                                    importTotal ?  (\n                                        <progress\n                                         className={css(styles.importProgressBar)} value={(importProgress / importTotal) * 100} max={100} />\n                                        )\n                                     : null\n                                }\n                            </div>\n                            )\n                         : null\n                    }\n                    <Modal\n                     visible={isDragging}>\n                        <div\n                         className={css(styles.dropzoneLarge)}>\n                            <h2\n                            >\n                                Drop anywhere to import\n                            </h2>\n                            <p\n                            >\n                                You'll be able to adjust your selection before importing them into your project\n                            </p>\n                        </div>\n                    </Modal>\n                    <ModalDialog\n                     visible={isImportModalShown} onDismiss={this._hideImportModal} title=\"Import files\">\n                        <p\n                         className={css(styles.paragraph)}>\n                            Import JavaScript files from your computer or a GitHub repository to use in your expo\n            project.\n                        </p>\n                        <div\n                         className={css(styles.dropzoneSmall)}>\n                            {\n                                itemsToImport.length ?  (\n                                    <ul\n                                     className={css(styles.fileList)}>\n                                        {\n                                            itemsToImport.map((f, i) => \n                                            \n                                                 (\n                                                <li\n                                                 className={css(styles.fileEntry)} key={i}>\n                                                    <span\n                                                     className={css(styles.fileEntryName)}>\n                                                        {\n                                                            (((f as any) (\n                                                                <div\n                                                                 className=\"isDirectory\" />\n                                                                )\n                                                            ) ? `${f.name}/` : f.name)\n                                                        }\n                                                    </span>\n                                                    <span\n                                                     className={css(styles.fileEntrySize)}>\n                                                        {\n                                                            (((typeof((f as any) (\n                                                                    <div\n                                                                     className=\"size\" />\n                                                                    )\n                                                            )) === 'number'\n                                                            ) ? `${(f as any) (\n                                                                    <div\n                                                                     className=\"size\" />\n                                                                    )\n                                                                , 1024\n                                                                .toFixed(2)\n                                                                }kb` : '')\n                                                        }\n                                                    </span>\n                                                    <button\n                                                     onClick={() => \n                                                        \n                                                            this._handleRemoveFileImport(f)\n                                                    } className={css(styles.fileEntryClose)}>\n                                                        ×\n                                                    </button>\n                                                </li>\n                                                )\n                                            \n                                            )\n                                        }\n                                    </ul>\n                                    )\n                                 :  (\n                                    <div\n                                     className={css(styles.dropzonePlaceholder)}>\n                                        Drop your files or\n                                        <label\n                                         className={css(styles.fileInputLabel)}>\n                                            browse\n                                            <input \n                                                multiple\n                                                type=\"file\"\n                                                accept=\".js\"\n                                                onChange={this._handleFilesChange}\n                                                className={css(styles.fileInput)}\n                                             />\n                                        </label>\n                                    </div>\n                                    )\n                                \n                            }\n                        </div>\n                        <Button \n                            large\n                            variant=\"primary\"\n                            onClick={this._handleImportClick}\n                            disabled={!itemsToImport.length}\n                        >\n                            Import\n                        </Button>\n                    </ModalDialog>\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    dropzoneLarge: {\n        textAlign: 'center', \n        padding: 48, \n        border: `2px dashed ${c('border')}`, \n        borderRadius: 4\n     }, \n    dropzoneSmall: {\n        border: `1px dashed ${c('border')}`, \n        backgroundColor: c('background'), \n        borderRadius: 3, \n        height: '12em', \n        marginBottom: 8\n     }, \n    dropzonePlaceholder: {\n        width: '100%', \n        height: '100%', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center'\n     }, \n    paragraph: {\n        margin: '8px 0 16px'\n     }, \n    fileInputLabel: {\n        margin: 0, \n        paddingLeft: 4, \n        color: c('selected'), \n        fontWeight: 'normal', \n        cursor: 'pointer', \n        ':hover': {\n            textDecoration: 'underline'\n         }\n     }, \n    fileInput: {\n        display: 'none'\n     }, \n    fileList: {\n        listStyle: 'none', \n        textAlign: 'left', \n        padding: 0, \n        height: '100%', \n        width: '100%', \n        overflow: 'auto'\n     }, \n    fileEntry: {\n        display: 'flex', \n        borderBottom: `1px solid ${c('border')}`, \n        alignItems: 'center'\n     }, \n    fileEntrySize: {\n        flex: 1, \n        opacity: 0.5, \n        margin: 8\n     }, \n    fileEntryName: {\n        margin: 8, \n        maxWidth: '15em', \n        whiteSpace: 'nowrap', \n        textOverflow: 'ellipsis', \n        overflow: 'hidden'\n     }, \n    fileEntryClose: {\n        padding: '4px 12px', \n        margin: '0 4px', \n        fontSize: 18, \n        background: 'none', \n        border: 'none', \n        appearance: 'none'\n     }, \n    importProgress: {\n        position: 'fixed', \n        zIndex: 10, \n        left: '1em', \n        bottom: '4em', \n        width: '24em', \n        padding: '8px 16px', \n        borderRadius: 3, \n        backgroundColor: c('content'), \n        border: `1px solid ${c('border')}`, \n        boxShadow: s('popover')\n     }, \n    importProgressHeader: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        margin: '4px 0'\n     }, \n    importProgressLabel: {\n        flex: 1, \n        fontSize: '1em', \n        fontWeight: 500, \n        margin: 0\n     }, \n    importProgressButton: {\n        appearance: 'none', \n        background: 'none', \n        border: 0, \n        color: c('primary')\n     }, \n    importProgressBar: {\n        appearance: 'none', \n        width: '100%', \n        margin: '8px 0', \n        height: 6, \n        borderRadius: 3, \n        overflow: 'hidden', \n        '::-webkit-progress-bar': {\n            backgroundColor: c('content')\n         }, \n        '::-webkit-progress-value': {\n            backgroundColor: c('primary')\n         }, \n        '::-moz-progress-bar': {\n            backgroundColor: c('content')\n         }, \n        '::-moz-progress-value': {\n            backgroundColor: c('primary')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Packi\\PackiManager.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport Fab from '@material-ui/core/Fab';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {ThemeName, withThemeName} from '../../features/preferences';\nimport {c} from '../ThemeProvider';\nimport {Packi, packiValidations} from '../../features/packi';\nimport Button from '../widgets/Button';\nimport EditorForm from '../../features/form/EditorForm';\ntype PackiManagerProps = { \n    classes: any;\n    currentPacki?: Packi;\n    packiNames: string[];\n    packiTemplateNames: string[];\n    onSelectPacki: (id: string) => void;\n    onDeletePacki: (id: string) => void;\n    onCreatePacki: (id: string, kind: string) => void;\n    onUploadPackiTemplate: (templateId: string, virtualFiles: boolean) => void;\n};\ntype Props = PackiManagerProps & { \n    theme: ThemeName;\n};\ntype modalKind = 'create' | 'clone' | 'commit' | 'saveTemplate' | 'none';\ntype State = { \n    modalVisible: modalKind;\n};\nclass PackiManager extends React.PureComponent<Props, State> {\n    state = {\n        modalVisible: 'none' as modalKind\n    }\n    ;\n    _handleDismissModal = () => {\n    \n        console.log('_handleDismissModal');\n        this.setState({\n            modalVisible: 'none'\n         })\n    }\n    ;\n    _handleShowModal = (kind: modalKind) => \n    \n        this.setState({\n            modalVisible: kind\n         })\n    ;\n    _handleCreatePacki = (name: string, kind: string) => {\n    \n        // alert('Create packi ' + name + ' of kind ' + kind);\n        this._handleDismissModal();\n        // alert('Create packi ' + name + ' of kind ' + kind);\n        this.props.onCreatePacki(name, kind);\n    }\n    ;\n    _handleUploadPackiTemplate = (templateId: string, virtualFiles: boolean) => {\n    \n        this._handleDismissModal();\n        alert('Save packi template ' + templateId);\n        this.props.onUploadPackiTemplate(templateId, virtualFiles);\n    }\n    ;\n    render() {\n        const {\n            classes, \n            currentPacki, \n            packiNames, \n            packiTemplateNames, \n            onSelectPacki, \n            onDeletePacki\n         } = this.props;\n        const {\n            modalVisible\n         } = this.state;\n        const gitBranchesTODO = [\n            'master'\n        ];\n        return  (\n            <div\n            >\n                {\n                    modalVisible !== 'none' ? null :  (\n                        <div\n                        >\n                            <div\n                             className={css(styles.buttons)}>\n                                <Fab\n                                 variant=\"extended\" onClick={() => \n                                    \n                                        this._handleShowModal('create')\n                                } className={classes.fabButton}>\n                                    Create new\n                                </Fab>\n                                <Fab\n                                 variant=\"extended\" onClick={() => \n                                    \n                                        this._handleShowModal('clone')\n                                } className={classes.fabButton}>\n                                    Git clone\n                                </Fab>\n                                <Fab\n                                 variant=\"extended\" onClick={() => \n                                    \n                                        this._handleShowModal('commit')\n                                } className={classes.fabButton}>\n                                    Git commit/push\n                                </Fab>\n                                <Fab\n                                 variant=\"extended\" onClick={() => \n                                    \n                                        this._handleShowModal('saveTemplate')\n                                } className={classes.fabButton}>\n                                    Upload template\n                                </Fab>\n                            </div>\n                            <div\n                             className={css(styles.title)}>\n                                Your Packies\n                            </div>\n                            <List\n                             dense={true}>\n                                {\n                                    packiNames.map((name, i) => \n                                    \n                                         (\n                                        <ListItem\n                                         key={i} button>\n                                            <ListItemText\n                                             primary={name} onClick={() => \n                                                \n                                                    onSelectPacki(name)\n                                            } />\n                                            <ListItemSecondaryAction\n                                            >\n                                                <IconButton\n                                                 aria-label=\"Delete\" onClick={() => \n                                                    \n                                                        onDeletePacki(name)\n                                                }>\n                                                    <DeleteIcon\n                                                     />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                        )\n                                    \n                                    )\n                                }\n                            </List>\n                        </div>\n                        )\n                    \n                }\n                <EditorForm \n                    title=\"Create New Packi\"\n                    action=\"Confirm\"\n                    visible={modalVisible === 'create'}\n                    onDismiss={this._handleDismissModal}\n                    onSubmit={values => \n                        \n                            // alert(JSON.stringify(values));\n                            this._handleCreatePacki(values['name'], values['kind'])\n                    }\n                    fields={{\n                            name: {\n                                type: 'text', \n                                label: 'Name', \n                                onValidate: packiValidations.validatePackiName\n                             }, \n                            kind: {\n                                type: 'select', \n                                label: 'Kind', \n                                options: packiTemplateNames.map((name) => {\n                                \n                                    return {\n                                            label: name, \n                                            value: name\n                                         };\n                                }\n                                )\n                             }\n                         }}\n                 />\n                {\n                    currentPacki\n                     &&  (\n                        <EditorForm \n                            title=\"Save packi template\"\n                            action=\"Confirm\"\n                            visible={modalVisible === 'saveTemplate'}\n                            onDismiss={this._handleDismissModal}\n                            onSubmit={(values: { \n                                    [k: string]: any;\n                                }) => \n                                \n                                    // alert(JSON.stringify(values));\n                                    this._handleUploadPackiTemplate(values['templateId'], values['virtualFiles'])\n                            }\n                            fields={{\n                                    templateId: {\n                                        type: 'text', \n                                        label: 'Template id', \n                                        default: '', \n                                        onValidate: packiValidations.validatePackiName\n                                     }, \n                                    virtualFiles: {\n                                        type: 'checkbox', \n                                        label: 'Virtual files', \n                                        default: true\n                                     }\n                                 }}\n                         />\n                        )\n                    \n                }\n            </div>\n            )\n        ;\n    }\n}\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flexDirection: 'row', \n        flexWrap: 'nowrap', \n        fontFamily: 'var(--font-monospace)', \n        fontSize: 13, \n        minHeight: 16, \n        margin: '4px 0'\n     }, \n    title: {\n        height: 72, \n        fontSize: 24, \n        width: '100%', \n        lineHeight: '24px', \n        display: 'flex', \n        flexShrink: 0, \n        alignItems: 'center', \n        justifyContent: 'center', \n        boxShadow: '0 1px 0 rgba(36, 44, 58, 0.1)'\n     }, \n    buttons: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        position: 'relative', \n        zIndex: 5, \n        marginTop: '6px', \n        borderTop: '1px black solid'\n     }, \n    shortcutList: {\n        fontSize: '1.2em', \n        tableLayout: 'fixed'\n     }, \n    shortcutCell: {\n        padding: '6px 8px', \n        color: c('primary'), \n        background: 'white', \n        ':hover': {\n            background: c('primary'), \n            color: 'white'\n         }\n     }, \n    shortcutLabelCell: {\n        textAlign: 'right'\n     }, \n    shortcutDescriptionCell: {\n        textAlign: 'left'\n     }, \n    shortcutLabel: {\n        color: 'inherit', \n        fontFamily: 'inherit', \n        fontSize: 'inherit', \n        backgroundColor: 'transparent', \n        boxShadow: 'none', \n        padding: 0, \n        display: 'inline-block'\n     }, \n    saveButton: {\n        minWidth: 100\n     }\n });\nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        fabButton: {\n            margin: theme.spacing(1)\n         }\n     })\n;\nconst StyledComp = withStyles(muiStyles)(PackiManager);\nexport default withThemeName(StyledComp);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Packi\\PackiManagerContainer.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {Dispatch} from 'redux';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {StoreState} from '../../store';\nimport {LoggedUser} from '../../features/app';\nimport {fileConversions} from '../../features/file';\nimport {Packi, PackiFiles, packiActions} from '../../features/packi';\nimport {PreferencesContextType, withPreferences} from '../../features/preferences';\nimport {GitRepositoryMeta} from '../../features/github';\nimport PackiManager from './PackiManager';\nimport Spinner from '../widgets/Spinner';\ninterface StateProps {\n    loggedUser?: LoggedUser;\n    packiNames?: string[];\n    currentPacki?: Packi;\n    packiTemplateNames?: string[];\n    ownedGitRepositories?: GitRepositoryMeta[];\n}\ninterface DispatchProps {\n    dispatchFetchPackiList: () => void;\n    dispatchSelectPacki: (packiId: string) => void;\n    dispatchCreatePacki: (packiId: string, packiKind: string) => void;\n    dispatchDeletePacki: (packiId: string) => void;\n    dispatchFetchPackiTemplateList: () => void;\n    dispatchUploadPackiTemplate: (uid: string, templateId: string, files: PackiFiles) => void;\n}\nconst mapStateToProps = (state: StoreState):  StateProps => \n\n    ({\n        loggedUser: state.app.loggedUser, \n        packiNames: state.packi.packiNames, \n        currentPacki: state.packi.currentPacki, \n        packiTemplateNames: state.packi.packiTemplateNames, \n        ownedGitRepositories: state.packi.ownedGitRepositories\n     })\n;\nconst mapDispatchToProps = (dispatch: Dispatch):  DispatchProps => \n\n    ({\n        dispatchFetchPackiList: () => \n        \n            dispatch(packiActions.fetchPackiListRequest())\n        , \n        dispatchSelectPacki: (packiId: string) => \n        \n            dispatch(packiActions.selectPackiRequest({\n                id: packiId\n             }))\n        , \n        dispatchCreatePacki: (packiId: string, packiKind: string) => \n        \n            dispatch(packiActions.createPackiRequest({\n                id: packiId, \n                options: {\n                    data: packiKind\n                 }\n             }))\n        , \n        dispatchDeletePacki: (packiId: string) => \n        \n            dispatch(packiActions.deletePackiRequest({\n                id: packiId\n             }))\n        , \n        dispatchFetchPackiTemplateList: () => \n        \n            dispatch(packiActions.fetchPackiTemplateListRequest())\n        , \n        dispatchUploadPackiTemplate: (uid: string, templateId: string, files: PackiFiles) => \n        \n            dispatch(packiActions.uploadPackiTemplateRequest({\n                uid, \n                templateId, \n                files\n             }))\n        \n     })\n;\ntype PackiManagerContainerProps = PreferencesContextType & PropsFromRedux & { \n    onClose: () => void;\n};\ntype State = StateProps & { \n};\nclass PackiManagerContainerComp extends React.Component<PackiManagerContainerProps, State> {\n    componentDidMount() {\n    }\n    _handleSelectPacki = async (packiId: string) => {\n    \n        this.props.dispatchSelectPacki(packiId);\n        this.props.onClose();\n    }\n    ;\n    _handleCreatePacki = async (packiId: string, packiKind: string) => {\n    \n        this.props.dispatchCreatePacki(packiId, packiKind);\n        this.props.onClose();\n    }\n    ;\n    _handleDeletePacki = async (packiId: string) => \n    \n        this.props.dispatchDeletePacki(packiId);\n    \n    ;\n    _handleUploadPackiTemplate = async (templateId: string, virtualFiles: boolean) => {\n    \n        if (this.props.loggedUser && this.props.currentPacki) {\n            const files: PackiFiles = virtualFiles ? this.props.currentPacki.files : fileConversions.packiFilterIttf(this.props.currentPacki.files);\n            console.log('PackiManager._handleCommitGitRepository.virtualFiles', Object.keys(this.props.currentPacki.files), virtualFiles, Object.keys(files));\n            this.props.dispatchUploadPackiTemplate(this.props.loggedUser.uid, templateId, files);\n            this.props.onClose();\n        }\n    }\n    ;\n    render() {\n        const {\n            currentPacki, \n            packiNames, \n            packiTemplateNames, \n            ownedGitRepositories\n         } = this.props;\n        console.log('PackiManagerContainer.render.props', this.props);\n        if (packiNames && packiTemplateNames) {\n            return  (\n                <PackiManager \n                    currentPacki={currentPacki}\n                    packiNames={packiNames || []}\n                    packiTemplateNames={packiTemplateNames || []}\n                    onSelectPacki={this._handleSelectPacki}\n                    onCreatePacki={this._handleCreatePacki}\n                    onDeletePacki={this._handleDeletePacki}\n                    onUploadPackiTemplate={this._handleUploadPackiTemplate}\n                 />\n                )\n            ;\n        }\n        else {\n            return  (\n                <Spinner\n                 />\n                )\n            ;\n        }\n    }\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\nconst PackiManagerContainer = withPreferences(connector(PackiManagerContainerComp));\nexport default PackiManagerContainer;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\PageMetadata.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {Helmet} from 'react-helmet-async';\nimport {DEFAULT_PACKI_NAME, DEFAULT_PACKI_DESCRIPTION, DEFAULT_PACKI_DESCRIPTION_EMPTY, DEFAULT_PACKI_DESCRIPTION_SAVED} from '../features/config';\nimport {isIntentionallyNamed} from '../features/packi';\ntype Props = { \n    name: string;\n    description: string;\n    id?: string;\n};\nexport function getPageMetadata(props: Props) {\n\n    const title = props.id || isIntentionallyNamed(props.name) ? `${props.name} - Packi` : DEFAULT_PACKI_NAME;\n    const description = props.description === DEFAULT_PACKI_DESCRIPTION ? props.id ? DEFAULT_PACKI_DESCRIPTION_SAVED : DEFAULT_PACKI_DESCRIPTION_EMPTY : props.description;\n    const url = `${process.env.PACKI_SERVER_URL}${\n    props.id\n     ? `/${props.id}`\n     : ''}\n    `;\n    const image = 'https://s3.amazonaws.com/exp-brand-assets/PackiIcon_200.png';\n    const meta = [\n        {\n            name: 'description', \n            content: description\n         }, \n        \n        // Open graph\n        {\n            property: 'og:url', \n            content: url\n         }, \n        {\n            property: 'og:title', \n            content: title\n         }, \n        {\n            property: 'og:description', \n            content: description\n         }, \n        {\n            property: 'og:type', \n            content: 'website'\n         }, \n        {\n            property: 'og:image', \n            content: image\n         }, \n        {\n            property: 'og:image:width', \n            content: '200'\n         }, \n        {\n            property: 'og:image:height', \n            content: '200'\n         }, \n        \n        // Twitter\n        {\n            name: 'twitter:card', \n            content: 'summary'\n         }, \n        {\n            name: 'twitter:site', \n            content: '@expo'\n         }, \n        {\n            name: 'twitter:title', \n            content: title\n         }, \n        {\n            name: 'twitter:description', \n            content: description\n         }, \n        {\n            name: 'twitter:image', \n            content: image\n         }\n    ];\n    return {\n            title, \n            description, \n            url, \n            meta\n         };\n}\nexport default function PageMetadata(props: Props) {\n    \n        const {\n            title, \n            meta\n         } = getPageMetadata(props);\n        return  (\n            <Helmet\n             title={title} meta={meta} />\n            )\n        ;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Publish\\ModalPublishOverwriteError.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Button} from '../widgets/Button';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    username: string | undefined;\n    slug: string;\n    visible: boolean;\n    onEditName: () => void;\n    onDismiss: () => void;\n};\nexport default class ModalPublishOverwriteError extends React.Component<Props> {\n        render() {\n            return  (\n                <ModalDialog\n                 visible={this.props.visible} onDismiss={this.props.onDismiss} title=\"Experience already exists!\">\n                    <p\n                     className={css(styles.text)}>\n                        You already have an experience published under \"\n                        {\n                            this.props.username ? `@${this.props.username}/${this.props.slug}` : this.props.slug\n                        }\n                        \" in\n          your profile. Please choose another name for the Packi and save again.\n                    </p>\n                    <Button\n                     large variant=\"secondary\" onClick={this.props.onEditName}>\n                        Choose another name\n                    </Button>\n                </ModalDialog>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    text: {\n        marginTop: 12, \n        fontSize: 16, \n        textAlign: 'center'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Publish\\ModalPublishToProfile.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {c} from '../ThemeProvider';\nimport {Button} from '../widgets/Button';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    authFlow?: 'save1' | 'save2';\n    visible: boolean;\n    packiUrl?: string;\n    zipUrl?: string;\n    isPublishing: boolean;\n    onDismiss: () => void;\n    onPublish: () => void;\n};\nclass ModalPublishToProfile extends React.Component<Props> {\n    componentDidMount() {\n        document.addEventListener('keydown', this._handleKeyDown);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this._handleKeyDown);\n    }\n    _handleKeyDown = (e: KeyboardEvent) => {\n        if (this.props.visible && e.keyCode === 13) {\n            e.preventDefault();\n            this.props.onPublish();\n        }\n    };\n    render() {\n        const copy = this.props.authFlow === 'save2' ? 'Want a stable and easy to remember URL?' : 'Want to easily find this packi again?';\n        const cta = this.props.authFlow === 'save2' ? 'Save to your Wizzi Profile' : 'Save to Profile';\n        return  (\n            <ModalDialog\n             visible={this.props.visible} title=\"Save your packi\" onDismiss={this.props.onDismiss}>\n                <p\n                 className={css(styles.text)} style={{\n                        marginTop: 16\n                     }}>\n                    The shareable link to your Packi\n                    {' '}\n                    <a\n                     href={this.props.packiUrl} target=\"blank\">\n                        {this.props.packiUrl}\n                    </a>\n                </p>\n                <p\n                 className={css(styles.text)}>\n                    Every time you save, your will get a new link to share.\n                    {copy}\n                    Log in or sign up and save\n          to your profile!\n                </p>\n                <Button \n                    large\n                    variant=\"primary\"\n                    onClick={this.props.onPublish}\n                    loading={this.props.isPublishing}\n                >\n                    {cta}\n                </Button>\n                {\n                    this.props.zipUrl ?  (\n                        <p\n                         className={css(styles.caption)}>\n                            <a\n                             className={css(styles.link)} href={this.props.zipUrl} target=\"blank\">\n                                Download .zip file\n                            </a>\n                        </p>\n                        )\n                     : null\n                }\n            </ModalDialog>\n            )\n        ;\n    }\n}\nexport default connect((state: any) => \n    \n        ({\n            authFlow: state.splitTestSettings.authFlow || 'save1'\n         })\n    )(ModalPublishToProfile)\nconst styles = StyleSheet.create({\n    text: {\n        marginBottom: 24, \n        fontSize: '16px', \n        padding: '0 24px 0 24px', \n        lineHeight: '22px', \n        textAlign: 'center'\n     }, \n    caption: {\n        marginTop: 24, \n        fontSize: '16px', \n        lineHeight: '22px', \n        textAlign: 'center'\n     }, \n    link: {\n        color: c('primary'), \n        cursor: 'pointer', \n        textDecoration: 'underline'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Publish\\ModalPublishUnknownError.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    visible: boolean;\n    onDismiss: () => void;\n};\nexport default class ModalPublishUnknownError extends React.PureComponent<Props> {\n        render() {\n            return  (\n                <ModalDialog\n                 visible={this.props.visible} onDismiss={this.props.onDismiss} title=\"Couldn't save the Packi!\">\n                    <p\n                     className={css(styles.text)}>\n                        An unknown error occurred when saving your Packi. Please try again later.\n                    </p>\n                </ModalDialog>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    text: {\n        marginTop: 12, \n        fontSize: 16, \n        textAlign: 'center'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Publish\\ModalPublishing.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {ModalDialog} from '../widgets/ModalDialog';\nimport Spinner from '../widgets/Spinner';\ntype Props = { \n    visible: boolean;\n    onDismiss: () => void;\n};\nexport default function ModalPublishing(props: Props) {\n    \n        return  (\n            <ModalDialog\n             visible={props.visible} onDismiss={props.onDismiss} title=\"Saving Packi…\">\n                <div\n                 className={css(styles.content)}>\n                    <Spinner\n                     />\n                </div>\n            </ModalDialog>\n            )\n        ;\n    }\nconst styles = StyleSheet.create({\n    content: {\n        margin: '16px 8px 12px'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Publish\\ModalSuccessfulPublish.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Viewer} from '../../features/account/index';\nimport {Avatar} from '../widgets/Avatar';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    visible: boolean;\n    viewer: Viewer | undefined;\n    onDismiss: () => void;\n};\nclass ModalSuccessfulPublish extends React.PureComponent<Props> {\n    componentDidUpdate(prevProps: Props) {\n    }\n    _dismissModal = () => {\n        if (this.props.onDismiss) {\n            this.props.onDismiss();\n        }\n    };\n    render() {\n        const picture = this.props.viewer?.picture;\n        return  (\n            <ModalDialog\n             visible={this.props.visible} onDismiss={this.props.onDismiss}>\n                {\n                    picture ?  (\n                        <div\n                         className={css(styles.avatar)}>\n                            <Avatar\n                             source={picture} size={80} />\n                        </div>\n                        )\n                     : null\n                }\n                <h2\n                 className={css(styles.heading)}>\n                    Your Packi was saved\n                </h2>\n                <p\n                 className={css(styles.text)}>\n                    You can now find your Packi on your profile and link others to it. Share it with your\n          friends!\n                </p>\n                {\n                    this.props.viewer ?  (\n                        <p\n                         className={css(styles.caption)}>\n                            <a\n                             href={`${process.env.SERVER_URL}/@${this.props.viewer.username}/packis`} onClick={this._dismissModal} target=\"blank\">\n                                View your Packies\n                            </a>\n                        </p>\n                        )\n                     : null\n                }\n            </ModalDialog>\n            )\n        ;\n    }\n}\nexport default ModalSuccessfulPublish;\nconst styles = StyleSheet.create({\n    avatar: {\n        marginTop: 16, \n        marginBottom: 24, \n        textAlign: 'center'\n     }, \n    heading: {\n        fontSize: '24px', \n        fontWeight: 500, \n        lineHeight: '24px', \n        textAlign: 'center'\n     }, \n    text: {\n        marginBottom: 24, \n        fontSize: '16px', \n        padding: '0 24px 0 24px', \n        lineHeight: '22px', \n        textAlign: 'center'\n     }, \n    caption: {\n        fontSize: '16px', \n        lineHeight: '22px', \n        textAlign: 'center'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\Publish\\PublishManager.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {getLoginHref} from '../../features/auth/index';\nimport {withAuth, AuthProps} from '../../features/auth/index';\nimport {SaveOptions, isIntentionallyNamed} from '../../features/packi/index';\nimport ModalEditTitleAndDescription from '../EditorView/ModalEditTitleAndDescription';\nimport ModalPublishOverwriteError from './ModalPublishOverwriteError';\nimport ModalPublishToProfile from './ModalPublishToProfile';\nimport ModalPublishUnknownError from './ModalPublishUnknownError';\nimport ModalPublishing from './ModalPublishing';\nimport ModalSuccessfulPublish from './ModalSuccessfulPublish';\nexport type PublishModals = 'publish-prompt-save' | 'publish-edit-name' | 'publish-success' | 'publish-working' | 'publish-unknown-error' | 'publish-overwrite-experience-error' | null;\ntype Metadata = { \n    name: string;\n    description: string;\n};\ntype Props = AuthProps & { \n    name: string;\n    description: string;\n    onSubmitMetadata: (details: Metadata) => void;\n    onPublishAsync: (options?: SaveOptions) => Promise<void>;\n    currentModal: string | null;\n    onShowModal: (name: PublishModals) => void;\n    onHideModal: () => void;\n    id: undefined | string;\n    children: (options: { \n        onPublishAsync: (options?: SaveOptions) => Promise<void>;\n        isPublishing: boolean;\n    }) => React.ReactNode;\n};\ntype State = { \n    isPublishInProgress: boolean;\n    isPublishing: boolean;\n    hasShownEditNameDialog: boolean;\n};\nclass PublishManager extends React.Component<Props, State> {\n    state = {\n        isPublishInProgress: false, \n        isPublishing: false, \n        hasShownEditNameDialog: false\n    }\n    ;\n    _publishWithOptionsAsync = async (options: SaveOptions) => {\n    \n        this.setState({\n            isPublishing: true\n         })\n        try {\n            await this.props.onPublishAsync(options);\n        } \n        catch (e) {\n            if (/Experience .+ already exists/.test(e.message)) {\n                this.props.onShowModal('publish-overwrite-experience-error');\n            }\n            else {\n                this.props.onShowModal('publish-unknown-error');\n            }\n            throw e;\n        } \n        finally {\n            this.setState({\n                isPublishing: false\n             })\n        } \n    }\n    ;\n    _handleSaveToProfile = async () => {\n    \n        const isLoggedIn = Boolean(this.props.viewer);\n        if (isLoggedIn) {\n            // Show a spinner so we dismiss the auth modal\n            this.props.onShowModal('publish-working');\n            this._handlePublishAsync();\n        }\n        else {\n            window.location.href = getLoginHref({\n                saveToAccount: true\n             })\n            ;\n        }\n    }\n    ;\n    _handleSubmitMetadata = async (details: Metadata) => {\n    \n        // Save the new name and description, then publish the packi\n        this.props.onSubmitMetadata(details);\n        await this._handlePublishAsync();\n    }\n    ;\n    _handlePublishAsync = async (options: SaveOptions = {}) => {\n    \n        // When the publish flow starts, we set this so we know if we need to show the modals\n        this.setState({\n            isPublishInProgress: true\n         })\n        if (!this.props.name || (!isIntentionallyNamed(this.props.name) && !this.state.hasShownEditNameDialog)) {\n            this.props.onShowModal('publish-edit-name');\n            this.setState({\n                hasShownEditNameDialog: true\n             })\n        }\n        else {\n            await this._publishWithOptionsAsync(options);\n            this.props.onShowModal(this.props.viewer ? 'publish-success' : 'publish-prompt-save')\n        }\n    }\n    ;\n    _handlePublishAbort = () => {\n        // When publish flow ends, we don't need to show any modals\n        this.props.onHideModal();\n        // When publish flow ends, we don't need to show any modals\n        this.setState({\n            isPublishInProgress: false\n         })\n    };\n    render() {\n        const {\n            id, \n            viewer, \n            name, \n            description, \n            currentModal, \n            children\n         } = this.props;\n        const {\n            isPublishInProgress\n         } = this.state;\n        return  (\n            <React.Fragment\n            >\n                {\n                    children({\n                        onPublishAsync: this._handlePublishAsync, \n                        isPublishing: this.state.isPublishing\n                     })\n                }\n                <ModalEditTitleAndDescription \n                    visible={isPublishInProgress && currentModal === 'publish-edit-name'}\n                    title=\"Save your Packi\"\n                    action={this.state.isPublishing ? 'Saving…' : 'Save'}\n                    isWorking={this.state.isPublishing}\n                    name={name}\n                    description={description}\n                    onSubmit={this._handleSubmitMetadata}\n                    onDismiss={this._handlePublishAbort}\n                 />\n                <ModalPublishToProfile \n                    visible={isPublishInProgress && currentModal === 'publish-prompt-save'}\n                    packiUrl={id ? `${process.env.PACKI_SERVER_URL}/${id}` : undefined}\n                    onPublish={this._handleSaveToProfile}\n                    isPublishing={this.state.isPublishing}\n                    onDismiss={this._handlePublishAbort}\n                 />\n                <ModalSuccessfulPublish\n                 visible={isPublishInProgress && currentModal === 'publish-success'} viewer={viewer} onDismiss={this._handlePublishAbort} />\n                <ModalPublishUnknownError\n                 visible={isPublishInProgress && currentModal === 'publish-unknown-error'} onDismiss={this._handlePublishAbort} />\n                <ModalPublishing\n                 visible={isPublishInProgress && currentModal === 'publish-working'} onDismiss={this._handlePublishAbort} />\n                <ModalPublishOverwriteError \n                    visible={isPublishInProgress && currentModal === 'publish-overwrite-experience-error'}\n                    slug={name}\n                    username={viewer?.username}\n                    onEditName={() => \n                        \n                            this.props.onShowModal('publish-edit-name')\n                    }\n                    onDismiss={this._handlePublishAbort}\n                 />\n            </React.Fragment>\n            )\n        ;\n    }\n}\nexport default withAuth(PublishManager);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Avatar.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {c} from '../ThemeProvider';\n\nexport interface AvatarProps {\n    size: number;\n    source: string | null;\n}\n\ninterface RootStyleProps {\n}\ninterface ImageStyleProps {\n    size: number;\n}\nconst StyledRoot = styled.div<RootStyleProps>`\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    justify-content: center;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    stroke: ${props => c('text')};\n`\nconst StyledImage = styled.img<ImageStyleProps>`\n    width: ${props => props.size + \"px\"};\n    height: ${props => props.size + \"px\"};\n    -webkit-border-radius: ${props => (props.size / 2) + \"px\"};\n    -khtml-border-radius: ${props => (props.size / 2) + \"px\"};\n    -moz-border-radius: ${props => (props.size / 2) + \"px\"};\n    -o-border-radius: ${props => (props.size / 2) + \"px\"};\n    border-radius: ${props => (props.size / 2) + \"px\"};\n`\nexport const Avatar: FunctionComponent<AvatarProps> = ({\n    size, \n    source\n }) => \n\n     (\n    <StyledRoot\n    >\n        {\n            source ?  (\n                <StyledImage\n                 src={source} size={size} />\n                )\n             :  (\n                <svg \n                    width=\"20\"\n                    height=\"20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path \n                        d=\"M13.125 13.563c2.423-3.635 2.831-10.938-2.623-10.938-5.454 0-5.05 7.303-2.627 10.938-2.423 0-5.25 2.389-5.25 4.812h15.75c.004-2.423-2.827-4.813-5.25-4.813z\"\n                        strokeWidth=\"1.75\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                     />\n                </svg>\n                )\n            \n        }\n    </StyledRoot>\n    )\n\n;\nexport default Avatar;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Banner.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\nimport {c, s} from '../ThemeProvider';\n\nexport interface BannerProps {\n    visible: boolean;\n    className?: string;\n    type?: 'info' | 'success' | 'error';\n    children?: React.ReactNode;\n}\n\ntype BannerState = { \n    rendered: boolean;\n};\n\ninterface BannerStyleProps {\n    visible: boolean;\n    type?: 'info' | 'success' | 'error';\n}\nconst StyledRoot = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 0 10px;\n    z-index: 999;\n    text-align: center;\n    pointer-events: none;\n    \n`\nconst StyledBanner = styled.div<BannerStyleProps>`\n    display: inline-block;\n    margin: auto;\n    padding: 1em;\n    max-width: 100%;\n    background-color: ${props => props.type === 'success' ? c('success') : props.type === 'error' ? c('error') : c('primary')};\n    color: ${props => props.type === 'success' ? c('success-text') : props.type === 'error' ? c('error-text') : c('primary-text')};\n    -webkit-border-radius: 0 0 4px 4px;\n    -khtml-border-radius: 0 0 4px 4px;\n    -moz-border-radius: 0 0 4px 4px;\n    -o-border-radius: 0 0 4px 4px;\n    border-radius: 0 0 4px 4px;\n    transition-duration: 200ms;\n    pointer-events: ${props => props.visible ? \"auto\" : \"none\"};\n    -webkit-box-shadow: ${props => s('popover')};\n    -moz-box-shadow: ${props => s('popover')};\n    -o-box-shadow: ${props => s('popover')};\n    box-shadow: ${props => s('popover')};\n    -webkit-transform: ${props => props.visible ? \"translateY(0)\" : \"translateY(-100%)\"};\n    -ms-transition: ${props => props.visible ? \"translateY(0)\" : \"translateY(-100%)\"};\n    transform: ${props => props.visible ? \"translateY(0)\" : \"translateY(-100%)\"};\n`\n\nexport class Banner extends PureComponent<BannerProps, BannerState> {\n    \n    static getDerivedStateFromProps(props: BannerProps) {\n        if (props.visible) {\n            return {\n                    rendered: true\n                 };\n        }\n        return null;\n    }\n    \n    state = {\n        rendered: this.props.visible\n    }\n    ;\n    \n    componentDidUpdate(prevProps: BannerProps) {\n        if (this.props.visible !== prevProps.visible) {\n            clearTimeout(this._timer);\n            if (!this.props.visible) {\n                this._timer = setTimeout(() => \n                \n                    this.setState({\n                        rendered: false\n                     })\n                , 300)\n                ;\n            }\n        }\n    }\n    \n    _timer: any;\n    \n    render() {\n        if (!this.state.rendered) {\n            return null;\n        }\n        return  (\n            <StyledRoot\n            >\n                <StyledBanner\n                 visible={this.props.visible} type={this.props.type} className={this.props.className}>\n                    {this.props.children}\n                </StyledBanner>\n            </StyledRoot>\n            )\n        ;\n    }\n}\nexport default Banner;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ContextMenu.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\nimport ShortcutLabel from './ShortcutLabel';\n\nexport type Action = { \n    label: string;\n    handler: () => void;\n    disabled?: boolean;\n    combo?: number[];\n};\n\nexport type ContextMenuProps = { \n    innerRef?: React.Ref<HTMLUListElement>;\n    visible: boolean;\n    actions: (Action | undefined)[];\n    position?: { \n        pageX: number;\n        pageY: number;\n    } | null;\n    onHide: () => void;\n    className?: string;\n};\nconst BOTTOM_OFFSET = 35;\nconst MENU_ITEM_HEIGHT = 28;\n\nexport class ContextMenu extends React.PureComponent<ContextMenuProps> {\n    render() {\n        const {\n            visible, \n            position, \n            actions, \n            onHide, \n            className, \n            \n            // @ts-ignore\n            innerRef\n         } = this.props;\n        if (!visible) {\n            return null; \n        }\n        const shownActions = actions.filter(action => \n            \n                action\n            ) as Action[];\n        return  (\n            <ul\n             ref={innerRef} className={classnames(css(styles.menu), className)} style={position ? {\n                        position: 'fixed', \n                        top: Math.min(position.pageY, window.innerHeight - BOTTOM_OFFSET - shownActions.length * MENU_ITEM_HEIGHT), \n                        left: position.pageX, \n                        marginTop: -8\n                     } : {}}>\n                {\n                    shownActions.map(({\n                        label, \n                        handler, \n                        disabled, \n                        combo\n                     }: Action) => \n                    \n                         (\n                        <li\n                         key={label}>\n                            <button\n                             disabled={disabled} className={css(styles.item, disabled && styles.disabled)} onClick={() => {\n                                \n                                    handler();\n                                    onHide();\n                                }\n                            }>\n                                <div\n                                >\n                                    {label}\n                                </div>\n                                {\n                                    combo ?  (\n                                        <ShortcutLabel\n                                         combo={combo} className={css(styles.hint)} />\n                                        )\n                                     : null\n                                }\n                            </button>\n                        </li>\n                        )\n                    \n                    )\n                }\n            </ul>\n            )\n        ;\n    }\n}\nexport default React.forwardRef((props: ContextMenuProps, ref: React.Ref<HTMLUListElement>) => \n    \n         (\n        <ContextMenu\n         {...props} innerRef={ref} />\n        )\n    \n    )\nconst fadeIn = {\n    from: {\n        opacity: 0\n     }, \n    to: {\n        opacity: 1\n     }\n };\nconst styles = StyleSheet.create({\n    menu: {\n        zIndex: 10, \n        listStyle: 'none', \n        padding: 0, \n        borderRadius: 4, \n        borderStyle: 'solid', \n        boxShadow: s('popover'), \n        minWidth: 240, \n        animationName: fadeIn, \n        animationDuration: '0.083s', \n        animationTimingfunction: 'linear', \n        backgroundColor: c('content'), \n        border: `1px solid ${c('border')}`, \n        color: c('text')\n     }, \n    item: {\n        display: 'flex', \n        justifyContent: 'space-between', \n        appearance: 'none', \n        background: 'none', \n        border: 0, \n        outline: 0, \n        width: '100%', \n        padding: '16px 12px', \n        textAlign: 'left', \n        userSelect: 'none', \n        borderRadius: 2, \n        minHeight: 56, \n        fontSize: 16, \n        color: c('text'), \n        borderBottom: `1px solid ${c('border')}`, \n        marginBottom: '-1px', \n        ':hover': {\n            background: c('hover')\n         }\n     }, \n    disabled: {\n        pointerEvents: 'none', \n        opacity: 0.5\n     }, \n    hint: {\n        marginLeft: 24, \n        lineHeight: '24px'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\FooterButton.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\ntype FooterButtonProps = { \n    active?: boolean;\n    icon?: string;\n    children?: React.ReactNode;\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nexport function FooterButton({\n    active, \n    icon, \n    children, \n    onClick\n }: FooterButtonProps) {\n\n    return  (\n        <button\n         onClick={onClick} style={icon ? {\n                    backgroundImage: `url(${icon})`\n                 } : undefined} className={css(styles.button, children ? styles.buttonLabel : undefined, active && styles.active)}>\n            {children}\n        </button>\n        )\n    ;\n}\n\nexport default FooterButton;\n\nconst styles = StyleSheet.create({\n    button: {\n        position: 'relative', \n        border: 0, \n        outline: 0, \n        margin: 0, \n        height: 30, \n        padding: '0 16px', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: 'center right 8px', \n        ':active': {\n            backgroundColor: c('hover'), \n            color: c('soft')\n         }, \n        ':hover': {\n            backgroundColor: c('hover'), \n            color: c('soft')\n         }\n     }, \n    buttonLabel: {\n        '@media (min-width: 720px)': {\n            padding: '5px 32px 5px 8px'\n         }\n     }, \n    active: {\n        backgroundColor: c('hover'), \n        color: c('soft')\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\IconButton.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\n\nexport type IconButtonProps = { \n    type?: 'submit' | 'button';\n    disabled?: boolean;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    title: string;\n    label?: string;\n    responsive?: boolean;\n    children?: React.ReactNode;\n    small?: boolean;\n};\n\nexport function IconButton({\n    title, \n    label, \n    responsive, \n    children, \n    small, \n    ...rest\n }: IconButtonProps) {\n\n    return  (\n        <button\n         {...rest} className={css(styles.button, small && styles.small, rest.disabled && styles.disabled)}>\n            {children}\n            {\n                label ?  (\n                    <span\n                     className={css(styles.label, !children && styles.labelNoIcon, responsive && styles.responsive)}>\n                        {label}\n                    </span>\n                    )\n                 : null\n            }\n            <span\n             className={css(styles.phantom)}>\n                <span\n                 className={css(styles.tooltip)}>\n                    {title}\n                </span>\n            </span>\n        </button>\n        )\n    ;\n}\n\nexport default IconButton;\n\nconst styles = StyleSheet.create({\n    button: {\n        position: 'relative', \n        height: 40, \n        minWidth: 40, \n        margin: '0 8px', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        color: 'inherit', \n        padding: 0, \n        outline: 0, \n        border: 0, \n        borderRadius: 2, \n        whiteSpace: 'nowrap', \n        textDecoration: 'none', \n        fill: c('text'), \n        stroke: c('text'), \n        ':active': {\n            opacity: 0.8\n         }, \n        ':hover': {\n            cursor: 'pointer', \n            backgroundColor: c('hover')\n         }\n     }, \n    small: {\n        height: 32, \n        minWidth: 32, \n        margin: 0, \n        padding: '0 8px 0 0', \n        ':hover': {\n            backgroundColor: 'transparent'\n         }\n     }, \n    disabled: {\n        cursor: 'not-allowed', \n        pointerEvents: 'none', \n        opacity: 0.3\n     }, \n    phantom: {\n        position: 'absolute', \n        top: 0, \n        left: 0, \n        right: 0, \n        bottom: 0, \n        opacity: 0, \n        zIndex: 1, \n        ':hover': {\n            opacity: 1, \n            pointerEvents: 'auto'\n         }\n     }, \n    tooltip: {\n        position: 'absolute', \n        top: 'calc(100% + 4px)', \n        left: '50%', \n        transform: 'translateX(-50%)', \n        marginLeft: -2.5, \n        borderRadius: 2, \n        fontSize: 12, \n        padding: '4px 8px', \n        whiteSpace: 'nowrap', \n        pointerEvents: 'none', \n        boxShadow: s('popover'), \n        backgroundColor: c('content', 'dark'), \n        color: c('text', 'dark')\n     }, \n    label: {\n        margin: '0 12px', \n        color: c('text')\n     }, \n    labelNoIcon: {\n        margin: '0 12px 0 0'\n     }, \n    responsive: {\n        '@media (max-width: 960px)': {\n            display: 'none'\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\KeybindingsManager.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\n\nexport type KeybindingsManagerProps<T extends { \n    combo: number[];\n}> = { \n    bindings: { \n        [key: string]: T;\n    };\n    onTrigger: (type: string, binding: T) => void;\n};\n\nconst isMac = 'navigator' in global && /Mac/i.test(navigator.platform);\n\nexport const KeyMap = {\n    C: 67, \n    D: 68, \n    F: 70, \n    S: 83, \n    U: 85, \n    V: 86, \n    F2: 113, \n    Delete: 8, \n    Enter: 13, \n    Escape: 27, \n    Shift: 16, \n    Ctrl: 17, \n    Alt: 18, \n    Cmd: 91, \n    Tilde: 192, \n    Backslash: 220, \n    Meta: isMac ? 91 : 17\n };\n\nexport const isKeyCombo = (e: KeyboardEvent, combo: number[]) => \n\n    combo.every((code) => {\n    \n        switch (code) {\n            case KeyMap.Ctrl: {\n                return e.ctrlKey;\n            }\n            case KeyMap.Meta: {\n                return e.metaKey;\n            }\n            case KeyMap.Alt: {\n                return e.altKey;\n            }\n            default: {\n                return e.keyCode === code;\n            }\n        }\n    }\n    )\n;\n\nexport class KeybindingsManager<T extends { \n    combo: number[];\n}> extends React.PureComponent<KeybindingsManagerProps<T>> {\n    componentDidMount() {\n        document.addEventListener('keydown', this._handleKeydown);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this._handleKeydown);\n    }\n    _handleKeydown = (e: KeyboardEvent) => {\n        const {\n            bindings, \n            onTrigger\n         } = this.props;\n        for (const type in bindings) {\n            if (bindings.hasOwnProperty(type)) {\n                const binding = bindings[type];\n                if (isKeyCombo(e, binding.combo)) {\n                    e.preventDefault();\n                    onTrigger(type, binding);\n                    break;\n                }\n            }\n        }\n    };\n    render() {\n        return null;\n    }\n}\nexport default KeybindingsManager;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\LargeInput.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\nexport type LargeInputProps = { \n    value: string | undefined;\n    disabled?: boolean;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder?: string;\n    name?: string;\n    type?: string;\n    autoFocus?: boolean;\n    error?: Error | null;\n};\n\ntype State = { \n    focused: boolean;\n};\n\nexport class LargeInput extends React.Component<LargeInputProps, State> {\n    state = {\n        focused: true\n    }\n    ;\n    focus() {\n        this._input.current?.focus?.();\n    }\n    _handleFocus = () => \n        this.setState({\n            focused: true\n         });\n    _handleBlur = () => \n        this.setState({\n            focused: false\n         });\n    _input = React.createRef<HTMLInputElement>();\n    render() {\n        return  (\n            <div\n             className={css(styles.container)}>\n                <input \n                    ref={this._input}\n                    autoFocus={this.props.autoFocus}\n                    className={css(styles.input, this.props.error ? styles.error : styles.normal)}\n                    value={this.props.value}\n                    name={this.props.name}\n                    type={this.props.type}\n                    disabled={this.props.disabled}\n                    onChange={this.props.onChange}\n                    placeholder={this.props.placeholder}\n                    onFocus={this._handleFocus}\n                    onBlur={this._handleBlur}\n                 />\n                {\n                    this.state.focused && this.props.error ?  (\n                        <div\n                         className={css(styles.validation)}>\n                            {this.props.error.message}\n                        </div>\n                        )\n                     : null\n                }\n            </div>\n            )\n        ;\n    }\n}\n\nexport default LargeInput;\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative'\n     }, \n    input: {\n        outline: 0, \n        fontSize: 16, \n        borderRadius: 3, \n        padding: '12px 14px 12px 14px', \n        lineHeight: '22px', \n        width: '100%', \n        borderWidth: 1, \n        borderStyle: 'solid', \n        backgroundColor: c('content')\n     }, \n    normal: {\n        borderColor: c('border'), \n        ':focus': {\n            borderColor: c('selected')\n         }\n     }, \n    error: {\n        borderColor: c('error')\n     }, \n    validation: {\n        position: 'absolute', \n        backgroundColor: c('error'), \n        color: c('error-text'), \n        padding: '6px 12px', \n        borderRadius: 3, \n        marginTop: 8, \n        textAlign: 'left', \n        zIndex: 1, \n        ':before': {\n            content: '\"\"', \n            display: 'block', \n            position: 'absolute', \n            bottom: '100%', \n            width: 0, \n            height: 0, \n            borderLeft: '6px solid transparent', \n            borderRight: '6px solid transparent', \n            borderBottom: `6px solid ${c('error')}`\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\LargeTextArea.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport {c} from '../ThemeProvider';\n\nexport type LargeTextAreaProps = { \n    autoFocus?: boolean;\n    value: string | undefined;\n    name?: string;\n    minRows?: number;\n    placeholder?: string;\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nexport function LargeTextArea({\n    ...rest\n }: LargeTextAreaProps) {\n\n    return  (\n        <Textarea\n         className={css(styles.input)} {...rest} />\n        )\n    ;\n}\n\nexport default LargeTextArea;\n\nconst styles = StyleSheet.create({\n    input: {\n        outline: 0, \n        fontSize: 16, \n        borderRadius: 3, \n        padding: '12px 14px 12px 14px', \n        lineHeight: '22px', \n        border: `1px solid ${c('border')}`, \n        backgroundColor: c('content'), \n        width: '100%', \n        ':focus': {\n            borderColor: c('selected')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\LoadingText.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport * as React from 'react';\n\ntype Props = { \n    className?: string;\n    children?: React.ReactNode;\n    onClick?: () => void;\n};\n\nconst rotate = {\n    from: {\n        transform: 'rotate(0deg)'\n     }, \n    to: {\n        transform: 'rotate(360deg)'\n     }\n };\n\nconst LoadingText = ({\n    children, \n    className, \n    onClick\n }: Props) => \n\n     (\n    <div\n     className={classnames(css(styles.loading), className)} onClick={onClick}>\n        {children}\n    </div>\n    )\n\n;\n\nexport default LoadingText;\n\nconst styles = StyleSheet.create({\n    loading: {\n        ':before': {\n            display: 'inline-block', \n            content: '\"\"', \n            borderWidth: 2, \n            borderStyle: 'solid', \n            borderTopColor: 'rgba(255, 255, 255, 0.2)', \n            borderRightColor: 'rgba(255, 255, 255, 0.2)', \n            borderBottomColor: 'rgba(255, 255, 255, 0.2)', \n            borderLeftColor: 'rgba(255, 255, 255, 0.5)', \n            height: 16, \n            width: 16, \n            borderRadius: '50%', \n            marginLeft: '.5em', \n            marginRight: '1em', \n            verticalAlign: -3, \n            animationName: [\n                rotate\n            ], \n            animationDuration: '1s', \n            animationIterationCount: 'infinite', \n            animationTimingFunction: 'linear'\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\MenuButton.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\nimport FooterButton from './FooterButton';\n\nexport type MenuButtonProps = { \n    icon?: string;\n    label?: React.ReactNode;\n    content: React.ReactNode;\n};\n\nexport function MenuButton({\n    icon, \n    label, \n    content\n }: MenuButtonProps) {\n\n    const [active, setActive] = React.useState<boolean>(false);\n    const root = React.useRef<HTMLDivElement>(null);\n    React.useEffect(() => {\n    \n        const onClick = (e: MouseEvent) => {\n        \n            if (e.target === root.current || root.current?.contains?.(e.target as Node)) {\n                return ;\n            }\n            setActive(false);\n        }\n        ;\n        document.addEventListener('click', onClick);\n        return () => \n            \n                document.removeEventListener('click', onClick)\n        ;\n    }\n    , [])\n    return  (\n        <div\n         ref={root} className={css(styles.panelContainer)}>\n            <FooterButton\n             icon={icon} active={active} onClick={() => \n                \n                    setActive(value => \n                    \n                        !value\n                    \n                    )\n            }>\n                {label}\n            </FooterButton>\n            {\n                active ?  (\n                    <div\n                     className={css(styles.pane)}>\n                        {content}\n                    </div>\n                    )\n                 : null\n            }\n        </div>\n        )\n    ;\n}\n\nexport default MenuButton;\n\nconst styles = StyleSheet.create({\n    panelContainer: {\n        position: 'relative', \n        display: 'flex', \n        alignItems: 'center'\n     }, \n    pane: {\n        display: 'flex', \n        alignItems: 'stretch', \n        justifyContent: 'flex-end', \n        flexDirection: 'column', \n        position: 'absolute', \n        right: 0, \n        bottom: 32, \n        minWidth: 160, \n        padding: '8px 0', \n        borderWidth: 1, \n        borderRadius: 3, \n        borderStyle: 'solid', \n        backgroundColor: c('content'), \n        borderColor: c('border'), \n        boxShadow: s('popover'), \n        color: c('text'), \n        zIndex: -1\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Modal.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nexport interface ModalProps {\n    visible: boolean;\n    onDismiss?: () => void;\n    children?: React.ReactNode;\n}\n\ntype ModalState = { \n    rendered: boolean;\n    initial: boolean;\n};\n\ninterface RootStyleProps {\n    initial: boolean;\n    visible: boolean;\n}\nconst StyledRoot = styled.div<RootStyleProps>`\n    -webkit-font-smoothing: antialiased;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    color: #fff;\n    z-index: 999;\n    transition-property: opacity;\n    transition-duration: 200ms;\n    background-color: ${props => props.initial ? \"rgba(24, 29, 37, 0.8)\" : \"inherit\"};\n    opacity: ${props => props.visible ? \"1\" : \"0\"};\n    pointer-events: ${props => props.visible ? \"auto\" : \"none\"};\n`\nconst StyledContent = styled.div`\n    width: 100%;\n    height: 100%;\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    justify-content: center;\n    \n`\n\nexport class Modal extends PureComponent<ModalProps, ModalState> {\n    \n    static getDerivedStateFromProps(props: ModalProps) {\n        return props.visible ? {\n                    rendered: true, \n                    initial: false\n                 } : null;\n    }\n    \n    state = {\n        rendered: this.props.visible, \n        initial: !this.props.visible\n    }\n    ;\n    \n    componentDidMount() {\n        document.body.appendChild(this._container);\n        document.addEventListener('keydown', this._handleKeyDown);\n    }\n    \n    componentDidUpdate(prevProps: ModalProps) {\n        if (this.props.visible !== prevProps.visible) {\n            clearTimeout(this._timer);\n            if (!this.props.visible) {\n                this._timer = setTimeout(() => \n                \n                    this.setState({\n                        rendered: false\n                     })\n                , 300)\n                ;\n            }\n        }\n    }\n    \n    componentWillUnmount() {\n        document.body.removeChild(this._container);\n        document.removeEventListener('keydown', this._handleKeyDown);\n    }\n    \n    _container = document.createElement('div');\n    \n    _content = React.createRef<HTMLDivElement>();\n    \n    _timer: any;\n    \n    _handleDismiss = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (this._content.current && this._content.current !== e.target && this._content.current.contains(e.target as Node)) {\n            return ;\n        }\n        this.props.onDismiss?.();\n    };\n    \n    _handleKeyDown = (e: KeyboardEvent) => {\n        if (e.keyCode === 27 && this.props.visible) {\n            // Esc was pressed\n            e.preventDefault();\n            this.props.onDismiss?.();\n        }\n    };\n    \n    render() {\n        return ReactDOM.createPortal(\n            <StyledRoot\n             initial={this.state.initial} visible={this.props.visible} onClick={this._handleDismiss}>\n                <StyledContent\n                 ref={this._content}>\n                    {\n                        this.state.rendered ? this.props.children : null\n                    }\n                </StyledContent>\n            </StyledRoot>\n            , this._container);\n    }\n}\nexport default Modal;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ModalDialog.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {ModalSheet} from './ModalSheet';\nimport {c} from '../ThemeProvider';\n\nexport interface ModalDialogProps {\n    visible: boolean;\n    className?: string;\n    onDismiss?: () => void;\n    title?: string;\n    autoSize?: boolean;\n    children: React.ReactNode;\n}\n\ninterface TitleStyleProps {\n    title?: string;\n}\ninterface SheetStyleProps {\n    autoSize?: boolean;\n}\nconst StyledModalSheet = styled(ModalSheet)<SheetStyleProps>`\n    \n`\nconst StyledTitle = styled.div<TitleStyleProps>`\n    height: 72px;\n    font-size: 24px;\n    width: 100%;\n    line-height: 24px;\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex-shrink: 0;\n    -ms-flex-negative: 0;\n    flex-shrink: 0;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    justify-content: center;\n    border-bottom: ${props => \"1px solid \" + c('border')};\n`\nconst StyledContent = styled.div<TitleStyleProps>`\n    padding: ${props => props.title ? \"16px 24px 24px 24px\" : \"24px\"};\n    overflow: 'auto';\n`\nexport const ModalDialog: FunctionComponent<ModalDialogProps> = ({\n    visible, \n    className, \n    onDismiss, \n    title, \n    autoSize, \n    children\n }) => \n\n     (\n    <StyledModalSheet \n        autoSize={autoSize}\n        className={className}\n        visible={visible}\n        onDismiss={onDismiss}\n    >\n        {\n            title ?  (\n                <StyledTitle\n                 title={title}>\n                    {title}\n                </StyledTitle>\n                )\n             : null\n        }\n        <StyledContent\n         title={title}>\n            {children}\n        </StyledContent>\n    </StyledModalSheet>\n    )\n\n;\nexport default ModalDialog;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ModalSheet.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {ThemeProvider, c, s} from '../ThemeProvider';\nimport Modal from './Modal';\n\nexport interface ModalSheetProps {\n    visible: boolean;\n    className?: string;\n    onDismiss?: () => void;\n    children: React.ReactNode;\n}\n\nconst StyledThemeProvider = styled(ThemeProvider)`\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex-direction: column;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    position: relative;\n    text-align: center;\n    -webkit-border-radius: 4px;\n    -khtml-border-radius: 4px;\n    -moz-border-radius: 4px;\n    -o-border-radius: 4px;\n    border-radius: 4px;\n    -webkit-box-shadow: ${props => s('popover')};\n    -moz-box-shadow: ${props => s('popover')};\n    -o-box-shadow: ${props => s('popover')};\n    box-shadow: ${props => s('popover')};\n    background-color: ${props => c('content')};\n    color: ${props => c('text')};\n`\nconst StyledClose = styled.button`\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -webkit-border-radius: 1em;\n    -khtml-border-radius: 1em;\n    -moz-border-radius: 1em;\n    -o-border-radius: 1em;\n    border-radius: 1em;\n    outline: 0;\n    padding: 0;\n    position: absolute;\n    right: -1em;\n    top: -1em;\n    width: 2em;\n    height: 2em;\n    background: ${props => c('text')};\n    border: ${props => \"2px solid \" + c('content')};\n    -webkit-box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    -moz-box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    -o-box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    color: ${props => c('content')};\n    font-size: 1em;\n    font-weight: bold;\n    text-align: center;\n`\nexport const ModalSheet: FunctionComponent<ModalSheetProps> = ({\n    visible, \n    className, \n    onDismiss, \n    children\n }) => \n\n     (\n    <Modal\n     visible={visible} onDismiss={onDismiss}>\n        <StyledThemeProvider\n         className={className}>\n            {\n                onDismiss ?  (\n                    <StyledClose\n                     onClick={onDismiss} data-test-id=\"modal-close\">\n                        ✕\n                    </StyledClose>\n                    )\n                 : null\n            }\n            {children}\n        </StyledThemeProvider>\n    </Modal>\n    )\n\n;\nexport default ModalSheet;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Popover.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\n\nexport type PopoverProps = { \n    children: React.ReactNode;\n    content: React.ReactNode;\n};\n\ntype State = { \n    visible: boolean;\n};\n\nexport class Popover extends React.PureComponent<PopoverProps, State> {\n    state = {\n        visible: false\n    }\n    ;\n    componentDidMount() {\n        document.addEventListener('click', this._handleDocumentClick);\n        document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click', this._handleDocumentClick);\n        document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    _handleDocumentContextMenu = () => {\n        if (this.state.visible) {\n            this._hidePopover();\n        }\n    };\n    _handleDocumentClick = (e: MouseEvent) => {\n        if (this.state.visible && (e.target === this._anchor.current || e.target === this._popover.current || this._popover.current?.contains?.(e.target as Node))) {\n            return ;\n        }\n        this._hidePopover();\n    };\n    _togglePopover = () => {\n        if (!this.state.visible) {\n            const popover = this._popover.current?.getBoundingClientRect?.() ?? {};\n            \n            // @ts-ignore\n            const anchor = this._anchor.current?.getBoundingClientRect?.() ?? {}; \n            \n            // @ts-ignore\n            const diff = (popover.width - 10) / 2 - anchor.left; \n            if (this._popover.current && this._arrow.current) {\n                if (diff > 0) {\n                    this._popover.current.style.left = `${diff + 5}px`;\n                    this._arrow.current.style.left = \n                        // @ts-ignore\n                        `${anchor.left - anchor.width / 2 + 10}px`;\n                }\n                else {\n                    this._popover.current.style.left = '5px'; \n                    this._arrow.current.style.left = '50%';\n                }\n            }\n        }\n        this.setState((state) => \n        \n            ({\n                visible: !state.visible\n             })\n        )\n    };\n    _hidePopover = () => \n        this.setState({\n            visible: false\n         });\n    _anchor = React.createRef<HTMLElement>();\n    _arrow = React.createRef<HTMLSpanElement>();\n    _popover = React.createRef<HTMLDivElement>();\n    render() {\n        const {\n            children, \n            content\n         } = this.props;\n        return  (\n            <div\n             className={css(styles.container)}>\n                {\n                    React.cloneElement(// @ts-ignore\n                    React.Children.only(children), {\n                        ref: this._anchor, \n                        onClick: this._togglePopover\n                     })\n                }\n                <div\n                 ref={this._popover} className={css(styles.popover, this.state.visible ? styles.visible : styles.hidden)}>\n                    <span\n                     ref={this._arrow} className={css(styles.arrow)} />\n                    {content}\n                </div>\n            </div>\n            )\n        ;\n    }\n}\n\nexport default Popover;\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative', \n        backgroundColor: 'inherit'\n     }, \n    popover: {\n        position: 'absolute', \n        top: '100%', \n        margin: 12, \n        width: '18em', \n        borderRadius: 3, \n        zIndex: 99, \n        backgroundColor: c('content'), \n        border: `1px solid ${c('border')}`, \n        color: 'inherit', \n        transition: 'transform .2s, opacity .2s', \n        boxShadow: `${s('popover')}, 0 0 3px rgba(0, 0, 0, 0.08)`\n     }, \n    arrow: {\n        position: 'absolute', \n        height: 16, \n        width: 16, \n        top: -9, \n        transform: 'translateX(-50%) rotate(45deg)', \n        backgroundColor: 'inherit', \n        borderTopLeftRadius: 4, \n        boxShadow: '-.5px -.5px 0 rgba(0, 0, 0, .12)', \n        border: 0\n     }, \n    visible: {\n        opacity: 1, \n        transform: 'translateX(-50%) translateY(0)'\n     }, \n    hidden: {\n        opacity: 0, \n        pointerEvents: 'none', \n        transform: 'translateX(-50%) translateY(-4px)'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ResizablePane.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\n\ntype Props = { \n    inverted?: boolean;\n    direction: 'horizontal' | 'vertical';\n    children?: React.ReactNode;\n    className?: string;\n};\n\ntype State = { \n    resizing: boolean;\n    initialPosition: { \n        pageX: number;\n        pageY: number;\n    } | null;\n    initialWidth: number;\n    initialHeight: number;\n};\n\nexport default class ResizablePane extends React.PureComponent<Props, State> {\n        state: State = {\n            resizing: false, \n            initialPosition: null, \n            initialWidth: 0, \n            initialHeight: 0\n        }\n        ;\n        componentDidMount() {\n            // @ts-ignore\n            // @ts-ignore\n            document.addEventListener('mouseup', this._handleMouseUp);\n            // @ts-ignore\n            document.addEventListener('mousemove', this._handleMouseMove);\n        }\n        componentWillUnmount() {\n            // @ts-ignore\n            // @ts-ignore\n            document.removeEventListener('mouseup', this._handleMouseUp);\n            // @ts-ignore\n            document.removeEventListener('mousemove', this._handleMouseMove);\n        }\n        _handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!this._pane.current) {\n                return ;\n            }\n            const style = getComputedStyle(this._pane.current);\n            this.setState({\n                resizing: true, \n                initialPosition: {\n                    pageX: e.pageX, \n                    pageY: e.pageY\n                 }, \n                initialWidth: parseFloat(style.width || '0'), \n                initialHeight: parseFloat(style.height || '0')\n             })\n        };\n        _handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n            if (this.state.resizing) {\n                e.preventDefault();\n                this.setState({\n                    resizing: false, \n                    initialPosition: null, \n                    initialWidth: 0, \n                    initialHeight: 0\n                 })\n            }\n        };\n        _handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n            const {\n                direction, \n                inverted\n             } = this.props;\n            const {\n                resizing, \n                initialPosition, \n                initialWidth, \n                initialHeight\n             } = this.state;\n            if (resizing && initialPosition) {\n                e.preventDefault();\n                let style;\n                if (direction === 'horizontal') {\n                    const delta = e.pageX - initialPosition.pageX;\n                    style = `width: ${initialWidth + ((inverted ? -delta : delta))}px !important;`;\n                }\n                else {\n                    const delta = initialPosition.pageY - e.pageY;\n                    style = `height: ${initialHeight + ((inverted ? -delta : delta))}px !important`;\n                }\n                this._pane.current?.setAttribute?.('style', style);\n            }\n        };\n        _pane = React.createRef<HTMLDivElement>();\n        render() {\n            const {\n                direction, \n                inverted, \n                className, \n                children\n             } = this.props;\n            return  (\n                <div\n                 ref={this._pane} className={`${css(styles.container)} ${className ?? ''}`}>\n                    {children}\n                    <div\n                     className={css(styles.handle, direction === 'horizontal' ? styles.horizontal : styles.vertical, direction === 'horizontal' ? inverted ? styles.horizontalInverted : styles.horizontalNormal : inverted ? styles.verticalInverted : styles.verticalNormal)} onMouseDown={this._handleMouseDown} onMouseUp={this._handleMouseUp} />\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative'\n     }, \n    handle: {\n        position: 'absolute', \n        zIndex: 1\n     }, \n    horizontal: {\n        top: 0, \n        bottom: 0, \n        width: 12, \n        cursor: 'col-resize'\n     }, \n    vertical: {\n        left: 0, \n        right: 0, \n        height: 12, \n        cursor: 'row-resize'\n     }, \n    horizontalNormal: {\n        right: -12\n     }, \n    horizontalInverted: {\n        left: -12\n     }, \n    verticalNormal: {\n        top: -12\n     }, \n    verticalInverted: {\n        bottom: -12\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ShortcutLabel.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {css, StyleSheet} from 'aphrodite';\nimport classnames from 'classnames';\nimport findKey from 'lodash/findKey';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\nimport {KeyMap} from './KeybindingsManager';\n\nexport type ShortcutLabelProps = { \n    combo: number[];\n    className?: string;\n    boxed?: boolean;\n};\n\ntype KeyName =  keyof typeof KeyMap;\n\nconst isMac = 'navigator' in global && /Mac/i.test(navigator.platform);\n\nconst KeyLabels: Partial<{[key in KeyName] : string}> = {\n    Cmd: '⌘', \n    Delete: '⌫', \n    Enter: '↩', \n    Shift: '⇧', \n    Ctrl: isMac ? '⌃' : 'Ctrl', \n    Alt: isMac ? '⌥' : 'Alt', \n    Backslash: '\\\\', \n    Tilde: '`'\n };\n\nexport function ShortcutLabel({\n    combo, \n    className, \n    boxed=false\n }: ShortcutLabelProps):  any {\n\n    return  (\n        <kbd\n         className={classnames(css(styles.shortcutLabel), boxed && css(styles.boxedShortcut), className)}>\n            {\n                combo.map((code) => {\n                \n                    \n                    // @ts-ignore\n                    const name = findKey(KeyMap, c =>  \n                        c === code\n                    );\n                    \n                    if (name && KeyLabels[name as KeyName]) {\n                        return KeyLabels[name as KeyName];\n                    }\n                    else {\n                        return name;\n                    }\n                }\n                ).join(isMac ? '' : '+')\n                \n            }\n        </kbd>\n        )\n    ;\n}\n\nexport default ShortcutLabel;\n\nconst styles = StyleSheet.create({\n    shortcutLabel: {\n        color: 'inherit', \n        fontFamily: 'var(--font-monospace)', \n        fontSize: '90%', \n        opacity: 0.5, \n        boxShadow: `none`, \n        display: 'inline-block', \n        lineHeight: 'initial'\n     }, \n    boxedShortcut: {\n        padding: '0.2rem 0.4rem', \n        border: `1px solid ${c(`border`)}`, \n        borderBottomWidth: 2, \n        borderRadius: 3, \n        opacity: 0.66\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Spinner.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {css, StyleSheet} from 'aphrodite';\nimport * as React from 'react';\nimport {usePreferences} from '../../features/preferences/index';\n\nexport type SpinnerProps = { \n    rgba?: { \n        red: number;\n        green: number;\n        blue: number;\n        alpha: number;\n    };\n    segments?: number;\n    segmentWidth?: number;\n    segmentLength?: number;\n    spacing?: number;\n    fadeTo?: number;\n    fadeSteps?: number;\n};\n\nexport function Spinner({\n    rgba, \n    segments=12, \n    segmentWidth=2, \n    segmentLength=6, \n    spacing=4, \n    fadeTo=31 / 98, \n    fadeSteps=6\n }: SpinnerProps) {\n\n    const [prefs] = usePreferences();\n    const {\n        red, \n        green, \n        blue, \n        alpha\n     } = rgba !== undefined ? rgba : prefs.theme === 'dark' ? {\n                red: 255, \n                green: 255, \n                blue: 255, \n                alpha: 0.5\n             } : {\n                red: 70, \n                green: 48, \n                blue: 235, \n                alpha: 1\n             };\n    const innerRadius = segmentWidth * 2 + spacing;\n    const opacityDelta = (1 - fadeTo) / fadeSteps;\n    const lines = [];\n    for (let ii = 0; ii < segments; ii++) {\n        const opacity = 1 - Math.min(ii, fadeSteps) * opacityDelta;\n        const rotation = (-ii * 360) / segments;\n        lines.push(\n        <line \n            key={ii}\n            x1=\"0\"\n            y1={innerRadius}\n            x2=\"0\"\n            y2={innerRadius + segmentLength}\n            style={{\n                    opacity\n                 }}\n            transform={`rotate(${rotation})`}\n         />\n        )\n    }\n    const rgbaColor = `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n    const radius = innerRadius + segmentLength + Math.ceil(segmentWidth / 2);\n    return  (\n        <svg\n         className={css(styles.indicator)} width={radius * 2} height={radius * 2}>\n            <g \n                stroke={rgbaColor}\n                strokeWidth={segmentWidth}\n                strokeLinecap=\"round\"\n                transform={`translate(${radius}, ${radius})`}\n            >\n                {lines}\n            </g>\n        </svg>\n        )\n    ;\n}\n\nconst spinKeyframes = {\n    from: {\n        transform: 'rotate(0deg)'\n     }, \n    to: {\n        transform: 'rotate(360deg)'\n     }\n };\n\nexport default Spinner;\n\nconst styles = StyleSheet.create({\n    indicator: {\n        animationDuration: '1s', \n        animationIterationCount: 'infinite', \n        animationName: spinKeyframes, \n        animationTimingFunction: 'steps(12)'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Toast.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ThemeProvider, c, s} from '../ThemeProvider';\n\nexport type ToastProps = { \n    label: React.ReactNode;\n    timeout?: number;\n    persistent?: boolean;\n    actions: { \n        label: string;\n        action?: () => void;\n        primary?: boolean;\n    }[];\n    onDismiss?: () => void;\n};\n\ntype State = { \n    dismissing: boolean;\n};\n\nconst TOAST_GROUP_ID = '__toast_group__container';\n\nexport class Toast extends React.Component<ToastProps, State> {\n    static defaultProps = {\n        timeout: 5000\n    }\n    ;\n    state = {\n        dismissing: false\n    }\n    ;\n    componentDidMount() {\n        let group = document.getElementById(TOAST_GROUP_ID);\n        if (!group) {\n            group = document.createElement('div');\n            group.id = TOAST_GROUP_ID;\n            Object.assign(group.style, {\n                position: 'fixed', \n                bottom: '3em', \n                left: '1em', \n                zIndex: '999'\n             })\n            document.body.appendChild(group);\n        }\n        group.appendChild(this._container);\n        if (this.props.persistent) {\n            this._scheduleDismiss();\n        }\n    }\n    componentWillUnmount() {\n        const group = document.getElementById(TOAST_GROUP_ID);\n        if (group) {\n            group.removeChild(this._container);\n        }\n        this._cancelDismiss();\n    }\n    _container = document.createElement('div');\n    _timer: any;\n    _scheduleDismiss = () => \n        this._timer = setTimeout(this._handleDismiss, this.props.timeout);\n    _cancelDismiss = () => {\n        this.setState({\n            dismissing: false\n         })\n        clearTimeout(this._timer);\n    };\n    _handleDismiss = () => {\n        this.setState({\n            dismissing: true\n         })\n        this._timer = setTimeout(() => \n        \n            this.props.onDismiss?.()\n        , 400)\n        ;\n    };\n    render() {\n        const props = this.props.persistent ? {} : {\n                onMouseEnter: this._cancelDismiss, \n                onMouseLeave: this._scheduleDismiss\n             };\n        return ReactDOM.createPortal(\n            <ThemeProvider\n             {...props} style={styles.toast} className={css(this.state.dismissing ? styles.dismissing : styles.appearing)}>\n                <div\n                 className={css(styles.label)}>\n                    {this.props.label}\n                </div>\n                {\n                    this.props.actions.map((action) => \n                    \n                         (\n                        <button\n                         key={action.label} className={css(styles.button)} onClick={action.action ?? this._handleDismiss}>\n                            {action.label}\n                        </button>\n                        )\n                    \n                    )\n                }\n            </ThemeProvider>\n            , this._container);\n    }\n}\n\nconst fadeIn = {\n    from: {\n        opacity: 0\n     }, \n    to: {\n        opacity: 1\n     }\n };\n\nconst fadeOut = {\n    from: {\n        opacity: 1\n     }, \n    to: {\n        opacity: 0\n     }\n };\n\nexport default Toast;\n\nconst styles = StyleSheet.create({\n    toast: {\n        display: 'flex', \n        margin: '1em', \n        padding: '0 .75em', \n        borderRadius: 3, \n        border: `1px solid ${c('border')}`, \n        boxShadow: s('popover'), \n        minWidth: '27em', \n        whiteSpace: 'nowrap', \n        backgroundColor: c('content'), \n        color: c('text')\n     }, \n    appearing: {\n        animationName: fadeIn, \n        animationDuration: '250ms', \n        opacity: 1\n     }, \n    dismissing: {\n        animationName: fadeOut, \n        animationDuration: '400ms', \n        opacity: 0\n     }, \n    label: {\n        flex: 1, \n        minWidth: 0, \n        overflow: 'hidden', \n        textOverflow: 'ellipsis', \n        padding: '.75em'\n     }, \n    button: {\n        appearance: 'none', \n        background: 'transparent', \n        color: c('primary'), \n        border: '0', \n        textTransform: 'uppercase', \n        fontSize: '.9em', \n        fontWeight: 'bold', \n        padding: '1em', \n        outline: 0, \n        ':hover': {\n            backgroundColor: c('hover')\n         }, \n        ':active': {\n            backgroundColor: c('hover')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ToggleSwitch.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\nexport type ToggleSwitchProps = { \n    checked: boolean;\n    label: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    className?: string;\n};\n\nexport function ToggleSwitch(props: ToggleSwitchProps) {\n\n    return  (\n        <label\n         className={classnames(css(styles.container), props.className)}>\n            <span\n             className={css(styles.label)}>\n                {props.label}\n            </span>\n            <span\n             className={css(styles.switch, props.checked ? styles.active : styles.inactive)} />\n            <input \n                type=\"checkbox\"\n                checked={props.checked}\n                onChange={props.onChange}\n                className={css(styles.check)}\n             />\n        </label>\n        )\n    ;\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        alignItems: 'center', \n        margin: 8, \n        cursor: 'pointer', \n        whiteSpace: 'nowrap'\n     }, \n    switch: {\n        display: 'inline-block', \n        verticalAlign: -4, \n        width: 36, \n        height: 20, \n        borderRadius: 12, \n        border: `1px solid ${c('border')}`, \n        backgroundColor: c('background'), \n        ':before': {\n            content: '\"\"', \n            display: 'inline-block', \n            height: 14, \n            width: 14, \n            borderRadius: 7, \n            margin: 2, \n            transition: '.2s', \n            transform: 'translateX(0)'\n         }\n     }, \n    inactive: {\n        ':before': {\n            transform: 'translateX(0)', \n            backgroundColor: c('soft')\n         }\n     }, \n    active: {\n        ':before': {\n            transform: 'translateX(16px)', \n            backgroundColor: c('primary')\n         }\n     }, \n    check: {\n        display: 'none'\n     }, \n    label: {\n        flex: 1, \n        padding: '0 .5em', \n        fontWeight: 'normal'\n     }\n });\nexport default ToggleSwitch;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\WebFrame.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\nexport type WebFrameProps = { \n    previewURL: string;\n};\n\nexport function WebFrame({\n    previewURL\n }: Props) {\n\n    return  (\n        <div\n         className={css(styles.container)}>\n            <iframe\n             src={previewURL} allow=\"geolocation; camera; microphone\" className={css(styles.frame)} />\n        </div>\n        )\n    ;\n}\n\nexport default WebFrame;\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative', \n        display: 'flex', \n        flex: 1, \n        width: '100%', \n        height: '100%'\n     }, \n    frame: {\n        position: 'relative', \n        width: '100%', \n        height: '100%', \n        border: 0, \n        zIndex: 1, \n        backgroundColor: c('content', 'light')\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\EditorForm.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport classnames from 'classnames';\nimport {Form, withStatus, withValidation} from './index';\nimport {ThemeName, withThemeName} from '../preferences';\nimport LargeInput from '../../components/widgets/LargeInput';\nimport {c} from '../../components/ThemeProvider';\nimport {FormField} from './types';\n\nfunction validationOk(value: string):  Error | null {\n\n    return null;\n}\n\nexport type EditFormProps = { \n    visible: boolean;\n    title: string;\n    action: string;\n    fields: { \n        [key: string]: FormField;\n    };\n    className?: string;\n    onSubmit: (details: { \n        [key: string]: string;\n    }) => void;\n    onDismiss: () => void;\n};\ntype Props = EditFormProps & { \n    classes: any;\n    theme: ThemeName;\n};\ntype State = { \n    values?: { \n        [key: string]: any;\n    };\n    visible: boolean;\n};\nfunction stateDefaultValues(fields: { \n    [key: string]: FormField;\n}):  { \n    [key: string]: string;\n} {\n\n    const ret: { \n        [key: string]: string;\n    } = {};\n    Object.keys(fields).map(k => \n    \n        ret[k] = fields[k].default\n    )\n    return ret;\n}\nfunction optionsSelected(options: { \n    label: string;\n    value: string;\n}[], value: string):  any {\n\n    const selected = options.find(option => \n    \n        option.value === value\n    );\n    return selected ? selected.value : undefined;\n}\n\n// @ts-ignore\nconst SubmitButton = withStatus(Fab); \n\n// @ts-ignore\nconst ValidatedInput = withValidation(TextField); \nclass EditorForm extends React.Component<Props, State> {\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (state.visible !== props.visible) {\n            if (props.visible) {\n                return {\n                        visible: props.visible, \n                        values: stateDefaultValues(props.fields)\n                     };\n            }\n            else {\n                return {\n                        visible: props.visible\n                     };\n            }\n        }\n        return null;\n    }\n    state = {\n        visible: this.props.visible, \n        values: stateDefaultValues(this.props.fields)\n    }\n    ;\n    _handleSubmit = () => \n    \n        this.props.onSubmit(this.state.values)\n    ;\n    render() {\n        \n        // console.log('EditForm.state.values', this.state.values);\n        const {\n            classes, \n            visible, \n            title, \n            action, \n            fields, \n            theme, \n            className, \n            onDismiss\n         } = this.props;\n        \n        // console.log('EditForm.state.values', this.state.values);\n        return visible ?  (\n                <div\n                 className={classes.container}>\n                    <div\n                     className={classnames(css(styles.modal, theme === 'dark' ? styles.contentDark : styles.contentLight), className)}>\n                        <div\n                         className={classes.title}>\n                            <Typography\n                             variant=\"h6\">\n                                {title}\n                            </Typography>\n                        </div>\n                        <Form\n                         onSubmit={this._handleSubmit}>\n                            {\n                                Object.keys(fields).map((k, i) => {\n                                \n                                    const field = fields[k];\n                                    const value = this.state.values[k];\n                                    return ((([\n                                            'text', \n                                            'checkbox'\n                                        ].indexOf(field.type)) > -1\n                                        ) ?  (\n                                            <div\n                                             key={i} className={classes.fieldContainer}>\n                                                <ValidatedInput \n                                                    \n                                                    // @ts-ignore\n                                                    autoFocus\n                                                    type={field.type}\n                                                    className={classes.textField}\n                                                    margin=\"normal\"\n                                                    label={field.label}\n                                                    value={value}\n                                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>  \n                                                            this.setState({\n                                                                values: {\n                                                                    ...this.state.values, \n                                                                    [k]: e.target.value\n                                                                 }\n                                                             })\n                                                    }\n                                                    placeholder={field.label}\n                                                    validate={field.onValidate || validationOk}\n                                                 />\n                                            </div>\n                                            )\n                                         : field.type === 'select' ?  (\n                                                <div\n                                                 key={i} className={classes.fieldContainer}>\n                                                    <ValidatedInput \n                                                        \n                                                        // @ts-ignore\n                                                        select\n                                                        className={classes.textField}\n                                                        label={field.label}\n                                                        SelectProps={{ MenuProps: { className: classes.menu  }  }\n                                                        }\n                                                        helperText={field.helperText}\n                                                        margin=\"normal\"\n                                                        value={value}\n                                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n                                                            \n                                                                // console.log('onChange', k, e.target.value);\n                                                                this.setState({\n                                                                    values: {\n                                                                        ...this.state.values, \n                                                                        [k]: e.target.value\n                                                                     }\n                                                                 })\n                                                        }\n                                                        placeholder={field.label}\n                                                        validate={field.onValidate || validationOk}\n                                                    >\n                                                        {\n                                                            field.options && field.options.map((option) => \n                                                            \n                                                                 (\n                                                                <MenuItem\n                                                                 key={option.value} value={option.value}>\n                                                                    {option.label}\n                                                                </MenuItem>\n                                                                )\n                                                            \n                                                            )\n                                                        }\n                                                    </ValidatedInput>\n                                                </div>\n                                                )\n                                             : null);\n                                }\n                                )\n                            }\n                            <div\n                             className={css(styles.buttons)}>\n                                <div\n                                 className={classes.button}>\n                                    <SubmitButton\n                                    \n                                    // @ts-ignore\n                                     type=\"submit\" color=\"primary\" variant=\"extended\">\n                                        {action}\n                                    </SubmitButton>\n                                </div>\n                                <div\n                                 className={classes.button}>\n                                    <Fab \n                                        \n                                        // @ts-ignore\n                                        type=\"button\"\n                                        color=\"secondary\"\n                                        variant=\"extended\"\n                                        onClick={onDismiss}\n                                    >\n                                        Cancel\n                                    </Fab>\n                                </div>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n                )\n             : null;\n    }\n}\nconst styles = StyleSheet.create({ title: { height: 72,  fontSize: 24,  width: '100%',  lineHeight: '24px',  display: 'flex',  flexShrink: 0,  alignItems: 'center',  justifyContent: 'center',  boxShadow: '0 1px 0 rgba(36, 44, 58, 0.1)'  },  subtitle: { fontSize: 16,  fontWeight: 500,  padding: 0,  lineHeight: '22px',  margin: '16px 0 6px 0'  },  buttons: { margin: '20px 0 0 0',  display: 'flex',  justifyContent: 'space-around'  },  caption: { marginTop: 24,  fontSize: '16px',  lineHeight: '22px',  textAlign: 'center'  },  link: { cursor: 'pointer',  color: c('primary'),  textDecoration: 'underline'  },  modal: { display: 'flex',  flexDirection: 'column',  position: 'relative',  textAlign: 'start',  borderRadius: 4,  boxShadow: '0 1px 4px rgba(36, 44, 58, 0.3)'  },  close: { appearance: 'none',  borderRadius: '1em',  outline: 0,  padding: 0,  position: 'absolute',  right: '-1em',  top: '-1em',  width: '2em',  height: '2em',  background: c('background'),  border: `2px solid ${c('border')}`,  boxShadow: '0 1.5px 3px rgba(0, 0, 0, .16)',  color: 'white',  fontSize: '1em',  fontWeight: 'bold',  textAlign: 'center'  },  contentLight: { backgroundColor: c('content'),  color: c('text')  },  contentDark: { backgroundColor: c('content'),  color: c('text'),  border: `1px solid ${c('border')}`  }  }); \nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        container: {\n            padding: '20px'\n         }, \n        title: {\n            padding: '10px', \n            boxShadow: '0 1px 0 rgba(36, 44, 58, 0.1)'\n         }, \n        fieldContainer: {\n            padding: '10px'\n         }, \n        button: {\n            padding: '5px'\n         }, \n        textField: {\n            marginLeft: theme.spacing(1), \n            marginRight: theme.spacing(1), \n            width: '100%'\n         }\n     })\n;\n\nexport default withStyles(muiStyles)(withThemeName(EditorForm));\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\Form.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {Register, Unregister, Update, FormValidation} from './types';\n\nexport type FormProps = { \n    onSubmit: () => void;\n    children: React.ReactNode;\n};\ntype State = { \n    isValid: boolean;\n};\n\nexport const FormValidationContext = React.createContext<FormValidation | undefined>(undefined);\n\nexport default class Form extends React.Component<FormProps, State> {\n        state = {\n            isValid: false\n        }\n        ;\n        componentDidMount() {\n            this._update();\n        }\n        _key = 0;\n        _inputs: Array<{ \n            key: number;\n            validate: () => Error | null;\n            focus: () => void;\n        }> = [];\n        _register: Register = ({\n            validate, \n            focus\n         }) => {\n        \n            const key = this._key++;\n            this._inputs.push({\n                key, \n                validate, \n                focus\n             })\n            return key;\n        }\n        ;\n        _unregister: Unregister = (key: number) => \n        \n            this._inputs = this._inputs.filter(it => \n            \n                it.key !== key\n            )\n        \n        ;\n        _update: Update = () => \n        \n            this.setState({\n                isValid: this._inputs.every(it => \n                \n                    !it.validate()\n                )\n             })\n        ;\n        _handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        \n            e.preventDefault();\n            for (const input of this._inputs) {\n                if (input.validate()) {\n                    input.focus();\n                    return ;\n                }\n            }\n            this.props.onSubmit();\n        }\n        ;\n        render() {\n            return  (\n                <FormValidationContext.Provider\n                 value={{\n                        register: this._register, \n                        unregister: this._unregister, \n                        update: this._update, \n                        valid: this.state.isValid\n                     }}>\n                    <form\n                     onSubmit={this._handleSubmit}>\n                        {this.props.children}\n                    </form>\n                </FormValidationContext.Provider>\n                )\n            ;\n        }\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\index.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport {FormField, Register, Unregister, Update} from './types';\nimport Form from './Form';\nimport EditorForm from './EditorForm';\nimport withValidation from './withValidation';\nimport withStatus from './withStatus';\n\nexport {Form, EditorForm, withValidation, withStatus};\n\nexport type {FormField, Register, Unregister, Update};\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\withStatus.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {FormValidationContext} from './Form';\nimport {$Subtract} from '../../types';\n\n// The property ( 'disabled' ) is injected in the component\n// enhanced by withStatus ( should be 'withEnabled' ).\n// The 'disabled' status is inferred from the FormValidationContext.Consumer.\ntype InjectedProps = { \n    disabled: boolean | undefined;\n};\n\nexport default function withStatus<P extends InjectedProps>(Comp: React.ComponentType<P>):  React.ComponentType<$Subtract<P, InjectedProps>> {\n    \n        function withStatus(props: any) {\n        \n            return  (\n                <FormValidationContext.Consumer\n                >\n                    {\n                        (value: { \n                            valid: boolean;\n                        } | undefined = {\n                            valid: true\n                         }) => \n                        \n                             (\n                            <Comp\n                             disabled={!value.valid} {...props} />\n                            )\n                        \n                        \n                    }\n                </FormValidationContext.Consumer>\n                )\n            ;\n        }\n        withStatus.displayName = `withValidation(${Comp.displayName || Comp.name})`;\n        return withStatus;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\withValidation.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nimport * as React from 'react';\nimport {$Subtract} from '../../types';\nimport {FormValidationContext} from './Form';\nimport {FormValidation} from './types';\ntype ExternalProps = { \n    value: any;\n    validate: (value: any) => Error | null;\n    helperText?: string;\n};\ntype Props = ExternalProps & { \n    validation: FormValidation;\n};\ntype InjectedProps = { \n    error: Error | null;\n};\ntype State = { \n    initial: boolean;\n    error: Error | null;\n    value: any;\n};\nexport default function withValidation<P extends InjectedProps>(Comp: React.ComponentType<P>):  React.ComponentType<$Subtract<P, InjectedProps> & ExternalProps> {\n    \n        class EnhancedComponent extends React.Component<Props, State> {\n            static displayName = `withValidation(${Comp.displayName ?? Comp.name})`;\n            static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n                const initial = prevState.value !== nextProps.value ? false : prevState.initial;\n                return {\n                        initial, \n                        error: initial ? null : nextProps.validate ? nextProps.validate(nextProps.value) : null, \n                        value: nextProps.value\n                     };\n            }\n            state = {\n                initial: true, \n                error: null, \n                value: this.props.value\n            }\n            ;\n            _key: number = 0;\n            _root = React.createRef<any>();\n            componentDidMount() {\n                this._key = this.props.validation.register({\n                    validate: this._validate, \n                    focus: this._focus\n                 })\n                ;\n            }\n            componentDidUpdate(prevProps: Props) {\n                if (prevProps.value !== this.props.value) {\n                    this.props.validation.update();\n                }\n            }\n            componentWillUnmount() {\n                this.props.validation.unregister(this._key);\n            }\n            _validate = () => \n                this.props.validate(this.props.value);\n            _focus = () => {\n                this._root.current?.focus?.();\n                if (this.state.initial) {\n                    this.setState({\n                        initial: false, \n                        error: this.props.validate(this.props.value)\n                     })\n                }\n            };\n            render() {\n                \n                // @ts-ignore\n                const { helperText,  ...other  } = this.props; \n                \n                // @ts-ignore\n                return  ( <Comp \n                        ref={this._root}\n                        error={this.state.error}\n                        \n                        // @ts-ignore\n                        helperText={this.state.error ? this.state.error.message : helperText}\n                        {...other}\n                     />\n                    )\n                ;\n                \n            }\n        }\n        return (props) =>  \n                 (\n                <FormValidationContext.Consumer\n                >\n                    {\n                        (value: any) => {\n                        \n                            return  (\n                                <EnhancedComponent\n                                 validation={value} {...props} />\n                                )\n                            ;\n                        }\n                        \n                    }\n                </FormValidationContext.Consumer>\n                )\n            \n        ;\n        \n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\utils\\convertDataTransferItemsToFiles.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nexport type WebkitDirectoryReaderResult = (WebkitFileEntry | WebkitDirectoryEntry)[];\nexport type WebkitDirectoryReader = { \n    readEntries: (success: (result: WebkitDirectoryReaderResult) => void, error: (e: Error) => void) => void;\n};\nexport type WebkitFileEntry = { \n    isFile: true;\n    isDirectory: false;\n    name: string;\n    fullPath: string;\n    file: (success: (f: File) => void, failure: (e: Error) => void) => void;\n};\nexport type WebkitDirectoryEntry = { \n    isFile: false;\n    isDirectory: true;\n    name: string;\n    fullPath: string;\n    createReader: () => WebkitDirectoryReader;\n};\nconst blacklist = [\n    /^\\./, \n    /\\.(jks|keystore)$/, \n    /^(android|ios)$/, \n    /^coverage$/, \n    /^(js|ts)config\\.json$/, \n    /^flow-typed$/, \n    /^node_modules$/, \n    /^npm-debug\\.log$/, \n    /^npm-error\\.log$/, \n    /^package-lock\\.json$/, \n    /^yarn-debug\\.log$/, \n    /^yarn-error\\.log$/, \n    /^yarn\\.lock$/, \n    /^__tests__$/, \n    /~$/\n];\nconst whitelist = [\n    /^\\.eslintrc(\\.json)?$/\n];\nconst processEntry = async (entry: WebkitFileEntry | WebkitDirectoryEntry, files: { \n    file: File;\n    path: string;\n}[], path: string) => {\n\n    if (blacklist.some(r => \n    \n        r.test(entry.name)\n    ) && !whitelist.some(r => \n    \n        r.test(entry.name)\n    )) {\n        return ;\n    }\n    if (entry.isFile) {\n        const file = await new Promise<File>((resolve, reject) => \n            \n                entry.file(resolve, reject)\n            );\n        files.push({\n            path, \n            file\n         })\n    }\n    else {\n        if (entry.isDirectory) {\n            const reader = entry.createReader();\n            const entries = await new Promise<WebkitDirectoryReaderResult>((resolve, reject) => \n                \n                    reader.readEntries(resolve, reject)\n                );\n            await Promise.all(entries.map(async (e: WebkitFileEntry | WebkitDirectoryEntry) => \n                \n                    processEntry(e, files, `${path}/${e.name}`)\n                \n                ));\n        }\n    }\n}\n;\nexport default async function convertDataTransferItemsToFiles(items: (File | WebkitFileEntry | WebkitDirectoryEntry)[], mappings: { \n        [key: string]: string;\n    }) {\n    \n        const files: { \n            file: File;\n            path: string;\n        }[] = [];\n        await Promise.all(items.map((it) => {\n            \n                const path = mappings[it.name] || it.name;\n                if (it instanceof File) {\n                    files.push({\n                        file: it, \n                        path\n                     })\n                    return undefined;\n                }\n                else {\n                    return processEntry(it, files, path);\n                }\n            }\n            ));\n        return files;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi-js\\dist\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.8\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi\\packages\\wizzi.editor\\.wizzi\\src\\utils\\dragEventIncludes.tsx.ittf\n    utc time: Fri, 18 Jun 2021 08:54:55 GMT\n*/\nexport default function dragEventIncludes({\n        dataTransfer\n     }: DragEvent, item: string):  boolean {\n    \n        if (!dataTransfer) {\n            return false;\n        }\n        if (dataTransfer.types instanceof DOMStringList) {\n            return dataTransfer.types.contains(item);\n        }\n        return dataTransfer.types.indexOf(item) > -1;\n    }\n","export default __webpack_public_path__ + \"assets/afbe577e0ee429a9b6d41f5e0a49b840.png\";","export default __webpack_public_path__ + \"assets/babd55c3c54fed9a93ef4fd42def093f.png\";","export default __webpack_public_path__ + \"assets/74183022706526781fad7e58ffb0ea01.png\";","export default __webpack_public_path__ + \"assets/d76ac377459bbd2d31196032eb6dbf25.png\";","export default __webpack_public_path__ + \"assets/be1018899efdf1341557732773abcc8a.png\";","export default __webpack_public_path__ + \"assets/90504c2ba1208cf0a866e5c19a4aad49.png\";","export default __webpack_public_path__ + \"assets/9d79049897e7e29dff64569ba33fd9d7.png\";","export default __webpack_public_path__ + \"assets/6f69fac37f13353633b2b88f79f85ee4.svg\";","export default __webpack_public_path__ + \"assets/79038cb4d98dd7051ceacacc035bcc3f.svg\";","export default __webpack_public_path__ + \"assets/b510ee88a3d0638a9fa0c0246329e5e5.png\";"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AAoBA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAIA;AACA;AAIA;AAKA;AACA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AALA;AAWA;AASA;AACA;AACA;AAAA;AAEA;AADA;AAGA;AADA;AAKA;AAAA;AADA;AAUA;AAGA;AAJA;AAaA;AAEA;AAQA;AAAA;AAEA;AADA;AAKA;AAIA;AACA;AADA;AADA;AAQA;AAAA;AAAA;AADA;AAjBA;AAuBA;AAAA;AAEA;AADA;AAKA;AAIA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAZA;AAkBA;AAAA;AAEA;AADA;AAKA;AAIA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AADA;AAIA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAGA;AAJA;AAMA;AAAA;AAAA;AADA;AA1BA;AAgCA;AADA;AAGA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AAFA;AAhHA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;AAMA;AACA;AAAA;AACA;;;;;;AAPA;AACA;AACA;;;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AAAA;AADA;AAKA;AADA;AAGA;AAGA;AAJA;AAQA;AAAA;AADA;AAKA;AAAA;AADA;AAUA;;;;AAlDA;AACA;AADA;AAoDA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AA1DA;;A;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAgBA;AAEA;AACA;AAEA;AAIA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAIA;AADA;AASA;AAGA;AACA;AAIA;AAAA;AADA;AAMA;AADA;AAOA;AACA;AAAA;AAEA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAGA;AADA;AAOA;AADA;AAQA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AADA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAZA;AAiBA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAhBA;AAkBA;AACA;AADA;AApDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;AASA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAIA;AADA;AAKA;AAAA;AADA;AARA;AAgBA;AADA;AAOA;AADA;AAUA;;;AAzGA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;;;;AARA;AACA;AA2GA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAfA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAZA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAhBA;AAoBA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AATA;AA5GA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAgCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AADA;AAGA;AACA;AACA;AAMA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AADA;AAGA;AACA;AAIA;AACA;AACA;AARA;AAeA;AAAA;AADA;AAGA;AADA;AAKA;AADA;AAKA;AADA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AADA;AAGA;AADA;AAGA;AAAA;AAAA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAdA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAmBA;AACA;AACA;AAAA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAsCA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AAEA;AAGA;AAGA;AADA;AAKA;AACA;AACA;AAGA;AADA;AACA;AAIA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;;;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AAFA;AACA;AAGA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAIA;AADA;AACA;AAGA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;;;;;;AA1HA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAgHA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AAWA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;AADA;AAIA;AAIA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAhBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAdA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAgCA;AADA;AAGA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAoBA;AAIA;AACA;AAEA;AAGA;AACA;AAFA;AACA;AAOA;AAIA;AACA;AAAA;AACA;AAMA;AACA;AAFA;AAKA;AAQA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAGA;AAtDA;AA0DA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAIA,6YAEA;AAHA;AAOA;AACA;AAFA;AAKA;AACA;AAEA;AADA;AAIA;AACA;AAAA;AAKA;AAKA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAGA;AADA;AAGA;AADA;AASA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAGA;AADA;AAGA;AADA;AAYA;AACA;AAEA;AAKA;AACA;AAAA;AAKA;AAUA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AAJA;AAaA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAyBA;AAAA;AAAA;AADA;AAGA;AADA;AAOA;AAAA;AADA;AAMA;AAAA;AADA;AAKA;AAAA;AADA;AAKA;AAAA;AADA;AAMA;AAAA;AADA;AAWA;AAAA;AADA;AAMA;AAAA;AADA;AAOA;AAOA;;;AA5kBA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;AAzBA;AACA;AAylBA;AAGA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AApBA;AAwBA;AACA;AACA;AAFA;AAjDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;;;;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAEA;AADA;AAMA;AADA;AAGA;AACA;AACA;AACA;AACA;AAKA;AAVA;AAoBA;AADA;AAKA;AADA;AAiBA;AADA;AAKA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAUA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAUA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAUA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAcA;;;;AAxJA;AACA;AAyJA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAzBA;AACA;AA6BA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AADA;AAGA;AADA;AAKA;AADA;AAQA;AADA;AAUA;AADA;AAYA;AADA;AAYA;AAvDA;AACA;AADA;AAAA;AACA;AAyDA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAjBA;AACA;AAwBA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAFA;AAtCA;AACA;AA8CA;;;;;;;;;;;;;AACA;AACA;AAEA;AADA;AASA;AADA;AAGA;AADA;AAGA;AAAA;AADA;AAIA;AADA;AAaA;;;;AA/BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAZA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AAFA;AACA;AAGA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAIA;AAGA;AACA;AACA;AAEA;AADA;AAIA;AACA;AAXA;AAcA;AADA;AAKA;AACA;AAGA;AADA;AAIA;AACA;AATA;AAYA;AADA;AAEA;AAGA;AACA;AACA;AACA;AANA;AAeA;;;AA5FA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;;;;AAjBA;AACA;AADA;AA+FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;AACA;AACA;AAEA;AADA;AAGA;AADA;AAOA;;;;AAZA;AACA;AADA;AAcA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAPA;;A;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AADA;AAWA;AAEA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AADA;AAKA;AADA;AASA;AADA;AAOA;AAEA;AACA;AAEA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAMA;AADA;AAUA;AADA;AAUA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AAtBA;AAwBA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAfA;AAqBA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAzGA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AA9BA;AA+BA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AADA;AACA;AArCA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAAA;AAAA;AA0CA;AACA;AADA;AAGA;AAEA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAFA;AAQA;AACA;AAFA;AASA;AACA;AAFA;AAQA;AACA;AA5BA;AAiCA;AAtFA;AACA;AADA;AAAA;AAwFA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAdA;AAVA;;A;;;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;AAOA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AADA;AAGA;AACA;AACA;AAIA;AAPA;AAUA;AADA;AAGA;AADA;AAQA;AAEA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA;AAIA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AACA;AAUA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAMA;AACA;AADA;AADA;AACA;AAUA;AAIA;AADA;AACA;AAMA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAMA;AACA;AATA;AAFA;AAFA;AAmBA;AAGA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AADA;AADA;AAKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AADA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AADA;AACA;AAMA;AAEA;AADA;AACA;AAEA;AAIA;AADA;AACA;AAGA;AAIA;AADA;AACA;AAGA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;;;AApUA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;AAsRA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AAAA;AADA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AADA;AAUA;AACA;AACA;AAIA;AAIA;AAIA;AAfA;AAuBA;AACA;AACA;AACA;AACA;AAGA;AAAA;AADA;AAMA;AAAA;AADA;AASA;AAAA;AADA;AAMA;AAAA;AADA;AAzBA;AAmCA;AAAA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AA0BA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AANA;AAUA;AADA;AAIA;AAjBA;AAlHA;AAmJA;;;AAleA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAjBA;AACA;AA8eA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AA/CA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAkBA;;;;;;;;;;;;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAEA;AADA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AA8BA;;;;AAnFA;AACA;AADA;AAqFA;AACA;AACA;AACA;AAFA;AADA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAuBA;AACA;AAMA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AAoBA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AApCA;AACA;AADA;AAuCA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AA/CA;AAgDA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAtDA;AAuDA;AACA;AACA;AACA;AAAA;AAWA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5FA;AA6FA;AACA;AAAA;AACA;AACA;AACA;AACA;AAlGA;AAmGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA5GA;AA6GA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AAxHA;AACA;AADA;AACA;AADA;AACA;AADA;AA+HA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAIA;AACA;AACA;AA3IA;AA4IA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAnJA;AAoJA;AACA;AAAA;AACA;AACA;AAvJA;AA0JA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AASA;AACA;AACA;AAHA;AASA;AACA;AAFA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AACA;AA5MA;AAsNA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AAMA;AADA;AAQA;AADA;AAGA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAgBA;AACA;AAnQA;AAoQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAoBA;AACA;AA7SA;AAgTA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AACA;AApTA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AALA;AAUA;AACA;AAZA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AA6TA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAgBA;AAnWA;AACA;AADA;AAAA;AAsWA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AApCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AACA;AAAA;;;;;;;;;;;;AAKA;AACA;AACA;AAFA;AACA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;AArGA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AA8FA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAiBA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AADA;AAQA;;;;AArKA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAuKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAVA;AAcA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAnDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAGA;AACA;AAAA;AACA;;;;;;AAtFA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAoEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AACA;AAOA;AAEA;AADA;AAIA;;;;AAvGA;AACA;AAwGA;;A;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AAEA;AACA;AAIA;AADA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AACA;AAEA;AADA;AAIA;AAEA;AACA;AACA;AAIA;AADA;AAGA;AADA;AAKA;AAEA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAKA;AAEA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AADA;AAMA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAlBA;AAdA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAYA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AACA;AAAA;AACA;;;;;;AA/CA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AAwCA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AANA;AASA;AAAA;AADA;AAKA;AADA;AAGA;AADA;AAGA;AADA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AAlBA;AAuBA;;;;AAxGA;AACA;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAGA;AACA;AADA;AArCA;;A;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AADA;AAGA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AADA;AAKA;AADA;AAMA;AADA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAlCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAEA;AAAA;AADA;AAGA;AAAA;AADA;AAOA;;;;AAhBA;AACA;AAiBA;AAIA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AARA;;A;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AACA;;A;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AACA;;A;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AANA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AASA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AAEA;AAIA;;A;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AAEA;;A;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAEA;;A;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AACA;AADA;AADA;AAOA;AAKA;AAEA;AAIA;AACA;;A;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AAAA;AACA;;A;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AADA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AAEA;AACA;AAIA;;A;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AADA;AADA;AAMA;;A;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AAKA;AARA;AAcA;;A;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AAHA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAPA;AAYA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AAHA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AALA;AASA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzJA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AACA;AAAA;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAMA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAKA;AAEA;AADA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;AA5CA;AACA;AACA;;;AA0CA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AADA;AAOA;;;;AAjEA;AACA;;;A;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAEA;AAOA;AADA;AAMA;AADA;AASA;AACA;AAAA;AACA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAaA;AACA;AACA;AAHA;AACA;AAbA;AACA;AADA;AACA;AADA;AACA;AADA;AAqCA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA9CA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;AAFA;AAKA;AA1BA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAiCA;AACA;AAlCA;AAAA;AAAA;AAgDA;AACA;AACA;AAAA;AADA;AAKA;AAtDA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AACA;AADA;AACA;AAuDA;AAQA;AAEA;AADA;AAIA;AAOA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAsBA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AACA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AAFA;AACA;AAGA;AAIA;AACA;AAIA;AANA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAGA;AAGA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AALA;AAOA;AARA;AACA;AAWA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAYA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAGA;AACA;AAFA;AAHA;AAUA;AAEA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AADA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAJA;AACA;;;;;;AA7LA;AACA;AACA;AACA;AACA;AACA;;;AA6LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAEA;AADA;AAIA;AADA;AAOA;AADA;AAGA;AADA;AAGA;AADA;AAOA;AAIA;AAIA;AAAA;AADA;AAUA;AAAA;AAAA;AADA;AAUA;AADA;AAGA;AADA;AAaA;AAAA;AAAA;AADA;AAGA;AADA;AAMA;AADA;AAKA;AADA;AAOA;AAAA;AADA;AAGA;AADA;AAKA;AADA;AAOA;AADA;AAKA;AADA;AAMA;AADA;AASA;AAGA;AAJA;AAgBA;AADA;AAIA;AADA;AAIA;AACA;AACA;AACA;AACA;AALA;AAcA;AACA;AACA;AACA;AAJA;AAYA;;;;AAjXA;AACA;AADA;AAmhBA;AApGA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAiBA;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAGA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AAGA;AAQA;AADA;AAGA;AAAA;AAGA;AAJA;AAQA;AAAA;AAGA;AAJA;AAQA;AAAA;AAGA;AAJA;AAQA;AAAA;AAGA;AAJA;AASA;AADA;AAKA;AADA;AAOA;AAAA;AADA;AAGA;AAAA;AADA;AAQA;AAAA;AADA;AAoBA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AATA;AANA;AAVA;AAkCA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAPA;AAZA;AAgCA;;;;AA9LA;AACA;AA+LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AADA;AA1DA;AACA;AA6DA;AAGA;AACA;AADA;AADA;AACA;AAKA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAeA;AAGA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAGA;AAIA;AAGA;AADA;AAIA;AAGA;AACA;AACA;AADA;AAFA;AAOA;AAGA;AADA;AAIA;AAIA;AAGA;AACA;AACA;AAHA;AAhCA;AACA;AA4CA;;;;;;;;;;;;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;AA5BA;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AAKA;AACA;;;;AA3DA;AACA;AA4DA;AAEA;AACA;;A;;;;;;;;;;;;;;;;;;ACzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AADA;AAIA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAUA;AAAA;AAAA;AADA;AAOA;;;;AArBA;AACA;AADA;AAuBA;AACA;AACA;AACA;AACA;AAHA;AADA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAZA;AACA;AACA;;;AACA;AACA;AACA;;;AAOA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAOA;AAAA;AADA;AAMA;AADA;AAQA;AACA;AACA;AACA;AAJA;AAWA;AADA;AAGA;AAAA;AAAA;AADA;AAWA;;;;AA5DA;AACA;AA6DA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAdA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAOA;;;;AAZA;AACA;AADA;AAcA;AACA;AACA;AACA;AACA;AAHA;AADA;;A;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAQA;AACA;AACA;AACA;AADA;AADA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;AAPA;;;AAOA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AADA;AAKA;AADA;AAGA;AAAA;AADA;AAOA;AADA;AAKA;AADA;AAQA;AADA;AAGA;AAAA;AAAA;AADA;AAWA;;;;AA/CA;AACA;AAgDA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAnBA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AADA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AAKA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAIA;AARA;AAaA;;;;AAzIA;AACA;AA0IA;;A;;;;;;;;;;;;;;;;;ACnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAWA;AAAA;AADA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAcA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAYA;AADA;AACA;AAZA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AACA;AAAA;AACA;AAGA;AADA;AAKA;AACA;AACA;AA7BA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AADA;AAOA;AA/CA;AAAA;AAAA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AATA;AACA;AADA;AAAA;AAiDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AACA;AASA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AAJA;AASA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AALA;AAcA;AAAA;AADA;AAcA;AAjEA;AACA;AADA;AAAA;AAmEA;AAIA;AADA;AAKA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAjBA;AAqBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAzCA;;A;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAAA;AACA;AADA;AAEA;AAHA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAhBA;AAqBA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAFA;AA3BA;;A;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAOA;AANA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAEA;AADA;AAMA;AADA;AAQA;AADA;AAGA;AADA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAtBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AADA;AADA;AA7EA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAcA;AAIA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAUA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AALA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AA0BA;AACA;AA3BA;AACA;AADA;AAAA;AA6BA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAUA;AADA;AACA;AAVA;AAcA;AADA;AACA;AAdA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAkBA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAgBA;AADA;AAUA;AA9CA;AACA;AADA;AAAA;AAiDA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AATA;AAxBA;;A;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AATA;AADA;;A;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AACA;AAQA;AACA;AACA;AACA;AAHA;AAQA;AAAA;AADA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AApBA;AADA;AADA;;A;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAcA;AADA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AANA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAUA;AACA;AAFA;AACA;AAVA;AACA;AADA;AACA;AADA;AACA;AADA;AA8CA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AApDA;AAsDA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AACA;AACA;AAlBA;AAAA;AAAA;AAqBA;AACA;AACA;AAAA;AACA;AAGA;AADA;AAKA;AACA;AACA;AAjCA;AAAA;AAAA;AAoCA;AACA;AACA;AAtCA;AAAA;AAAA;AA8DA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAQA;AAzEA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AAPA;AACA;AADA;AAAA;AA2EA;;A;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AAJA;AASA;AADA;AAQA;AADA;AAQA;;A;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AASA;AAAA;AADA;AAGA;AADA;AAKA;AAAA;AADA;AAaA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AAlBA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAxBA;AAyBA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AADA;AAIA;AACA;AArDA;AAuDA;AADA;AACA;AAvDA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAAA;AAAA;AA6DA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AAIA;AACA;AACA;AAFA;AAMA;AAAA;AADA;AAGA;AAAA;AADA;AAOA;AApFA;AACA;AADA;AAAA;AAuFA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAjCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAlEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AADA;AAIA;AAAA;AAAA;AADA;AAKA;;;;AA1FA;AACA;AADA;AA4FA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AA7BA;;A;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AADA;AAMA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;;A;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AATA;AAYA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAMA;AADA;AACA;AANA;AACA;AADA;AACA;AADA;AACA;AADA;AAuCA;AACA;AADA;AACA;AAEA;AACA;AACA;AA5CA;AA6CA;AACA;AADA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AAtDA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;AA4BA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAjCA;AAAA;AAAA;AAuDA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AADA;AAGA;AADA;AASA;AAAA;AAAA;AADA;AAUA;AAhFA;AACA;AADA;AAAA;AACA;AADA;AAEA;AADA;AACA;AAiFA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAbA;AA9BA;;A;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAEA;AADA;AAGA;AADA;AAKA;AADA;AAGA;AACA;AACA;AACA;AAJA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AARA;AAmBA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AA1CA;AAgDA;;A;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAIA;AAEA;AADA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AARA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAwBA;AAMA;AAGA;AAIA;AACA;AACA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;AAiBA;AACA;AACA;AAFA;AACA;AAIA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAWA;AAEA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAMA;AADA;AAKA;AACA;AACA;AAMA;AAAA;AADA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AADA;AAOA;AACA;AAlBA;AAwBA;AAAA;AADA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAFA;AADA;AAOA;AACA;AAtBA;AA6BA;AAAA;AADA;AAYA;AAIA;AADA;AAGA;AADA;AAEA;AAGA;AAAA;AAAA;AAHA;AAQA;AADA;AAEA;AAGA;AACA;AACA;AACA;AANA;AAiBA;;;AApKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;;;;AAhBA;AACA;AAsKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAdA;AACA;AAqBA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChRA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAMA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAOA;AAGA;AADA;AACA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;AAnDA;AACA;AACA;;;AAkDA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AADA;AAOA;;;;AAzEA;AACA;;;A;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;A;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AAEA;AAOA;AADA;AAMA;AADA;AASA;AACA;AAAA;AACA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAkBA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAaA;AACA;AACA;AAHA;AACA;AAbA;AACA;AADA;AACA;AADA;AACA;AADA;AAqCA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA9CA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;AAFA;AAKA;AA1BA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAiCA;AACA;AAlCA;AAAA;AAAA;AAgDA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AA/DA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AACA;AADA;AACA;AAgEA;AAOA;AAEA;AADA;AAIA;AAQA;;A;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AAmBA;AAiBA;AACA;AAEA;AAKA;AAOA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;;A;;;;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;A;;;;;;;;;;;;;ACjBA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;A;;A;;A","sourceRoot":""}