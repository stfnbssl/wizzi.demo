module
    $
        var myname = 'features/wizzi/productions';
    import path from 'path'
    import fs from 'fs'
    import stringify from 'json-stringify-safe'
    import
        @ fSystem
        from 'wizzi-utils'
    import wizzi from 'wizzi'
    $if wzCtx.Build.useWizziJsonFactory
        import wizziTools from 'wizzi-tools'
    import
        @ ittfScanner
        @ ittfGraph
        @ verify
        from 'wizzi-utils'
    $if wzCtx.Build.useWizziJsonFactory
        import
            @ packiFilePrefix
            @ packiFilePrefixExtract
            from '../config/env'
        import
            @ packiTypes
            from '../packi'
    import
        @ config
        from '../config'
    import
        as wizziMaps
        from './maps'
    import
        $if wzCtx.Build.useWizziJsonFactory
            @ createJsonFsAndFactory
            @ ensurePackiFilePrefix
        @ createFilesystemFactory
        @ createFilesystemFactoryWithParameters
        from './factory'
    import
        @ GenerationOptions
        @ GeneratedArtifact
        @ WizziModelTypesRequest
        @ WizziJobTypesRequest
        @ TransformationOptions
        @ TransformedModel
        from './types'
    import
        @ JsonFs
        from 'wizzi-repo'
    const myname = '${myname}'
    $include productions/loadModel
    $include productions/mTreeBuildupScript
    $include productions/mTree
    $include productions/generateArtifact
    $include productions/generateFolderArtifacts
    $include productions/generateWizziModelTypes
    $include productions/transformModel
    $include productions/metaGenerate
    $include productions/executeJob
    $include productions/inferAndLoadContext
    $include productions/scanIttfDocument
    $include productions/wizzify
    $include productions/wizzifyV08
    $include productions/getCodeAST
    $include productions/getCodeASTV08
    $include productions/loadSiteJsonModel
    function jsonFsToPackiFiles
        param jsonFs
            :ref JsonFs
        param folder
            :string
        :return
            :ref Promise
                :param
                    :ref packiTypes.PackiFiles
        r_promise()
            const packiFiles
                :ref packiTypes.PackiFiles
                {
            _ jsonFs.toFiles
                {
                    @ removeRoot packiFilePrefixExtract
                a_reject(files, :ref, fSystem.FileDef[])
                    _ files.forEach
                        =>
                            param file
                            if file.relPath.startsWith(folder + '/')
                                set packiFiles[file.relPath] =
                                    {
                                        @ type 'CODE'
                                        @ contents file.content
                                        @ generated true
                    _ resolve
                        @ packiFiles
