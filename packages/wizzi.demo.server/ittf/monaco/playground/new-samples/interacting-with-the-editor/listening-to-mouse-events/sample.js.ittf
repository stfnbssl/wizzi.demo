module
    kind react
    var jsCode
        [ 
            @ '"use strict";'
            @ 'function Person(age) {'
            @ '	if (age) {'
            @ '		this.age = age;'
            @ '	}'
            @ '}'
            @ 'Person.prototype.getAge = function () {'
            @ '	return this.age;'
            @ '};'
            ._ join
                @ '\n'
    var editor
        _ monaco.editor.create
            _ document.getElementById("container")
            { 
                @ value jsCode
                @ language "javascript"
                @ glyphMargin true
                @ contextmenu false
    var decorations
        _ editor.deltaDecorations
            [ 
            [ 
                { 
                    @ range new monaco.Range(3, 1, 3, 1)
                    { options
                        @ isWholeLine true
                        @ className 'myContentClass'
                        @ glyphMarginClassName 'myGlyphMarginClass'
        # Add a zone to make hit testing more interesting
    var viewZoneId = null
        # Add a zone to make hit testing more interesting
    _ editor.changeViewZones
        function 
            param changeAccessor
            var domNode = document.createElement('div')
            set domNode.style.background = 'lightgreen'
            set viewZoneId =
                _ changeAccessor.addZone
                    { 
                        @ afterLineNumber 3
                        @ heightInLines 3
                        @ domNode
        # Add a content widget (scrolls inline with text)
    var contentWidget
        { 
            @ domNode null
            @ getId
                function 
                    return 'my.content.widget'
            @ getDomNode
                function 
                    if !this.domNode
                        set this.domNode = document.createElement('div')
                        set this.domNode.innerHTML = 'My content widget'
                        set this.domNode.style.background = 'grey'
                    return this.domNode
            @ getPosition
                function 
                    return 
                        { 
                            { position
                                @ lineNumber 7
                                @ column 8
                            [ preference
                                @ monaco.editor.ContentWidgetPositionPreference.ABOVE
                                @ monaco.editor.ContentWidgetPositionPreference.BELOW
        # Add a content widget (scrolls inline with text)
    _ editor.addContentWidget(contentWidget)
        # Add an overlay widget
    var overlayWidget
        { 
            @ domNode null
            @ getId
                function 
                    return 'my.overlay.widget'
            @ getDomNode
                function 
                    if !this.domNode
                        set this.domNode = document.createElement('div')
                        set this.domNode.innerHTML = 'My overlay widget'
                        set this.domNode.style.background = 'grey'
                        set this.domNode.style.right = '30px'
                        set this.domNode.style.top = '50px'
                    return this.domNode
            @ getPosition
                function 
                    return null
        # Add an overlay widget
    _ editor.addOverlayWidget(overlayWidget)
    var output = document.getElementById('output')
    function showEvent
        param str
        while output.childNodes.length > 6
            _ output.removeChild(output.firstChild.nextSibling.nextSibling)
        _ output.appendChild(document.createTextNode(str))
        _ output.appendChild(document.createElement('br'))
    _ editor.onMouseMove
        function 
            param e
            _ showEvent('mousemove - ' + e.target.toString())
    _ editor.onMouseDown
        function 
            param e
            _ showEvent('mousedown - ' + e.target.toString())
    _ editor.onContextMenu
        function 
            param e
            _ showEvent('contextmenu - ' + e.target.toString())
    _ editor.onMouseLeave
        function 
            param e
            _ showEvent('mouseleave')
