$group

    function packRuleName
        param name
        param kind
        param pseudo
        return name + '|' + (kind || '') + '|' + (pseudo || '')

    function unpackRuleName
        param name
        return
            {
                @ name name.split('|')[0]
                @ kind name.split('|')[1]
                @ pseudo name.split('|')[2]

    function displayRuleName
        param name
        param kind
        param pseudo
        return (kind == '2' ? '.' : '') + name + (pseudo ? (':' + pseudo) : '')

    function updateRuleData
        param ruleData
        param htmlData
        param rulesNoClassData

        var changed = false
        # previous
        var previousRuleNames = {}
        foreach rule in ruleData
            if !rule.kind
                set rule.kind = '2'
                set changed = true
            set previousRuleNames[packRuleName(rule.name, rule.kind)] = 1
        log 'previousRuleNames', previousRuleNames

        const currentRuleNames = {}
        foreach rule in rulesNoClassData
            set currentRuleNames[packRuleName(rule, '1')] = true
        log 'currentRuleNames 1', rulesNoClassData, currentRuleNames
        var regEx = /class[ \t]*=[ \t]*["|']([^'^"]+)["|']/g
        var match = regEx.exec(htmlData)
        while match !== null
            set currentRuleNames[packRuleName(match[1], '2')] = true
            set match = regEx.exec(htmlData)
        log 'currentRuleNames 1 and 2', currentRuleNames
        log 'rule names', Object.keys(currentRuleNames)

        foreach currentRuleName in Object.keys(currentRuleNames)
            var found = false
            foreach rule in ruleData
                var prevRuleName = packRuleName(rule.name, rule.kind || '2')
                log 'rule.kind, prevRuleName, currentRuleName ', rule.kind, prevRuleName, currentRuleName 
                if prevRuleName == currentRuleName 
                    set found = true
                    set previousRuleNames[prevRuleName] = 0
            if !found
                var unpackedCurrentRuleName = unpackRuleName(currentRuleName)
                _ ruleData.push
                    {
                        @ name unpackedCurrentRuleName.name
                        @ kind unpackedCurrentRuleName.kind
                        { styles
                log 'added rule', currentRuleName 
                set changed = true
        
        # remove eliminated rules
        foreach prevRuleName in Object.keys(previousRuleNames)
            log 'remove?', prevRuleName,  previousRuleNames[prevRuleName]
            if previousRuleNames[prevRuleName] == 1
                # does not exists in currentRuleNames, remove
                
                var unpackedPrevRuleName = unpackRuleName(prevRuleName)
                log 'yes needs to be removed', unpackedPrevRuleName
                for var xi = ruleData.length - 1; xi >= 0; --xi
                    if ruleData[xi].name == unpackedPrevRuleName.name && 
                        \b ruleData[xi].kind == unpackedPrevRuleName.kind
                        _ ruleData.splice(xi, 1)
                        # log 'removed', prevRuleName 
                        set changed = true

        # log 'ruleData', ruleData
        const r1 = [], r2 = []
        foreach rule in ruleData
            if rule.kind == '1'
                _ r1.push(rule)
            else
                _ r2.push(rule)
        # log 'r1', r1
        # log 'r2', r2
        set ruleData.length = 0
        foreach rule in r1
            _ ruleData.push(rule)
        foreach rule in r2
            _ ruleData.push(rule)

        log 'ruleData after sort', ruleData
        
        return changed