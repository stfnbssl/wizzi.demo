$group
    $
        var sect = {
            title: 'Wizzi API'
        };

    section(&sect)

        p To use the Wizzi API you need to install the
            to-wizzi-package( wizzi )
            + package locally in your project folder.

        bash-panel
            title Install the wizzi package
            ittf
                npm i wizzi

        p All Wizzi Actions require an instance of the
            high-code( WizziFactory )
            + class.

        js-panel
            title Create a WizziFactory instance
            ittf
                import wizzi;
                var wizziFactory = wizzi.createFactory({
                    repo: {
                        storeKind: 'filesystem'
                    }, 
                    plugins: {
                        pluginsBaseFolder: __dirname, 
                        items: [
                            'wizzi-core',
                            'wizzi-js',
                            'wizzi-web' 
                        ]
                    }, 
                    globalContext: {
                        author: 'Stefano'
                    }
                }, function(err, wizziFactory) {
                    if (err) {
                        throw new Error(err.message);
                    }
                    // call wizziFactory methods
                });

        p Creation options cannot be modified. If you need to change the options
            \b you have to create a new istance.

        js-panel
            title Execute a Load mTree action
            ittf
                wizziFactory.loadMTree (
                    path.join (__dirname, 'ittf', 'mysource.myschema.ittf'),
                    myContextObject,
                    function (err, loadedMTree) {
                        if (err) {
                            throw new Error(err.message);
                        }
                        // ... use the loadedMTree object
                    });

        p Usually you don't need to load an mTree, the Wizzi Model Loader does it for you.
            \b But, if needed, you can load and modify an mTree and then pass it 
            \b to the Wizzi Model Loader instead of the path to the source ITTF Document. 

        js-panel
            title Execute a Load mTree buildup script action
            ittf
                wizziFactory.loadMTreeBuildupScript (
                    path.join (__dirname, 'ittf', 'mysource.myschema.ittf'),
                    myContextObject,
                    function (err, loadedMTreeBuildupScript) {
                        if (err) {
                            throw new Error(err.message);
                        }
                        // ... use the loadedMTreeBuildupScript object
                    });

        p You execute this action for debugging purposes. An mTree Debug Info
            \b contains the source of the mTree build up script generated by the ITTF Process.

        js-panel
            title Execute a Load Wizzi Model Instance action
            ittf
                wizziFactory.loadModel (
                    'myschema', // schema name
                    path.join (__dirname, 'ittf', 'mysource.myschema.ittf'),
                    {
                        mTreeBuildupContext: myContextObject,
                        formatOptions: {}
                    },
                    function (err, loadedModel) {
                        if (err) {
                            throw new Error(err.message);
                        }
                        // ... use the loadedModel object
                    });

        p With this action you load a Wizzi Model Instance 
            \b that will be used as a context object in following actions.

        js-panel
            title Execute a Model Transformation action
            ittf
                wizziFactory.transformModel (
                    myLoadedModel, // Wizzi Model Instance
                    'myschema/mytransformer', // transformer name
                    myContextObject,
                    function (err, transformedModel) {
                        if (err) {
                            throw new Error(err.message);
                        }
                        // ... use the transformedModel object
                    });

        p With this action you can extract from a Wizzi Model Instance 
            \b a modified instance or a POJO object to use as a context object in following actions.

        js-panel
            title Execute an Artifact Generation action
            ittf
                wizziFactory.generateArtifact (
                    artifactModel, // Wizzi Model Instance or POJO, the main generation context
                    path.join (__dirname, 'ittf', 'mysource.myschema.ittf'), 
                    'myschema/myartifact', // artifact name
                    myContextObject,
                    function (err, artifactText) {
                        if (err) {
                            throw new Error(err.message);
                        }
                        // ... save or use the artifactText
                    });

