html

    $$ TODO For ittf(s) documents, user SHOULD BE set in the global Artifact Generation Context

    $
        var opt = {
        }
		for (var i = 0; i < wzCtx.apis.length; i++) {
			var api = wzCtx.apis[i];
			api._id = api.method + _.replace(_.replace(api.url, ':', '_'), '/', '_');
		}

    html/layouts/site( &opt )

        $append head-styles-2
            css ./styles.css.ittf

        . d-container
            . d-left-aside
                ul
                    $foreach api in wzCtx.apis
                        li
                            a ${api.title}
                                href #api_id_${api.url}
            . d-main-content
                $foreach api in wzCtx.apis
                    . d-api
                        id api_id_${api.url}
                        h3 ${api.title}
                        d-prop( method, ${api.method}
                        d-prop( url, ${api.url}

                        $if api.parameters.length > 0
                            h4 Parameters
                            . d-params-panel
                                $foreach p in api.parameters
                                    d-control( ${p.type},
                                        \b param_${ api._id + '_' + p.name },
                                        \b ${p.label},
                                        \b ${_.replace(p.demoValue, ',', '$')}

                        . d-buttons
                            button Exec
                                id btn_${ api._id }
                    hr
            . d-right-aside
                . container
                    pre
                        code
                            id output

        $append body-scripts
            js ./main.js.ittf
            script
                module
                    var btn
                    $foreach api in wzCtx.apis
                        set btn = document.querySelector("#" + 'btn_${ api._id }')
                        _ btn.addEventListener
                            @ 'click'
                            function
                                $if api.method == 'get'
                                    var url = '${api.url}'
                                    $foreach p in api.parameters
                                        var param_${p.name} = get_value('param_${ api._id + '_' + p.name }')
                                        $if p.paramType == 'url'
                                            set url = url.replaceAll(':${p.name}', encodeURIComponent(param_${p.name}))
                                        $else
                                            $if p_index == 0
                                                set url += '?${p.name}=' + param_${p.name}
                                            $else
                                                set url += '&${p.name}=' + param_${p.name}
                                    _ exec_get
                                        @ url
                                $elif api.method == 'post' || api.method == 'put'
                                    var url = '${api.url}'
                                    var payload = {}
                                    $foreach p in api.parameters
                                        var param_${p.name} = get_value('param_${ api._id + '_' + p.name }')
                                        $if p.paramType == 'url'
                                            set url = url.replaceAll(':${p.name}', encodeURIComponent(param_${p.name}))
                                        $else
                                            $if p.type == 'object'
                                                log 'JSON.parse(param_${p.name})', param_${p.name}
                                                set payload['${p.name}'] = JSON.parse(param_${p.name})
                                            $else
                                                set payload['${p.name}'] = param_${p.name}
                                    _ exec_with_payload
                                        @ '${api.method}'
                                        @ url
                                        @ payload 
                                $else
                                    _ alert('${api.method} ${api.url}')

                    function get_value
                        param id
                        var el = document.querySelector("#" + id)
                        return el.value

                    function exec_get
                        param url
                        param payload
                        log 'url', url
                        var output = document.querySelector("#output")
                        _ fetch
                            @ url
                            ._ then
                                =>
                                    param response
                                    if !response.ok
                                        throw Error(response.statusText)
                                    return response.json()
                            ._ then
                                =>
                                    param json
                                    set output.className = 'container'
                                    set output.innerHTML = wz.escapeHtml(JSON.stringify(json, null, 2))
                                    log 'exec_.response.json', json
                                    $*
                                    if getApiId === "/api/studio/document" || getApiId === "/api/studio/fragment"
                                        set document.getElementById('content').value = json.data.data
                                    *$
                            ._ catch
                                function 
                                    param err
                                    log 'exec_.response.err', err
                                    set output.className = 'container text-danger'
                                    set output.innerHTML = err && err.constructor && err.constructor.name === "Object" ? JSON.stringify(err, null, 2) : err

                    function exec_with_payload
                        param method
                        param url
                        param payload 
                        log 'url', url
                        log 'payload ', payload 
                        var output = document.querySelector("#output")
                        _ fetch
                            @ url
                            {
                                @ method method
                                { headers
                                    @ 'Accept' 'application/json'
                                    @ 'Content-Type' 'application/json'
                                @ body JSON.stringify(payload)
                            ._ then
                                =>
                                    param response
                                    return response.json()
                            ._ then
                                =>
                                    param json
                                    log 'exec_with_payload.response.json', json
                                    set output.className = 'container'
                                    set output.innerHTML = wz.escapeHtml(JSON.stringify(json, null, 2))
                            ._ catch
                                function 
                                    param err
                                    set output.className = 'container text-danger'
                                    set output.innerHTML = err.message || JSON.stringify({ err: err.error }, null, 2)