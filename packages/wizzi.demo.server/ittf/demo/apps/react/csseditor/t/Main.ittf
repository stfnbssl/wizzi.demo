$group

    
    $include main/functions
    $include main/styled
    
    react Main

        ctor
            set this.store = new LocalStorage('cssEditor')
            set this.storeSamples = new LocalStorage('cssEditorSamples')
            set this.state
                {
                    @ mainView 'view-editor'
                    @ currentSampleName ''
                    @ currentSample null
                    @ storedSamplesNames []
                    @ createNewSampleOpen false
                    @ newSampleName ''
                    @ newSampleHtml ''
                    @ ruleData null
                    @ htmlData ''
                    @ cssRule ''
                    @ editHtmlModalOpen false
                    @ htmlEdit ''
                    @ editRulesModalOpen false
                    @ rulesNoClassData []
                    @ rulesEdit ''
                    @ cssPreviewMode 'css'
                    { values

        did-mount
            let currentSample
            const recentSample = this.store.get('recentSample')
            log 'recentSample', recentSample
            if !recentSample
                _ this.createNewSample
                    @ 'sidebar'
            else
                log 'recentSample', recentSample
                _ this.setSample
                    @ recentSample

            set this.executeValuesChangeDebounced
                _ wz.debounce
                    =>
                        param cssRule
                        var sheetToBeRemoved = document.getElementById('demo_styles')
                        var sheetParent = sheetToBeRemoved.parentNode
                        _ sheetParent.removeChild(sheetToBeRemoved)                           
                        var sheetToBeAdded = document.createElement('style')
                        set sheetToBeAdded.id = 'demo_styles'
                        set sheetToBeAdded.innerHTML = cssRule
                        _ sheetParent.appendChild(sheetToBeAdded);            
                    @ 1000

        => handleMainViewChange                    
            param ev
            log 'handleMainViewChange', ev.target.id
            _ this.setState
                {
                    @ mainView ev.target.id

        => handleValuesChange
            param values
            log 'Main.handleValuesChange', values
            const newStateValues
                _ this.updateValues
                    @ values
            _ this.setState
                {
                    @ values values
                    @ cssRule newStateValues.cssRule
                    @ cssRuleIttf newStateValues.cssRuleIttf
                    @ cssRuleInJs newStateValues.cssRuleInJs
                =>
                    _ this.saveSample
                        @ newStateValues.ruleData
                    _ this.executeValuesChangeDebounced
                        @ newStateValues.cssRule    

        => handlePseudoRemove
            param ruleId
            const ruleIdObj = unpackRuleName(ruleId)
            let changed = false
            const newRuleData = []
            foreach r in this.state.ruleData
                if r.name == ruleIdObj.name && r.kind == ruleIdObj.kind && r.pseudo == ruleIdObj.pseudo
                    set changed = true
                else
                    _ newRuleData.push(r)
            if changed
                _ this.setState
                    {
                        @ ruleData newRuleData
                    =>
                        _ this.saveSample
                            @ newRuleData

        => handlePseudoAdd
            param ruleId
            const ruleIdObj = unpackRuleName(ruleId)
            const newRuleData = []
            foreach r in this.state.ruleData
                if r.name == ruleIdObj.name && r.kind == ruleIdObj.kind && r.pseudo == ruleIdObj.pseudo
                    return
                else
                    _ newRuleData.push(r)
            _ newRuleData.push
                {
                    @ name ruleIdObj.name
                    @ kind ruleIdObj.kind
                    @ pseudo ruleIdObj.pseudo
                    { styles
            _ this.setState
                {
                    @ ruleData newRuleData
                =>
                    _ this.saveSample
                        @ newRuleData

        $include main/methods
        $include main/handlers
        
        render

            if !this.state.currentSample
                return
                    h1
                        + ...loading...

            const cssRulePreview
                iif this.state.cssPreviewMode == 'css'
                    then this.state.cssRule
                    else
                        iif this.state.cssPreviewMode == 'css-ittf'
                            then this.state.cssRuleIttf
                            else this.state.cssRuleInJs

            return
                < React.Fragment
                    < StyleSampleRoot
                        < SampleTitleBar
                            {
                                &&
                                    + this.state.mainView == 'view-editor'
                                    < React.Fragment
                                        < FlexColumn
                                            @ width '20%'
                                            fieldset
                                                < SelectorLabel
                                                    @ size 'h1'
                                                    + Sample
                                                < SelectorSelectValue
                                                    @ onChange {this.handleChangeSample}
                                                    @ value {this.state.currentSampleName}
                                                    {
                                                        _ this.state.storedSamplesNames.map
                                                            =>
                                                                param sampleName
                                                                param ndx 
                                                                option
                                                                    @ key {ndx}
                                                                    @ value {sampleName}
                                                                    + {sampleName}
                                        < FlexRow
                                            < FlexColumn
                                                < Button
                                                    @ size 'h1'
                                                    @ onClick {this.handleAddSampleRequest}
                                                    + Add sample
                                            < FlexColumn
                                                < Button
                                                    @ size 'h1'
                                                    @ onClick {this.handleEditHtmlRequest}
                                                    + Edit html
                                            < FlexColumn
                                                < Button
                                                    @ size 'h1'
                                                    @ onClick {this.handleEditRulesRequest}
                                                    + Edit rules
                                        < FlexRow
                                            < FlexColumn
                                                < Button
                                                    @ size 'h1'
                                                    @ id 'view-docs'
                                                    @ onClick {this.handleMainViewChange}
                                                    + Docs
                            {
                                &&
                                    + this.state.mainView == 'view-docs'
                                    < FlexRow
                                        < FlexColumn
                                            < Button
                                                @ size 'h1'
                                                @ id 'view-editor'
                                                @ onClick {this.handleMainViewChange}
                                                + Editor

                        < SampleBody
                            {
                                &&
                                    + this.state.mainView == 'view-editor'
                                    < React.Fragment
                                        < RuleEditor
                                            @ cssDefs {this.props.cssDefs}
                                            @ ruleData {this.state.ruleData}
                                            @ onChange {this.handleValuesChange}
                                            @ onPseudoAdd {this.handlePseudoAdd}
                                            @ onPseudoRemove {this.handlePseudoRemove}
                                        < HtmlPreview
                                            @ dangerouslySetInnerHTML {{__html: this.state.htmlData}}
                                        < CssPreview
                                            < CssPreviewTb
                                                < FlexColumn
                                                    < Button
                                                        @ size 'h6'
                                                        @ id 'css'
                                                        @ onClick {this.handleSelectCssPreviewMode}
                                                        + Css
                                                < FlexColumn
                                                    < Button
                                                        @ size 'h6'
                                                        @ id 'css-ittf'
                                                        @ onClick {this.handleSelectCssPreviewMode}
                                                        + Ittf
                                                < FlexColumn
                                                    < Button
                                                        @ size 'h6'
                                                        @ id 'css-in-js'
                                                        @ onClick {this.handleSelectCssPreviewMode}
                                                        + Css-in-Js
                                            < CssPreviewBody
                                                pre
                                                    code
                                                        + {cssRulePreview}
                            {
                                &&
                                    + this.state.mainView == 'view-docs'
                                    < React.Fragment
                                        < Docs

                        $include main/modals           

