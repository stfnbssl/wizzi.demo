$group

    m createNewSample
        param sampleName
        param sampleDescription
        param sampleSchema
        param sampleContent
        param extra
        if this.state.mainView == 'view-generator'
            _ this.createNewGenSample
                @ sampleName
                @ sampleDescription
                @ sampleSchema
                @ sampleContent
                @ extra
        else
            _ this.createNewWizSample
                @ sampleName
                @ sampleDescription
                @ sampleSchema
                @ sampleContent

    m createNewGenSample
        param sampleName
        param sampleDescription
        param sampleSchema
        param sampleContent
        param extra
        let newSample
        if sampleName && sampleName.length > 0
            set newSample
                {
                    @ sampleName sampleName
                    @ schema sampleSchema
                    @ description sampleDescription 
                    @ mainIttfContent sampleContent
                    @ packiFiles {}
                    @ fragmentList (extra && extra.fragmentList) || []
                    @ dependencyList (extra && extra.dependencyList) || []
                    @ contextList (extra && extra.contextList) || []
        else
            set newSample
                {
                    @ sampleName __initial.genSampleData.name
                    @ schema __initial.genSampleData.schema
                    @ description __initial.genSampleData.description
                    @ mainIttfContent __initial.genSampleData.contentLines.join('\n')
                    @ packiFiles {}
                    @ fragmentList __initial.genSampleData.fragmentList
                    @ dependencyList __initial.genSampleData.dependencyList
                    @ contextList __initial.genSampleData.contextList

        const mainIttfPath = 'index.' + newSample.schema + '.ittf'

        set newSample.packiFiles
            _ wz.fileListToPacki
                [
                    {
                        @ path mainIttfPath
                        @ contents newSample.mainIttfContent
                    @ newSample.fragmentList
                    @ newSample.contextList
        
        _ this.storeGenSamples.set
            @ newSample.sampleName
            _ JSON.stringify
                @ newSample
        
        _ this.store.set
            @ 'recentGenSample'
            @ newSample.sampleName
        
        _ this.setState
            {
                @ currentSampleName newSample.sampleName
                @ currentSampleSchema newSample.schema
                @ currentSampleDescription newSample.description
                @ storedSamplesNames this.storeGenSamples.getAllKeys()
                @ genMainIttfContent newSample.mainIttfContent
                @ genFragmentList newSample.fragmentList
                @ genDependencyList newSample.dependencyList
                @ genContextList newSample.contextList
                @ genPackiFiles newSample.packiFiles
                @ genSelectedEditPath mainIttfPath
                @ genSelectedEditPackiPath mainIttfPath

    m createNewWizSample
        param sampleName
        param sampleDescription
        param sampleSchema
        param sampleContent
        let newSample
        if sampleName && sampleName.length > 0
            set newSample
                {
                    @ sampleName sampleName
                    @ schema sampleSchema
                    @ description sampleDescription
                    @ content sampleContent
        else
            set newSample
                {
                    @ sampleName __initial.wizSampleData.name
                    @ schema __initial.wizSampleData.schema
                    @ description __initial.wizSampleData.description
                    @ content __initial.wizSampleData.contentLines.join('\n')
        
        _ this.storeWizSamples.set
            @ newSample.sampleName
            _ JSON.stringify
                @ newSample
        
        _ this.store.set
            @ 'recentWizSample'
            @ newSample.sampleName
        
        _ this.setState
            {
                @ currentSampleName newSample.sampleName
                @ currentSampleSchema newSample.schema
                @ currentSampleDescription newSample.description
                @ storedSamplesNames this.storeWizSamples.getAllKeys()

    m setSample
        param sampleName
        if this.state.mainView == 'view-generator'
            _ this.setGenSample
                @ sampleName
        else
            _ this.setWizSample
                @ sampleName

    m setGenSample
        param sampleName
        const currentSampleText = this.storeGenSamples.get(sampleName)
        log 'currentSampleText', currentSampleText
        const currentSample
            _ JSON.parse
                @ currentSampleText
        log 'currentSample', currentSample
        _ this.store.set
            @ 'recentGenSample'
            @ sampleName
        const storedSamplesNames = this.storeGenSamples.getAllKeys()
        const mainIttfPath = 'index.' + currentSample.schema + '.ittf'
        _ this.setState
            {
                @ currentSampleName currentSample.sampleName
                @ currentSampleSchema currentSample.schema
                @ currentSampleDescription currentSample.description
                @ storedSamplesNames storedSamplesNames
                @ genMainIttfContent currentSample.mainIttfContent 
                @ genFragmentList currentSample.fragmentList || []
                @ genDependencyList currentSample.dependencyList || []
                @ genContextList currentSample.contextList || []
                @ genPackiFiles currentSample.packiFiles
                @ genSelectedEditPath mainIttfPath
                @ genSelectedEditPackiPath mainIttfPath
    
    m setWizSample
        param sampleName
        const currentSampleText = this.storeWizSamples.get(sampleName)
        log 'currentSampleText', currentSampleText
        const currentSample
            _ JSON.parse
                @ currentSampleText
        log 'currentSample', currentSample
        _ this.store.set
            @ 'recentWizSample'
            @ sampleName
        const storedSamplesNames = this.storeWizSamples.getAllKeys()
        _ this.setState
            {
                @ currentSampleName currentSample.sampleName
                @ currentSampleSchema currentSample.schema
                @ currentSampleDescription currentSample.description
                @ storedSamplesNames storedSamplesNames
                @ wizContent currentSample.content 

    m saveSample
        if this.state.mainView == 'view-generator'
            const newSampleData
                {
                    @ sampleName this.state.currentSampleName
                    @ schema this.state.currentSampleSchema
                    @ description this.state.currentSampleDescription
                    @ mainIttfContent this.state.genMainIttfContent
                    @ fragmentList this.state.genFragmentList
                    @ dependencyList this.state.genDependencyList
                    @ contextList this.state.genContextList
                    @ packiFiles this.state.genPackiFiles
            _ this.storeGenSamples.set
                @ this.state.currentSampleName
                _ JSON.stringify
                    @ newSampleData
        else
            const newSampleData
                {
                    @ sampleName this.state.currentSampleName
                    @ schema this.state.currentSampleSchema
                    @ description this.state.currentSampleDescription
                    @ content this.state.wizContent
            _ this.storeWizSamples.set
                @ this.state.currentSampleName
                _ JSON.stringify
                    @ newSampleData

    m getSampleMainIttfContentPath
        return 'index.' + this.state.currentSampleSchema + '.ittf'

    m getSelectedMainIttfContentPath
        param showGeneratedContext
        if this.state.genSelectedEditPath == this.getSampleMainIttfContentPath()
            return this.getSampleMainIttfContentPath()
        const fragment
            _ this.state.genFragmentList.find
                =>
                    param item
                    return item.path == this.state.genSelectedEditPath
        if fragment
            return this.getSampleMainIttfContentPath()
        const context
            _ this.state.genContextList.find
                =>
                    param item
                    return item.path == this.state.genSelectedEditPath
        if context && context.isFragment
            return this.getSampleMainIttfContentPath()
        else
            return showGeneratedContext ? context.packiPath : this.getSampleMainIttfContentPath()

    m getPackiPath
        param path
        if path == this.getSampleMainIttfContentPath()
            return path
        const fragment
            _ this.state.genFragmentList.find
                =>
                    param item
                    return item.path == path
        if fragment
            return fragment.packiPath
        const context
            _ this.state.genContextList.find
                =>
                    param item
                    return item.path == this.state.genSelectedEditPath
        if context
            return context.packiPath
        else
            throw new Error('getPackiPath failed, is a bug.')

