$group

    m createNewSheet
        param name
        param description
        param schema
        param mainIttfContent
        param extra
        +
        let newSheet
        if name && name.length > 0
            set newSheet
                {
                    @ sheetName name
                    @ schema schema
                    @ description description 
                    @ mainIttfContent mainIttfContent
                    @ itemList (extra && extra.itemList) || []
                    @ packiFiles {}
        else
            set newSheet
                {
                    @ sheetName __initial.sheetData.name
                    @ schema __initial.sheetData.schema
                    @ description __initial.sheetData.description
                    @ mainIttfContent __initial.sheetData.contentLines.join('\n')
                    @ itemList __initial.sheetData.itemList
                    @ packiFiles {}

        const mainIttfPath = newSheet.sheetName + '/index.ittf.ittf'

        set newSheet.packiFiles
            _ wz.fileListToPacki
                [
                    {
                        @ path mainIttfPath
                        @ contents newSheet.mainIttfContent
                    @ newSheet.itemList

        _ this.storeSheets.set
            @ newSheet.sheetName
            _ JSON.stringify
                @ newSheet
        
        _ this.store.set
            @ 'recentSheet'
            @ newSheet.sheetName
        
        _ this.setState
            {
                @ sheetName newSheet.sheetName
                @ schema newSheet.schema
                @ description newSheet.description
                @ storedSheetsNames this.storeSheets.getAllKeys()
                @ mainIttfContent newSheet.mainIttfContent
                @ itemList newSheet.itemList
                @ packiFiles newSheet.packiFiles
                @ selectedEditPath mainIttfPath
                @ selectedEditPackiPath mainIttfPath

    m setSheet
        param sheetName
        const sheetText = this.storeSheets.get(sheetName)
        log 'sheetText', sheetText
        const sheet
            _ JSON.parse
                @ sheetText
        log 'sheet', sheet
        _ this.store.set
            @ 'recentSheet'
            @ sheetName
        const storedSheetsNames = this.storeSheets.getAllKeys()
        const mainIttfPath = sheetName + '/index.ittf.ittf'
        _ this.setState
            {
                @ sheetName sheet.sheetName
                @ schema sheet.schema
                @ description sheet.description
                @ storedSheetsNames storedSheetsNames
                @ mainIttfContent sheet.mainIttfContent
                @ itemList sheet.itemList || []
                @ packiFiles sheet.packiFiles
                @ selectedEditPath mainIttfPath
                @ selectedEditPackiPath mainIttfPath
    
    m saveSheet
        const newSheetData
            {
                @ sheetName this.state.sheetName
                @ schema this.state.schema
                @ description this.state.description
                @ mainIttfContent this.state.mainIttfContent
                @ itemList this.state.itemList
                @ packiFiles this.state.packiFiles
        _ this.storeSheets.set
            @ this.state.sheetName
            _ JSON.stringify
                @ newSheetData

    m getMainIttfContentPath
        return this.state.sheetName + '/index.ittf.ittf'

    m getSelectedMainIttfContentPath
        if this.state.selectedEditPath == this.getMainIttfContentPath()
            return this.getMainIttfContentPath()
        const fragment
            _ this.state.itemList.find
                =>
                    param item
                    return item.name == this.state.selectedEditPath
        if fragment
            return this.getMainIttfContentPath()

    m getPackiPath
        param name
        if name == this.getMainIttfContentPath()
            return name
        const fragment
            _ this.state.itemList.find
                =>
                    param item
                    return item.name == name
        if fragment
            return fragment.packiPath
        else
            throw new Error('getPackiPath failed, is a bug.')