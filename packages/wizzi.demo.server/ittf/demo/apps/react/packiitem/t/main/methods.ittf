$group

    m createNewPackiItem
        param name
        param description
        param schema
        param mainIttfContent
        param extra
        +
        let newPackiItem
        if name && name.length > 0
            set newPackiItem
                {
                    @ packiItemName name
                    @ schema schema
                    @ description description 
                    @ mainIttfContent mainIttfContent
                    @ fragmentList (extra && extra.fragmentList) || []
                    @ packiFiles {}
        else
            set newPackiItem
                {
                    @ packiItemName __initial.packiItemData.name
                    @ schema __initial.packiItemData.schema
                    @ description __initial.packiItemData.description
                    @ mainIttfContent __initial.packiItemData.contentLines.join('\n')
                    @ fragmentList __initial.packiItemData.fragmentList
                    @ packiFiles {}

        const packiItemUrl = wz.packi.webUrl + 'packi/' + newPackiItem.packiItemName
        const mainIttfPath = newPackiItem.packiItemName + '/index.' + newPackiItem.schema +'.ittf'

        set newPackiItem.packiFiles
            _ wz.fileListToPacki
                [
                    {
                        @ path mainIttfPath
                        @ contents newPackiItem.mainIttfContent
                    @ newPackiItem.fragmentList

        _ this.storePackiItems.set
            @ newPackiItem.packiItemName
            _ JSON.stringify
                @ newPackiItem
        
        _ this.store.set
            @ 'recentPackiItem'
            @ newPackiItem.packiItemName
        
        _ this.setState
            {
                @ packiItemName newPackiItem.packiItemName
                @ schema newPackiItem.schema
                @ description newPackiItem.description
                @ storedPackiItemsNames this.storePackiItems.getAllKeys()
                @ mainIttfContent newPackiItem.mainIttfContent
                @ fragmentList newPackiItem.fragmentList
                @ packiFiles newPackiItem.packiFiles
                @ packiItemUrl packiItemUrl
                @ packiItemUrlRefreshCount 0
                @ selectedEditPath mainIttfPath
                @ selectedEditPackiPath mainIttfPath

    m setPackiItem
        param packiItemName
        const packiItemText = this.storePackiItems.get(packiItemName)
        # log 'packiItemText', packiItemText
        const packiItem
            _ JSON.parse
                @ packiItemText
        # log 'packiItem', packiItem
        _ this.store.set
            @ 'recentPackiItem'
            @ packiItemName
        const storedPackiItemsNames = this.storePackiItems.getAllKeys()
        const mainIttfPath = packiItemName + '/index.' + packiItem.schema +'.ittf'
        const packiItemUrl = wz.packi.webUrl + '/packi/' + packiItemName
        _ this.setState
            {
                @ packiItemName packiItem.packiItemName
                @ schema packiItem.schema
                @ description packiItem.description
                @ storedPackiItemsNames storedPackiItemsNames
                @ mainIttfContent packiItem.mainIttfContent
                @ fragmentList packiItem.fragmentList || []
                @ packiFiles packiItem.packiFiles
                @ packiItemUrl packiItemUrl
                @ packiItemUrlRefreshCount 0
                @ selectedEditPath mainIttfPath
                @ selectedEditPackiPath mainIttfPath
    
    m savePackiItem
        const newPackiItemData
            {
                @ packiItemName this.state.packiItemName
                @ schema this.state.schema
                @ description this.state.description
                @ mainIttfContent this.state.mainIttfContent
                @ fragmentList this.state.fragmentList
                @ packiFiles this.state.packiFiles
        _ this.storePackiItems.set
            @ this.state.packiItemName
            _ JSON.stringify
                @ newPackiItemData

    m getMainIttfContentPath
        return this.state.packiItemName + '/index.' + this.state.schema + '.ittf'

    m getSelectedMainIttfContentPath
        if this.state.selectedEditPath == this.getMainIttfContentPath()
            return this.getMainIttfContentPath()
        const fragment
            _ this.state.fragmentList.find
                =>
                    param item
                    return item.name == this.state.selectedEditPath
        if fragment
            return this.getMainIttfContentPath()

    m getPackiPath
        param name
        if name == this.getMainIttfContentPath()
            return name
        const fragment
            _ this.state.fragmentList.find
                =>
                    param item
                    return item.name == name
        if fragment
            return fragment.packiPath
        else
            throw new Error('getPackiPath failed, is a bug.')