{
	"AstgNodes": [
		{
			"name": "File",
			"ittfTag": "File",
			"skip": true,
			"props": []
		},
		{
			"name": "Program",
			"ittfTag": "Program",
			"skip": true,
			"props": []
		},
		{
			"name": "Identifier",
			"ittfTag": "@id",
			"isText": true,
			"props": []
		},
		{
			"name": "PrivateName",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "RegExpLiteral",
			"ittfTag": "literal",
			"isText": true,
			"props": []
		},
		{
			"name": "NullLiteral",
			"ittfTag": "literal",
			"isText": true,
			"props": []
		},
		{
			"name": "StringLiteral",
			"ittfTag": "literal",
			"isText": true,
			"props": []
		},
		{
			"name": "BooleanLiteral",
			"ittfTag": "literal",
			"isText": true,
			"props": []
		},
		{
			"name": "NumericLiteral",
			"ittfTag": "literal",
			"isText": true,
			"props": []
		},
		{
			"name": "Function",
			"ittfTag": "function",
			"props": []
		},
		{
			"name": "ExpressionStatement",
			"ittfTag": "stm",
			"props": []
		},
		{
			"name": "BlockStatement",
			"ittfTag": "block",
			"skip": true,
			"props": []
		},
		{
			"name": "EmptyStatement",
			"ittfTag": "",
			"props": []
		},
		{
			"name": "DebuggerStatement",
			"ittfTag": "debugger",
			"props": []
		},
		{
			"name": "WithStatement",
			"ittfTag": "with",
			"props": []
		},
		{
			"name": "ReturnStatement",
			"ittfTag": "return",
			"props": []
		},
		{
			"name": "LabeledStatement",
			"ittfTag": "label",
			"props": []
		},
		{
			"name": "BreakStatement",
			"ittfTag": "break",
			"props": []
		},
		{
			"name": "ContinueStatement",
			"ittfTag": "continue",
			"props": []
		},
		{
			"name": "IfStatement",
			"ittfTag": "if",
			"retIsArray": true,
			"props": []
		},
		{
			"name": "SwitchStatement",
			"ittfTag": "switch",
			"props": []
		},
		{
			"name": "SwitchCase",
			"ittfTag": "case",
			"props": []
		},
		{
			"name": "ThrowStatement",
			"ittfTag": "throw",
			"props": []
		},
		{
			"name": "TryStatement",
			"ittfTag": "try",
			"retIsArray": true,
			"props": []
		},
		{
			"name": "CatchClause",
			"ittfTag": "catch",
			"props": []
		},
		{
			"name": "WhileStatement",
			"ittfTag": "while",
			"props": []
		},
		{
			"name": "DoWhileStatement",
			"ittfTag": "do",
			"props": []
		},
		{
			"name": "ForStatement",
			"ittfTag": "for",
			"props": []
		},
		{
			"name": "ForInStatement",
			"ittfTag": "for",
			"props": []
		},
		{
			"name": "ForOfStatement",
			"ittfTag": "for",
			"props": []
		},
		{
			"name": "FunctionDeclaration",
			"ittfTag": "function",
			"props": []
		},
		{
			"name": "VariableDeclaration",
			"ittfTag": "node.kind",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "VariableDeclarator",
			"ittfTag": "decl",
			"props": []
		},
		{
			"name": "Decorator",
			"ittfTag": "@d",
			"props": []
		},
		{
			"name": "Directive",
			"ittfTag": "directive",
			"props": []
		},
		{
			"name": "DirectiveLiteral",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "Expression",
			"ittfTag": "expr",
			"props": []
		},
		{
			"name": "Super",
			"ittfTag": "super",
			"isText": true,
			"props": []
		},
		{
			"name": "Import",
			"ittfTag": "import",
			"props": []
		},
		{
			"name": "ThisExpression",
			"ittfTag": "this",
			"isText": true,
			"props": []
		},
		{
			"name": "ArrowFunctionExpression",
			"ittfTag": "=>",
			"props": []
		},
		{
			"name": "YieldExpression",
			"ittfTag": "yield",
			"props": []
		},
		{
			"name": "AwaitExpression",
			"ittfTag": "await",
			"props": []
		},
		{
			"name": "ArrayExpression",
			"ittfTag": "[",
			"props": []
		},
		{
			"name": "ObjectExpression",
			"ittfTag": "{",
			"props": []
		},
		{
			"name": "ObjectProperty",
			"ittfTag": "@",
			"props": []
		},
		{
			"name": "ObjectMethod",
			"ittfTag": "node.kind",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "FunctionExpression",
			"ittfTag": "function",
			"props": []
		},
		{
			"name": "UnaryExpression",
			"ittfTag": "'op' + node.operator",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "UpdateExpression",
			"ittfTag": "'op' + node.operator",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "BinaryExpression",
			"ittfTag": "'op' + node.operator",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "AssignmentExpression",
			"ittfTag": "set",
			"props": []
		},
		{
			"name": "LogicalExpression",
			"ittfTag": "'op' + node.operator",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "SpreadElement",
			"ittfTag": "...",
			"props": []
		},
		{
			"name": "MemberExpression",
			"ittfTag": "@expr",
			"props": []
		},
		{
			"name": "BindExpression",
			"ittfTag": "bind-expr",
			"props": []
		},
		{
			"name": "ConditionalExpression",
			"ittfTag": "iif",
			"props": []
		},
		{
			"name": "CallExpression",
			"ittfTag": "_",
			"props": []
		},
		{
			"name": "NewExpression",
			"ittfTag": "new",
			"couldBeText": true,
			"props": []
		},
		{
			"name": "SequenceExpression",
			"ittfTag": "sequence",
			"props": []
		},
		{
			"name": "DoExpression",
			"ittfTag": "do",
			"props": []
		},
		{
			"name": "TemplateLiteral",
			"ittfTag": "`lit",
			"props": []
		},
		{
			"name": "TaggedTemplateExpression",
			"ittfTag": "_`",
			"props": []
		},
		{
			"name": "TemplateElement",
			"ittfTag": "+",
			"props": []
		},
		{
			"name": "ObjectPattern",
			"ittfTag": "{",
			"props": []
		},
		{
			"name": "ArrayPattern",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "RestElement",
			"ittfTag": "...",
			"props": []
		},
		{
			"name": "AssignmentPattern",
			"ittfTag": "node.operator||'='",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "Class",
			"ittfTag": "class",
			"props": []
		},
		{
			"name": "ClassBody",
			"ittfTag": "ClassBody",
			"skip": true,
			"props": []
		},
		{
			"name": "ClassMethod",
			"ittfTag": "node.kind",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "ClassPrivateMethod",
			"ittfTag": "node.kind",
			"tagIsVar": true,
			"props": []
		},
		{
			"name": "ClassProperty",
			"ittfTag": "p",
			"props": []
		},
		{
			"name": "ClassPrivateProperty",
			"ittfTag": "p",
			"props": []
		},
		{
			"name": "ClassDeclaration",
			"ittfTag": "class",
			"props": []
		},
		{
			"name": "ClassExpression",
			"ittfTag": "class",
			"props": []
		},
		{
			"name": "MetaProperty",
			"ittfTag": "meta",
			"props": []
		},
		{
			"name": "ModuleDeclaration",
			"ittfTag": "module",
			"props": []
		},
		{
			"name": "ImportDeclaration",
			"ittfTag": "import",
			"props": []
		},
		{
			"name": "ImportSpecifier",
			"ittfTag": "@",
			"props": []
		},
		{
			"name": "ImportDefaultSpecifier",
			"ittfTag": "default",
			"props": []
		},
		{
			"name": "ImportNamespaceSpecifier",
			"ittfTag": "as",
			"props": []
		},
		{
			"name": "ExportNamedDeclaration",
			"ittfTag": "export",
			"props": []
		},
		{
			"name": "ExportSpecifier",
			"ittfTag": "@",
			"props": []
		},
		{
			"name": "ExportDefaultSpecifier",
			"ittfTag": "default",
			"props": []
		},
		{
			"name": "ExportDefaultDeclaration",
			"ittfTag": "export-default",
			"props": []
		},
		{
			"name": "ExportNamespaceSpecifier",
			"ittfTag": "as",
			"props": []
		},
		{
			"name": "ExportAllDeclaration",
			"ittfTag": "export",
			"props": []
		},
		{
			"name": "CommentBlock",
			"ittfTag": "#",
			"props": []
		},
		{
			"name": "CommentLine",
			"ittfTag": "#",
			"props": []
		},
		{
			"name": "JSXAttribute",
			"ittfTag": "@",
			"props": []
		},
		{
			"name": "JSXClosingElement",
			"ittfTag": "jsx-close",
			"props": []
		},
		{
			"name": "JSXElement",
			"ittfTag": "jsx-element",
			"props": []
		},
		{
			"name": "JSXEmptyExpression",
			"ittfTag": "JSXEmptyExpression",
			"skip": true,
			"props": []
		},
		{
			"name": "JSXExpressionContainer",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "JSXSpreadChild",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "JSXIdentifier",
			"ittfTag": "jsx-ident",
			"isText": true,
			"props": []
		},
		{
			"name": "JSXMemberExpression",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "JSXNamespacedName",
			"ittfTag": "none",
			"props": []
		},
		{
			"name": "JSXOpeningElement",
			"ittfTag": "jsx-open",
			"props": []
		},
		{
			"name": "JSXSpreadAttribute",
			"ittfTag": "@",
			"props": []
		},
		{
			"name": "JSXText",
			"ittfTag": "+",
			"props": []
		},
		{
			"name": "JSXFragment",
			"ittfTag": "<",
			"props": []
		},
		{
			"name": "JSXOpeningFragment",
			"ittfTag": "fragment-open",
			"props": []
		},
		{
			"name": "JSXClosingFragment",
			"ittfTag": "fragment-close",
			"props": []
		},
		{
			"name": "TypeAlias",
			"ittfTag": ":type",
			"props": []
		},
		{
			"name": "OpaqueType",
			"ittfTag": ":opaque-type",
			"props": []
		},
		{
			"name": "TypeParameterDeclaration",
			"ittfTag": "TypeParameterDeclaration",
			"skip": true,
			"props": []
		},
		{
			"name": "TypeParameter",
			"ittfTag": ":<",
			"props": []
		},
		{
			"name": "Variance",
			"ittfTag": ":variance",
			"props": []
		},
		{
			"name": "TypeParameterInstantiation",
			"ittfTag": "TypeParameterInstantiation",
			"skip": true,
			"props": []
		},
		{
			"name": "VoidTypeAnnotation",
			"ittfTag": ":void",
			"props": []
		},
		{
			"name": "UndefinedTypeAnnotation",
			"ittfTag": ":undefined",
			"props": []
		},
		{
			"name": "NullLiteralTypeAnnotation",
			"ittfTag": ":null",
			"props": []
		},
		{
			"name": "GenericTypeAnnotation",
			"ittfTag": ":<",
			"props": []
		},
		{
			"name": "StringTypeAnnotation",
			"ittfTag": ":string",
			"props": []
		},
		{
			"name": "TSSymbolKeyword",
			"ittfTag": ":symbol",
			"props": []
		},
		{
			"name": "AnyTypeAnnotation",
			"ittfTag": ":any",
			"props": []
		},
		{
			"name": "ArrayTypeAnnotation",
			"ittfTag": ":[",
			"props": []
		},
		{
			"name": "BooleanLiteralTypeAnnotation",
			"ittfTag": ":boolean-lit",
			"props": []
		},
		{
			"name": "BooleanTypeAnnotation",
			"ittfTag": ":boolean",
			"props": []
		},
		{
			"name": "ClassImplements",
			"ittfTag": ":implements",
			"props": []
		},
		{
			"name": "FunctionTypeAnnotation",
			"ittfTag": ":func",
			"props": []
		},
		{
			"name": "FunctionTypeParam",
			"ittfTag": ":param",
			"props": []
		},
		{
			"name": "InterfaceExtends",
			"ittfTag": ":extends-interface",
			"props": []
		},
		{
			"name": "InterfaceDeclaration",
			"ittfTag": ":interface",
			"props": []
		},
		{
			"name": "IntersectionTypeAnnotation",
			"ittfTag": ":&",
			"props": []
		},
		{
			"name": "MixedTypeAnnotation",
			"ittfTag": ":mixed",
			"props": []
		},
		{
			"name": "NullableTypeAnnotation",
			"ittfTag": "NullableTypeAnnotation",
			"skip": true,
			"props": []
		},
		{
			"name": "NumberLiteralTypeAnnotation",
			"ittfTag": ":number-lit",
			"props": []
		},
		{
			"name": "NumberTypeAnnotation",
			"ittfTag": ":number",
			"props": []
		},
		{
			"name": "StringLiteralTypeAnnotation",
			"ittfTag": ":string-lit",
			"props": []
		},
		{
			"name": "StringTypeAnnotation",
			"ittfTag": ":string",
			"props": []
		},
		{
			"name": "TupleTypeAnnotation",
			"ittfTag": ":tuple",
			"props": []
		},
		{
			"name": "TypeofTypeAnnotation",
			"ittfTag": ":typeof",
			"props": []
		},
		{
			"name": "TypeAnnotation",
			"ittfTag": ":t",
			"skip": true,
			"props": []
		},
		{
			"name": "TypeCastExpression",
			"ittfTag": ":cast",
			"props": []
		},
		{
			"name": "ObjectTypeAnnotation",
			"ittfTag": ":{",
			"props": []
		},
		{
			"name": "ObjectTypeCallProperty",
			"ittfTag": ":call-prop",
			"props": []
		},
		{
			"name": "ObjectTypeIndexer",
			"ittfTag": ":[]",
			"props": []
		},
		{
			"name": "ObjectTypeProperty",
			"ittfTag": ":@",
			"props": []
		},
		{
			"name": "QualifiedTypeIdentifier",
			"ittfTag": ":q-type",
			"props": []
		},
		{
			"name": "UnionTypeAnnotation",
			"ittfTag": ":|",
			"props": []
		},
		{
			"name": "ExistsTypeAnnotation",
			"ittfTag": ":exists-type",
			"props": []
		},
		{
			"name": "InferredPredicate",
			"ittfTag": ":predicate",
			"props": []
		},
		{
			"name": "TSObjectKeyword",
			"ittfTag": ":object",
			"props": []
		},
		{
			"name": "TSInterfaceDeclaration",
			"ittfTag": ":interface",
			"props": []
		},
		{
			"name": "TSInterfaceBody",
			"ittfTag": "TSInterfaceBody",
			"skip": true,
			"props": []
		},
		{
			"name": "TSConstructorType",
			"ittfTag": ":ctor",
			"props": []
		},
		{
			"name": "TSConstructSignatureDeclaration",
			"ittfTag": ":new",
			"props": []
		},
		{
			"name": "TSCallSignatureDeclaration",
			"ittfTag": ":call",
			"props": []
		},
		{
			"name": "TSPropertySignature",
			"ittfTag": ":p",
			"props": []
		},
		{
			"name": "TSIndexSignature",
			"ittfTag": ":index",
			"props": []
		},
		{
			"name": "TSIndexedAccessType",
			"ittfTag": ":[]",
			"props": []
		},
		{
			"name": "TSModuleDeclaration",
			"ittfTag": ":module",
			"props": []
		},
		{
			"name": "TSModuleBlock",
			"ittfTag": "TSModuleBlock",
			"skip": true,
			"props": []
		},
		{
			"name": "TSDeclareFunction",
			"ittfTag": ":function",
			"props": []
		},
		{
			"name": "TSFunctionType",
			"ittfTag": ":=>",
			"props": []
		},
		{
			"name": "TSMethodSignature",
			"ittfTag": ":m",
			"props": []
		},
		{
			"name": "TSTypeAnnotation",
			"ittfTag": "TSTypeAnnotation",
			"skip": true,
			"props": []
		},
		{
			"name": "TSTypeParameterInstantiation",
			"ittfTag": "TSTypeParameterInstantiation",
			"skip": true,
			"props": []
		},
		{
			"name": "TSTypeParameterDeclaration",
			"ittfTag": "TSTypeParameterDeclaration",
			"skip": true,
			"props": []
		},
		{
			"name": "TSTypeParameter",
			"ittfTag": ":<",
			"props": []
		},
		{
			"name": "TSParameterProperty",
			"ittfTag": ":ts-param-prop",
			"props": []
		},
		{
			"name": "TSTypeReference",
			"ittfTag": ":ref",
			"props": []
		},
		{
			"name": "TSExpressionWithTypeArguments",
			"ittfTag": ":exprwithtypeargs",
			"props": []
		},
		{
			"name": "TSAsExpression",
			"ittfTag": ":as",
			"props": []
		},
		{
			"name": "TSTupleType",
			"ittfTag": ":tuple",
			"props": []
		},
		{
			"name": "TSUnionType",
			"ittfTag": ":union",
			"props": []
		},
		{
			"name": "TSIntersectionType",
			"ittfTag": ":intersect",
			"props": []
		},
		{
			"name": "TSEnumDeclaration",
			"ittfTag": ":enum",
			"props": []
		},
		{
			"name": "TSEnumMember",
			"ittfTag": "@",
			"props": []
		},
		{
			"name": "TSNeverKeyword",
			"ittfTag": ":never",
			"props": []
		},
		{
			"name": "TSTypePredicate",
			"ittfTag": ":predicate",
			"props": []
		},
		{
			"name": "TSTypeLiteral",
			"ittfTag": ":{",
			"props": []
		},
		{
			"name": "TSTypeOperator",
			"ittfTag": ":type-operator",
			"props": []
		},
		{
			"name": "TSNonNullExpression",
			"ittfTag": ":!",
			"props": []
		},
		{
			"name": "TSTypeAliasDeclaration",
			"ittfTag": ":type",
			"props": []
		},
		{
			"name": "TSLiteralType",
			"ittfTag": ":literal",
			"props": []
		},
		{
			"name": "TSConditionalType",
			"ittfTag": ":iif",
			"props": []
		},
		{
			"name": "TSMappedType",
			"ittfTag": ":mapped",
			"props": []
		},
		{
			"name": "TSTypeQuery",
			"ittfTag": ":typeof",
			"props": []
		},
		{
			"name": "TSInferType",
			"ittfTag": ":infer",
			"props": []
		},
		{
			"name": "TSParenthesizedType",
			"ittfTag": ":paren",
			"props": []
		},
		{
			"name": "TSDeclareMethod",
			"ittfTag": ":m",
			"props": []
		},
		{
			"name": "TSQualifiedName",
			"ittfTag": ":qname",
			"props": []
		},
		{
			"name": "TSExportAssignment",
			"ittfTag": ":export",
			"props": []
		},
		{
			"name": "TSImportType",
			"ittfTag": ":import-type",
			"props": []
		},
		{
			"name": "TSImportEqualsDeclaration",
			"ittfTag": ":import",
			"props": []
		},
		{
			"name": "TSNamespaceExportDeclaration",
			"ittfTag": ":export-ns",
			"props": []
		},
		{
			"name": "TSExternalModuleReference",
			"ittfTag": ":require",
			"props": []
		},
		{
			"name": "TSUnknownKeyword",
			"ittfTag": ":unknown",
			"props": []
		}
	]
}