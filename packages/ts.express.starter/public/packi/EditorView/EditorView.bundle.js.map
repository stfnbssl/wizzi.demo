{"version":3,"file":"EditorView/EditorView.bundle.js","sources":["webpack://wizzi.editor/./src/assets/AstIcon.tsx","webpack://wizzi.editor/./src/assets/BrowserIcon.tsx","webpack://wizzi.editor/./src/assets/CloseIcon.tsx","webpack://wizzi.editor/./src/assets/DebugIcon.tsx","webpack://wizzi.editor/./src/assets/EditIcon.tsx","webpack://wizzi.editor/./src/assets/SaveIcon.tsx","webpack://wizzi.editor/./src/assets/WizziIcon.tsx","webpack://wizzi.editor/./src/assets/WizzifiedIcon.tsx","webpack://wizzi.editor/./src/components/CodeView/SyntaxHighlighter.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorFooter.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorPanels.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorToolbar.tsx","webpack://wizzi.editor/./src/components/EditorView/EditorView.tsx","webpack://wizzi.editor/./src/components/EditorView/GeneratedView.tsx","webpack://wizzi.editor/./src/components/EditorView/GenerationErrors.tsx","webpack://wizzi.editor/./src/components/EditorView/KeyboardShortcuts.tsx","webpack://wizzi.editor/./src/components/EditorView/ModalProductionDetails.tsx","webpack://wizzi.editor/./src/components/EditorView/NoFileSelected.tsx","webpack://wizzi.editor/./src/components/EditorView/ProblemsPanel.tsx","webpack://wizzi.editor/./src/components/EditorView/UserMenu.tsx","webpack://wizzi.editor/./src/components/FileList/FileList.tsx","webpack://wizzi.editor/./src/components/FileList/FileListChildren.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntry.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntryBase.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntryDropTarget.tsx","webpack://wizzi.editor/./src/components/FileList/FileListEntryIcon.tsx","webpack://wizzi.editor/./src/components/FileList/FileListOpenEntry.tsx","webpack://wizzi.editor/./src/components/FileList/FileListPane.tsx","webpack://wizzi.editor/./src/components/FileList/FileListPaneButton.tsx","webpack://wizzi.editor/./src/components/FileList/actions/closeEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/createEntryAtPath.tsx","webpack://wizzi.editor/./src/components/FileList/actions/createNewEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/expandEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/openEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/pasteEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/recursivelyCreateParents.tsx","webpack://wizzi.editor/./src/components/FileList/actions/renameEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/selectEntry.tsx","webpack://wizzi.editor/./src/components/FileList/actions/updateEntry.tsx","webpack://wizzi.editor/./src/components/FileList/utils/convertFileStructure.tsx","webpack://wizzi.editor/./src/components/Packi/ModalGithubClone.tsx","webpack://wizzi.editor/./src/components/Packi/PackiPanel.tsx","webpack://wizzi.editor/./src/components/PageMetadata.tsx","webpack://wizzi.editor/./src/components/widgets/Avatar.tsx","webpack://wizzi.editor/./src/components/widgets/Banner.tsx","webpack://wizzi.editor/./src/components/widgets/ContextMenu.tsx","webpack://wizzi.editor/./src/components/widgets/FooterButton.tsx","webpack://wizzi.editor/./src/components/widgets/IconButton.tsx","webpack://wizzi.editor/./src/components/widgets/KeybindingsManager.tsx","webpack://wizzi.editor/./src/components/widgets/LargeInput.tsx","webpack://wizzi.editor/./src/components/widgets/LargeTextArea.tsx","webpack://wizzi.editor/./src/components/widgets/LoadingText.tsx","webpack://wizzi.editor/./src/components/widgets/MenuButton.tsx","webpack://wizzi.editor/./src/components/widgets/Modal.tsx","webpack://wizzi.editor/./src/components/widgets/ModalDialog.tsx","webpack://wizzi.editor/./src/components/widgets/ModalSheet.tsx","webpack://wizzi.editor/./src/components/widgets/ResizablePane.tsx","webpack://wizzi.editor/./src/components/widgets/ShortcutLabel.tsx","webpack://wizzi.editor/./src/components/widgets/Toast.tsx","webpack://wizzi.editor/./src/components/widgets/ToggleSwitch.tsx","webpack://wizzi.editor/./src/components/widgets/WebFrame.tsx","webpack://wizzi.editor/./src/components/widgets/react-multi-split-pane/lib/Pane.tsx","webpack://wizzi.editor/./src/components/widgets/react-multi-split-pane/lib/Resizer.tsx","webpack://wizzi.editor/./src/components/widgets/react-multi-split-pane/lib/SplitPane.tsx","webpack://wizzi.editor/./src/components/widgets/react-multi-split-pane/lib/util.tsx","webpack://wizzi.editor/./src/features/form/EditorForm.tsx","webpack://wizzi.editor/./src/features/form/Form.tsx","webpack://wizzi.editor/./src/features/form/index.tsx","webpack://wizzi.editor/./src/features/form/withStatus.tsx","webpack://wizzi.editor/./src/features/form/withValidation.tsx","webpack://wizzi.editor/./src/assets/checkmark.png","webpack://wizzi.editor/./src/assets/clear.png","webpack://wizzi.editor/./src/assets/cross-light.png","webpack://wizzi.editor/./src/assets/cross-red.png","webpack://wizzi.editor/./src/assets/cross.png","webpack://wizzi.editor/./src/assets/info-icon.png","webpack://wizzi.editor/./src/assets/settings-icon.png","webpack://wizzi.editor/./src/components/CodeView/SyntaxHighlighter.css?7d08","webpack://wizzi.editor/./src/components/EditorView/EditorView.css?43e9"],"sourcesContent":["/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\AstIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const AstIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            fill={fill}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 400 180\"\n            {...props}\n        >\n            <path \n                fill=\"none\"\n                stroke={stroke}\n                d=\"m199-90a180,180 0 1,0 2,0\"\n                strokeWidth=\"40\"\n             />\n            <path\n             d=\"M88,15a135,135 0 0,0 0,150h32a114,114 0 0,1 0-150M280,15a114,114 0 0,1 0,150h32a135,135 0 0,0 0-150\" />\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\BrowserIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const BrowserIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 1000 1000\"\n            {...props}\n        >\n            <g\n            >\n                <g\n                 transform=\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\">\n                    <path\n                     d=\"M4637.4,4936.3c-1720.2-88.1-3306.1-1110.1-4063.8-2618.9c-218-433.9-345.8-828.2-433.9-1332.6c-52.9-306.2-52.9-1057.3,0-1365.6c174-1004.4,621.1-1856.8,1350.2-2568.3c784.1-762.1,1812.7-1242.3,2920.6-1361.2c259.9-28.6,832.6-30.8,832.6-4.4c0,17.6-74.9,398.7-99.1,500c-8.8,44.1-26.4,46.3-389.9,59.5c-612.3,22-1160.8,158.6-1733.4,436.1l-275.3,132.2l77.1,37.4c105.7,52.9,105.7,116.8,0,400.9c-107.9,288.6-114.5,370-28.7,462.5c44.1,48.5,103.5,77.1,235.7,110.1c231.3,61.7,363.4,134.4,544,306.1c105.7,96.9,171.8,185,226.9,293c118.9,237.9,101.3,326-66.1,326c-279.7,0-579.3,152-892.1,453.7C2714.5-673.8,2575.7-557,2536.1-535c-174,88.1-614.5,57.3-770.9-55.1c-112.3-81.5-328.2-409.7-480.2-724.6L1161.7-1568l-70.5,140.9C948-1140.7,800.4-684.8,738.8-325.8l-13.2,77.1l215.9,105.7C1423.8,95,1851.1,350.4,1954.6,462.8c83.7,90.3,66.1,149.8-92.5,301.8l-143.2,136.6l2.2,306.2c0,167.4,8.8,385.4,17.6,480.2c13.2,165.2,19.8,178.4,96.9,244.5c44,39.6,204.9,123.3,356.8,185c555.1,233.5,654.2,370,539.6,729.1c-48.5,154.2-218,471.4-323.8,612.3c-66.1,85.9-77.1,70.5,215.9,255.5C3130.8,4033.2,3688.1,4238,4307,4335c301.8,46.3,887.6,52.9,1180.6,11l211.4-28.6l37.5-185c81.5-418.5,237.9-786.3,385.4-914.1c44.1-37.4,169.6-125.5,277.5-193.8c110.1-70.5,365.6-257.7,570.5-416.3c202.6-158.6,411.9-317.2,462.5-348c52.9-33,116.7-92.5,143.2-130c127.7-189.4,279.7-676.2,304-982.4c17.6-229.1-22-334.8-226.9-603.5c-209.2-279.7-262.1-361.2-237.9-383.3c33-30.8,2099.1-1257.7,2127.7-1262.1c30.8-8.8,92.5,182.8,160.8,502.2c176.2,810.5,105.7,1702.6-196,2488.9c-497.8,1306.1-1599.1,2343.6-2977.9,2801.7C5932.5,4892.2,5326.8,4969.3,4637.4,4936.3z M8826.7,1971.6c143.2-304,257.7-658.6,319.4-991.2c39.6-215.8,48.5-330.4,46.3-678.4c-2.2-229.1-11-453.8-22-495.6l-19.8-74.9l-50.7,141c-103.5,290.8-259.9,508.8-513.2,718.1c-204.8,169.6-275.3,273.1-354.6,511c-116.7,352.4-116.7,649.8,2.2,795.1c52.9,63.9,422.9,310.6,467,310.6C8710,2207.2,8767.2,2101.5,8826.7,1971.6z\" />\n                    <path\n                     d=\"M4780.5,1039.9l-55.1-41.8l561.7-2797.3c308.4-1539.6,566.1-2799.5,572.7-2799.5c6.6,0,253.3,367.8,548.5,815c295.1,449.3,546.2,812.8,555,810.6c8.8-4.4,251.1-332.6,539.6-733.5c286.3-398.7,557.3-764.3,601.3-810.6c312.8-330.4,843.6-251.1,960.3,145.4c81.5,277.5,61.7,323.8-596.9,1240.1c-308.4,431.7-557.3,788.5-552.9,792.9c4.4,4.4,449.3,92.5,986.8,196c537.4,103.5,986.8,189.4,997.8,193.8c11,4.4-127.8,94.7-308.4,200.4c-180.6,107.9-1284.1,766.5-2453.7,1462.5C5967.7,412.1,4972.2,1004.6,4923.7,1031.1C4837.8,1081.7,4835.6,1081.7,4780.5,1039.9z\" />\n                </g>\n                <line \n                    className=\"st0\"\n                    x1=\"3\"\n                    y1=\"16\"\n                    x2=\"15\"\n                    y2=\"16\"\n                 />\n                <path\n                 className=\"st0\" d=\"M21.8,13c-0.6-5.7-3-10-5.8-10c-3.3,0-6,5.8-6,13s2.7,13,6,13\" />\n                <path\n                 className=\"st0\" d=\"M28.9,17c0-0.3,0.1-0.7,0.1-1c0-7.2-5.8-13-13-13S3,8.8,3,16s5.8,13,13,13c1,0,2-0.1,3-0.4\" />\n                <path\n                 className=\"st0\" d=\"M24.5,17.5c1.9,1.9,1.9,5.1,0,7c-0.5,0.5-1,0.8-1.6,1.1c-1.8,0.7-3.9,0.4-5.4-1.1c-1.9-1.9-1.9-5.1,0-7S22.6,15.6,24.5,17.5z\" />\n                <path\n                 className=\"st0\" d=\"M25.5,23l3.9,3.6c0.8,0.8,0.8,2,0,2.8l0,0c-0.8,0.8-2,0.8-2.8,0l-3.5-3.5\" />\n            </g>\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\CloseIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const CloseIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 122.88 122.88\"\n            {...props}\n        >\n            <path\n             d=\"M61.44,0A61.44,61.44,0,1,1,0,61.44,61.44,61.44,0,0,1,61.44,0ZM74.58,36.8c1.74-1.77,2.83-3.18,5-1l7,7.13c2.29,2.26,2.17,3.58,0,5.69L73.33,61.83,86.08,74.58c1.77,1.74,3.18,2.83,1,5l-7.13,7c-2.26,2.29-3.58,2.17-5.68,0L61.44,73.72,48.63,86.53c-2.1,2.15-3.42,2.27-5.68,0l-7.13-7c-2.2-2.15-.79-3.24,1-5l12.73-12.7L36.35,48.64c-2.15-2.11-2.27-3.43,0-5.69l7-7.13c2.15-2.2,3.24-.79,5,1L61.44,49.94,74.58,36.8Z\" />\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\DebugIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const DebugIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 30 30\"\n            {...props}\n        >\n            <path\n             d=\"M29,15h-5.1c-0.1-1.2-0.5-2.4-1-3.5c1.9-1.5,3.1-3.7,3.1-6.1V5c0-0.6-0.4-1-1-1s-1,0.4-1,1v0.4c0,1.8-0.8,3.4-2.2,4.5c-0.5-0.7-1.2-1.2-1.9-1.7c0-0.1,0-0.1,0-0.2c0-2.2-1.8-4-4-4s-4,1.8-4,4c0,0.1,0,0.1,0,0.2c-0.7,0.5-1.3,1-1.9,1.7C8.8,8.8,8,7.2,8,5.4V5c0-0.6-0.4-1-1-1S6,4.4,6,5v0.4c0,2.4,1.1,4.7,3.1,6.1c-0.5,1-0.9,2.2-1,3.5H3c-0.6,0-1,0.4-1,1s0.4,1,1,1h5.1c0.1,1.2,0.5,2.4,1,3.5C7.1,21.9,6,24.2,6,26.6V27c0,0.6,0.4,1,1,1s1-0.4,1-1v-0.4c0-1.8,0.8-3.4,2.2-4.5c1.5,1.8,3.5,2.9,5.8,2.9s4.4-1.1,5.8-2.9c1.4,1.1,2.2,2.7,2.2,4.5V27c0,0.6,0.4,1,1,1s1-0.4,1-1v-0.4c0-2.4-1.1-4.7-3.1-6.1c0.5-1,0.9-2.2,1-3.5H29c0.6,0,1-0.4,1-1S29.6,15,29,15z\" />\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\EditIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const EditIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 512 512\"\n            {...props}\n        >\n            <g\n            >\n                <path\n                 fill={stroke} stroke={stroke} d=\"M486.805,34.87c-2.81-10.483-9.533-19.245-18.931-24.671l-8.206-4.738c-9.397-5.426-20.348-6.867-30.831-4.059c-10.484,2.81-19.246,9.533-24.672,18.932L174.185,418.667c-0.832,1.442-1.301,3.041-1.414,4.672c-0.003,0.035-0.016,0.062-0.018,0.098l-4.014,66.894H94.584c-5.983,0-10.835,4.852-10.835,10.835s4.852,10.835,10.835,10.835c0,0,85.393-0.032,85.656-0.093c1.639-0.198,3.243-0.755,4.673-1.7l64.441-42.548c0.035-0.023,0.053-0.056,0.086-0.08c1.322-0.892,2.478-2.071,3.328-3.544L482.746,65.702C488.172,56.303,489.614,45.354,486.805,34.87z M191.058,480.183l2.278-37.95l29.45,17.002L191.058,480.183z M239.418,443.817l-41.049-23.698l177.532-307.493l41.047,23.698L239.418,443.817zM427.784,117.558l-41.047-23.698l17.419-30.172l41.047,23.698L427.784,117.558z M463.978,54.867l-7.94,13.751L414.991,44.92l7.939-13.751c2.533-4.387,6.622-7.524,11.514-8.835c4.896-1.311,10.002-0.638,14.387,1.894l8.206,4.738c4.387,2.532,7.524,6.621,8.835,11.513C467.183,45.372,466.51,50.481,463.978,54.867z\" />\n                <path\n                 fill={stroke} stroke={stroke} d=\"M41.853,490.331h-7.224c-5.983,0-10.835,4.852-10.835,10.835c0,5.983,4.852,10.835,10.835,10.835h7.224c5.983,0,10.835-4.852,10.835-10.835C52.688,495.183,47.836,490.331,41.853,490.331z\" />\n            </g>\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\SaveIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const SaveIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 352.198 352.197\"\n            {...props}\n        >\n            <path\n             d=\"M338.377,49.572c-13.464-14.688-30.6-25.092-45.899-37.944c1.224-3.06,0-6.732-3.672-7.344 c-29.376-6.12-56.916-3.672-86.292-1.836C166.406,4.896,129.687,0,92.966,0C50.738,0,12.183,6.732,8.51,55.692 c-5.508,63.648-7.344,128.521-6.12,192.167c0.612,41.617-4.896,83.844,42.84,95.473c29.376,7.344,66.708-0.611,96.696-1.836 c36.72-1.836,72.828,7.955,109.548,10.404c40.392,2.447,77.724-9.793,86.292-52.633c4.896-24.48,3.06-50.184,4.284-74.664 c2.447-39.168,7.344-77.724,7.956-116.892C350.006,88.74,352.454,64.872,338.377,49.572z M47.678,201.961 c0-5.51,0.612-10.404,0.612-15.912c0,5.508,0.612,11.627,0.612,17.135C48.902,202.572,48.291,202.572,47.678,201.961z M263.714,112.608c-0.612,23.868-7.956,22.644-29.988,22.644c-18.36-0.612-36.72-1.224-55.08,0.612 c-20.808,2.448-93.636,29.376-94.859-10.404c-1.224-31.824,3.06-61.812,1.224-93.636c19.584,0.612,38.556-0.612,41.616-0.612 c26.928-1.224,53.855,0.612,80.783,2.448c15.3,1.224,36.108,3.672,54.468,1.224C260.654,60.588,263.714,86.904,263.714,112.608z M280.238,273.564c-0.612,2.447-1.224,4.896-2.448,7.344c0.612-3.061,0.612-6.119,1.225-8.568c0.611-2.447,1.224-4.283,1.836-6.732 C280.85,268.057,280.238,270.504,280.238,273.564z\" />\n            <path\n             d=\"M222.709,41.004c-9.18,0.612-17.748,0.612-26.928,1.836h-0.611l0,0h-0.612h-0.612c-2.448,0.612-3.672,2.448-3.672,4.284 c0,0.612-0.612,0.612-0.612,1.224c-6.12,22.032-4.283,45.288,0,67.32c0.612,3.06,3.061,4.896,5.509,5.508 c7.344,2.448,17.136,2.448,24.479,0c3.672-1.224,5.508-4.284,6.12-7.956c1.836-21.42,3.672-43.452,5.508-64.872 C230.666,44.676,226.382,41.004,222.709,41.004z\" />\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\WizziIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const WizziIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 660 280\"\n            {...props}\n        >\n            <polyline\n             fill={stroke} stroke={stroke} points=\"10 250 45 10 60 10 75 130 120 210 120 130 175 210 175 110 230 210 230 250\" />\n            <polyline\n             fill={stroke} stroke={stroke} points=\"250 250 260 90 290 90 300 250\" />\n            <polyline\n             fill={stroke} stroke={stroke} points=\"320 250 320 230 420 130 400 110 400 90 450 90 420 230 440 230 440 250\" />\n            <polyline\n             fill={stroke} stroke={stroke} points=\"450 250 450 230 550 130 530 110 530 90 580 90 550 230 570 230 570 250\" />\n            <polyline\n             fill={stroke} stroke={stroke} points=\"590 250 600 90 630 90 640 250\" />\n            <path\n             fill={stroke} stroke={stroke} d=\"M280, 30 C310,50 250,70 280, 84\" />\n            <path\n             fill={stroke} stroke={stroke} d=\"M620, 30 C650,50 590,70 620, 84\" />\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\assets\\WizzifiedIcon.tsx.ittf\n*/\nimport * as React from \"react\";\nexport const WizzifiedIcon = ({\n    height=\"24px\", \n    width=\"24px\", \n    theme=\"light\", \n    ...props\n }: React.SVGProps<SVGSVGElement> & { \n    theme?: string;\n}) => {\n\n    const fill = theme == 'light' ? '#ffffff' : '#000000';\n    const stroke = theme == 'light' ? '#000000' : '#ffffff';\n    return  (\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 392.186 392.186\"\n            {...props}\n        >\n            <g\n            >\n                <g\n                >\n                    <g\n                    >\n                        <path\n                         d=\"M368.62,17.951H23.568C10.57,17.951,0,28.524,0,41.52v309.146c0,12.996,10.57,23.568,23.568,23.568h345.053c12.994,0,23.564-10.572,23.564-23.568V41.52C392.188,28.525,381.614,17.951,368.62,17.951z M297.56,57.528c0-4.806,3.896-8.703,8.701-8.703h8.703c4.808,0,8.701,3.896,8.701,8.703v9.863c0,4.806-3.896,8.702-8.701,8.702h-8.703c-4.805,0-8.701-3.896-8.701-8.702V57.528z M257.093,57.528c0-4.806,3.898-8.703,8.703-8.703h8.701c4.805,0,8.703,3.896,8.703,8.703v9.863c0,4.806-3.898,8.702-8.703,8.702h-8.701c-4.805,0-8.703-3.896-8.703-8.702V57.528zM363.903,345.951H28.282V102.235h335.621V345.951L363.903,345.951z M364.132,67.391c0,4.806-3.896,8.702-8.701,8.702h-8.703c-4.809,0-8.702-3.896-8.702-8.702v-9.863c0-4.806,3.896-8.703,8.702-8.703h8.703c4.806,0,8.701,3.896,8.701,8.703V67.391z\" />\n                        <path\n                         d=\"M84.185,233.284l63.084,29.336c1.631,0.755,3.367,1.138,5.162,1.138c2.338,0,4.617-0.664,6.598-1.924c3.547-2.267,5.666-6.13,5.666-10.334v-0.322c0-4.752-2.785-9.116-7.096-11.118l-39.455-18.332l39.455-18.334c4.311-2.004,7.096-6.367,7.096-11.117v-0.319c0-4.21-2.119-8.075-5.666-10.334c-1.961-1.253-4.246-1.916-6.605-1.916c-1.779,0-3.563,0.391-5.16,1.133l-63.08,29.333c-4.307,2.004-7.09,6.369-7.09,11.117v0.877C77.093,226.909,79.874,231.272,84.185,233.284z\" />\n                        <path\n                         d=\"M165.257,293.036c2.301,3.149,6.002,5.03,9.9,5.03h0.316c5.352,0,10.041-3.426,11.672-8.517L228.7,160.788c1.192-3.716,0.531-7.818-1.771-10.973c-2.301-3.15-6.002-5.03-9.901-5.03h-0.315c-5.354,0-10.048,3.425-11.679,8.516l-41.559,128.771C162.292,285.793,162.958,289.889,165.257,293.036z\" />\n                        <path\n                         d=\"M227.49,192.276c0,4.745,2.783,9.109,7.095,11.123l39.455,18.329l-39.455,18.33c-4.31,2.004-7.095,6.368-7.095,11.118v0.322c0,4.205,2.117,8.068,5.668,10.336c1.974,1.258,4.254,1.924,6.595,1.924c1.793,0,3.528-0.383,5.17-1.142l63.08-29.335c4.307-2.009,7.09-6.372,7.09-11.115v-0.877c0-4.748-2.783-9.113-7.094-11.117l-63.08-29.333c-1.591-0.74-3.373-1.131-5.152-1.131c-2.355,0-4.643,0.661-6.604,1.912c-3.551,2.263-5.67,6.127-5.67,10.337v0.318H227.49L227.49,192.276z\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n        )\n    ;\n}\n;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\CodeView\\SyntaxHighlighter.tsx.ittf\n*/\nimport React, {FunctionComponent} from 'react';\nimport './SyntaxHighlighter.css';\nimport { Prism } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nexport type SyntaxHighlighterProps = { \n    filePath: string;\n    code: string;\n    showLineNumbers: boolean;\n};\nexport class SyntaxHighlighter extends React.Component<SyntaxHighlighterProps> {\n    componentDidMount() {\n        const el1 = document.querySelector('.syntax-highlight-container > pre');\n        if (el1 && el1.style) {\n            el1.style.margin = 0;\n            el1.style.padding = 0;\n            el1.style.height = '100%';\n        }\n    }\n    render() {\n        const language = getLanguage(this.props.filePath);\n        return  (\n            <div\n             className=\"syntax-highlight-container\">\n                <Prism\n                 language={language} showLineNumbers={this.props.showLineNumbers} style={vscDarkPlus}>\n                    {this.props.code}\n                </Prism>\n            </div>\n            )\n        ;\n    }\n}\nexport default SyntaxHighlighter;\nconst mimeLanguageMap = {\n    '.js': 'javascript', \n    '.jsx': 'javascript', \n    '.ts': 'typescript', \n    '.tsx': 'typescript', \n    '.html': 'html', \n    '.css': 'css', \n    '.svg': 'svg', \n    '.json': 'json', \n    '.xml': 'xml'\n };\nfunction getLanguage(path: string) {\n\n    const ext2 = path.substr(path.lastIndexOf('.'));\n    const rest = path.substr(0, path.lastIndexOf('.'));\n    const ext = rest.substr(rest.lastIndexOf('.'));\n    if (ext2 == '.ittf') {\n        const lang = mimeLanguageMap[ext];\n        return lang || 'text';\n    }\n    else {\n        const lang = mimeLanguageMap[ext2];\n        return lang || 'text';\n    }\n}\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorFooter.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {LoggedUser} from '../../features/app';\nimport {Annotation} from '../../features/annotations';\nimport {Shortcuts} from './KeyboardShortcuts';\nimport {PreferencesContextType, PanelType, withPreferences} from '../../features/preferences';\nimport {FooterShell} from '../shell/FooterShell';\nimport {c} from '../ThemeProvider';\nimport FooterButton from '../widgets/FooterButton';\nimport IconButton from '../widgets/IconButton';\nimport LoadingText from '../widgets/LoadingText';\nimport MenuButton from '../widgets/MenuButton';\nimport ShortcutLabel from '../widgets/ShortcutLabel';\nimport ToggleSwitch from '../widgets/ToggleSwitch';\nexport type EditorFooterProps = PreferencesContextType & { \n    annotations: Annotation[];\n    fileTreeShown: boolean;\n    panelsShown: boolean;\n    sendCodeOnChangeEnabled: boolean;\n    loggedUser: LoggedUser;\n    isLocalWebPreview: boolean;\n    onToggleTheme: () => void;\n    onTogglePanels: (panelType?: PanelType) => void;\n    onToggleFileTree: () => void;\n    onShowShortcuts: () => void;\n    theme: string;\n    autoGenSingleDoc: boolean;\n    autoExecJob: boolean;\n};\nfunction EditorFooterComp(props: EditorFooterProps) {\n\n    const {\n        annotations, \n        loggedUser, \n        fileTreeShown, \n        panelsShown, \n        sendCodeOnChangeEnabled, \n        isLocalWebPreview, \n        onToggleTheme, \n        onTogglePanels, \n        onToggleFileTree, \n        onShowShortcuts, \n        theme, \n        autoGenSingleDoc, \n        autoExecJob\n     } = props;\n    const _toggleAutoGenSingleDoc = () => \n    \n        props.setPreferences({\n            autoGenSingleDoc: !props.preferences.autoGenSingleDoc\n         })\n    ;\n    const _toggleAutoExecJob = () => \n    \n        props.setPreferences({\n            autoExecJob: !props.preferences.autoExecJob\n         })\n    ;\n    const loadingItems = annotations.filter(a => \n    \n        a.severity < 0\n    );\n    const isLoading = loadingItems.length >= 1;\n    const isErrorFatal = !isLoading && annotations.some(a => \n    \n        a.severity > 3\n    );\n    const warningCount = annotations.filter(a => \n    \n        a.severity === 2\n    ).length\n    ;\n    let text: any;\n    if (isLoading) {\n        text = isLoading ? `${loadingItems[0].message}${\n            loadingItems.length > 1\n             ? ` (+${loadingItems.length - 1} more)`\n             : ''}\n            ` : '';\n    }\n    else {\n        const errors = annotations.filter(a => \n        \n            a.severity >= 3\n        );\n        if (errors.length) {\n            const {\n                message, \n                location, \n                action\n             } = errors[0];\n            const prefix = location ? `${location.fileName} (${location.startLineNumber}:${location.startColumn}) ` : '';\n            const suffix = action ?  (\n                <span\n                 className={css(styles.action)} onClick={(event) => {\n                    \n                        event.stopPropagation();\n                        action.run();\n                    }\n                }>\n                    {action.title}\n                </span>\n                )\n             : errors.length > 1 ? `(+${errors.length - 1} more)` : '';\n            text =  (\n            <span\n            >\n                {prefix}\n                {message.split('\\n')[0] + ' '}\n                {suffix}\n            </span>\n            )\n            ;\n        }\n    }\n    return  (\n        <FooterShell\n         type={isLoading ? 'loading' : isErrorFatal ? 'error' : null}>\n            <div\n             className={css(styles.left)}>\n                {\n                    isLoading ?  (\n                        <LoadingText\n                         className={css(styles.loadingText)} onClick={() => \n                            \n                                onTogglePanels('errors')\n                        }>\n                            {text}\n                        </LoadingText>\n                        )\n                     :  (\n                        <button\n                         onClick={() => \n                            \n                                onTogglePanels(text ? 'errors' : undefined)\n                        } className={css(styles.statusText, text ? (isErrorFatal ? styles.errorTextFatal : styles.errorText) : styles.successText)}>\n                            {\n                                text\n                                 ?? (`No errors${\n                                warningCount\n                                 ? `, ${warningCount} warning${\n                                    warningCount > 1\n                                     ? 's'\n                                     : ''}\n                                    `\n                                 : ''}\n                                `)\n                            }\n                        </button>\n                        )\n                    \n                }\n            </div>\n            <MenuButton\n             icon={require('../../assets/settings-icon.png')} label={ (\n                <span\n                 className={css(styles.buttonLabel)}>\n                    Wizzi\n                </span>\n                )\n            } content={ (\n                <React.Fragment\n                >\n                    <ToggleSwitch\n                     checked={autoGenSingleDoc} onChange={_toggleAutoGenSingleDoc} label=\"Auto gen single doc\" />\n                    <ToggleSwitch\n                     checked={autoExecJob} onChange={_toggleAutoExecJob} label=\"Auto exec job\" />\n                </React.Fragment>\n                )\n            } />\n            <MenuButton\n             icon={require('../../assets/settings-icon.png')} label={ (\n                <span\n                 className={css(styles.buttonLabel)}>\n                    Editor\n                </span>\n                )\n            } content={ (\n                <React.Fragment\n                >\n                    <div\n                     className={css(styles.buttonItem, styles.buttonItemEditorPane)} onClick={onShowShortcuts}>\n                        <IconButton\n                         small title=\"Show keyboard shortcuts\" label=\"Shortcuts\" />\n                        <ShortcutLabel\n                         combo={Shortcuts.shortcuts.combo} className={css(styles.buttonItemShortcut)} />\n                    </div>\n                    <div\n                     className={css(styles.menuSeparator)} />\n                    <ToggleSwitch\n                     checked={fileTreeShown} onChange={onToggleFileTree} label=\"Files\" />\n                    <ToggleSwitch\n                     checked={panelsShown} onChange={() => \n                        \n                            onTogglePanels()\n                    } label=\"Panel\" />\n                    <ToggleSwitch\n                     checked={theme !== 'light'} onChange={onToggleTheme} label=\"Dark theme\" />\n                </React.Fragment>\n                )\n            } />\n        </FooterShell>\n        )\n    ;\n}\n\nexport const EditorFooter = withPreferences(EditorFooterComp);\nexport default EditorFooter;\n\nconst styles = StyleSheet.create({\n    left: {\n        display: 'flex', \n        alignItems: 'stretch', \n        flex: 1, \n        minWidth: 0, \n        overflow: 'hidden'\n     }, \n    loadingText: {\n        textOverflow: 'ellipsis', \n        whiteSpace: 'nowrap', \n        padding: '.5em', \n        width: '100%', \n        cursor: 'pointer'\n     }, \n    statusText: {\n        border: 0, \n        outline: 0, \n        margin: 0, \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: '1em center', \n        display: 'inline-block', \n        textOverflow: 'ellipsis', \n        whiteSpace: 'nowrap', \n        padding: '.25em .5em .25em 3em', \n        minWidth: 200, \n        width: '100%', \n        textAlign: 'left'\n     }, \n    successText: {\n        backgroundImage: `url(${require('../../assets/checkmark.png')})`\n     }, \n    errorText: {\n        backgroundImage: `url(${require('../../assets/cross-red.png')})`, \n        color: c('error')\n     }, \n    errorTextFatal: {\n        backgroundImage: `url(${require('../../assets/cross-light.png')})`\n     }, \n    errorBorder: {\n        borderColor: c('error-text')\n     }, \n    devicesCount: {\n        position: 'absolute', \n        top: 4, \n        right: 6, \n        height: 20, \n        minWidth: 20, \n        borderRadius: '50%', \n        backgroundColor: c('text'), \n        color: c('background'), \n        opacity: 0.5\n     }, \n    devicePane: {\n        padding: '0 16px'\n     }, \n    devicePaneItem: {\n        margin: '0 -16px'\n     }, \n    deviceLabel: {\n        display: 'flex', \n        alignItems: 'center', \n        whiteSpace: 'nowrap', \n        padding: '8px 0'\n     }, \n    deviceIcon: {\n        height: 16, \n        width: 16, \n        marginRight: 8, \n        fill: 'currentColor'\n     }, \n    noDevicesMessage: {\n        whiteSpace: 'nowrap', \n        margin: 8\n     }, \n    buttonLabel: {\n        display: 'none', \n        [`@media (min-width: ${700 + 20}px)`]: {\n                display: 'inline'\n             }\n     }, \n    buttonItem: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        justifyContent: 'space-between'\n     }, \n    buttonItemShortcut: {\n        userSelect: 'none', \n        cursor: 'pointer', \n        marginLeft: 12\n     }, \n    buttonItemEditorPane: {\n        margin: '0 12px'\n     }, \n    title: {\n        margin: '16px 0 8px'\n     }, \n    action: {\n        textDecoration: 'underline', \n        cursor: 'pointer', \n        fontWeight: 'bold'\n     }, \n    menuSeparator: {\n        margin: '6px 0', \n        borderBottom: `1px solid ${c('border')}`\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorPanels.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Annotation} from '../../features/annotations';\nimport type {PanelType} from '../../features/preferences';\nimport ProblemsPanel from './ProblemsPanel';\nimport {c} from '../ThemeProvider';\nimport ResizablePane from '../widgets/ResizablePane';\ntype Props = { \n    annotations: Annotation[];\n    onSelectFile: (path: string) => void;\n    onShowErrorPanel: () => void;\n    onTogglePanels: (panelType?: PanelType) => void;\n    panelType: 'errors' | 'logs';\n};\n\nexport default class EditorPanels extends React.Component<Props> {\n        getSnapshotBeforeUpdate(prevProps: Props) {\n            return null;\n        }\n        componentDidUpdate(prevProps: Props) {\n        }\n        _isScrolled: boolean = false;\n        _panel = React.createRef<HTMLDivElement>();\n        render() {\n            const {\n                annotations, \n                onSelectFile, \n                onShowErrorPanel, \n                onTogglePanels, \n                panelType\n             } = this.props;\n            return  (\n                <ResizablePane\n                 direction=\"vertical\" className={css(styles.container)}>\n                    <div\n                     className={css(styles.panels)}>\n                        <div\n                         className={css(styles.header)}>\n                            <button\n                             onClick={onShowErrorPanel} className={css(styles.tab, panelType !== 'errors' && styles.inactive)}>\n                                Problems\n                            </button>\n                            <div\n                             className={css(styles.buttons)}>\n                                <button\n                                 onClick={() => \n                                    \n                                        onTogglePanels()\n                                } className={css(styles.button, styles.close)} />\n                            </div>\n                        </div>\n                        <div\n                         ref={this._panel} className={css(styles.panel)}>\n                            {\n                                panelType === 'errors' ?  (\n                                    <ProblemsPanel\n                                     annotations={annotations} onSelectFile={onSelectFile} />\n                                    )\n                                 : null\n                            }\n                        </div>\n                    </div>\n                </ResizablePane>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        height: '14em'\n     }, \n    header: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        paddingTop: '.75em'\n     }, \n    tab: {\n        display: 'inline-block', \n        appearance: 'none', \n        background: 'none', \n        border: 'none', \n        margin: 0, \n        padding: '.35em 1.5em', \n        fontSize: '.9em', \n        textTransform: 'uppercase', \n        outline: 'none', \n        opacity: 1\n     }, \n    inactive: {\n        opacity: 0.5\n     }, \n    buttons: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'row', \n        justifyContent: 'flex-end', \n        margin: '0 1em'\n     }, \n    button: {\n        height: 24, \n        width: 24, \n        border: 0, \n        outline: 0, \n        margin: '0 .5em', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: 'center'\n     }, \n    close: {\n        backgroundImage: `url(${require('../../assets/cross.png')})`\n     }, \n    clear: {\n        backgroundImage: `url(${require('../../assets/clear.png')})`\n     }, \n    panels: {\n        backgroundColor: c('content'), \n        borderColor: c('border'), \n        borderWidth: '1px 0 0 0', \n        borderStyle: 'solid', \n        height: '100%', \n        minHeight: 0\n     }, \n    panel: {\n        display: 'flex', \n        flexDirection: 'column', \n        minHeight: 0, \n        padding: '.5em 0 .75em 0', \n        overflow: 'auto', \n        height: 'calc(100% - 2.5em)'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorToolbar.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {SaveStatus, PackiSaveOptions, PackiProduction} from '../../features/packi';\nimport {usePreferences} from '../../features/preferences';\nimport {WizziIcon} from '../../assets/WizziIcon';\nimport {EditIcon} from '../../assets/EditIcon';\nimport {BrowserIcon} from '../../assets/BrowserIcon';\nimport {SaveIcon} from '../../assets/SaveIcon';\nimport {CloseIcon} from '../../assets/CloseIcon';\nimport IconButton from '../widgets/IconButton';\nimport UserMenu from './UserMenu';\nimport {LoggedUser} from '../../features/app';\nimport {Packi} from '../../features/packi';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ModalProductionDetails from './ModalProductionDetails';\nexport type EditorToolbarProps = { \n    name: string;\n    description: string;\n    mainIttf: string;\n    wizziSchema: string;\n    packiProduction: PackiProduction;\n    readOnly: string;\n    createdAt: string | undefined;\n    saveStatus: SaveStatus;\n    isDownloading: boolean;\n    isEditModalVisible: boolean;\n    isLocalFolder: boolean;\n    generatedPreviewURL: string;\n    onSubmitMetadata: (details: { \n        name: string;\n        description: string;\n    }) => void;\n    onShowEditModal: () => void;\n    onDismissEditModal: () => void;\n    onDownloadCode: () => Promise<void>;\n    onPublishAsync: (options?: PackiSaveOptions) => Promise<void>;\n    loggedUser: LoggedUser | undefined;\n    splitViewKind: string;\n    isWizziJobWaiting: boolean;\n    onChangeSplitViewKind: (e: any) => void;\n    onExecuteWizziJob: () => void;\n    onExecuteWizziMetaFolder: () => void;\n    onSaveLocalFolder: () => void;\n    onCloseLocalFolder: () => void;\n};\nexport function EditorToolbar(props: EditorToolbarProps) {\n\n    const [preferences] = usePreferences();\n    const {\n        name, \n        description, \n        mainIttf, \n        wizziSchema, \n        packiProduction, \n        readOnly, \n        createdAt, \n        saveStatus, \n        isDownloading, \n        isEditModalVisible, \n        isLocalFolder, \n        onSubmitMetadata, \n        onShowEditModal, \n        onDismissEditModal, \n        onDownloadCode, \n        onPublishAsync, \n        splitViewKind, \n        onChangeSplitViewKind, \n        loggedUser, \n        isWizziJobWaiting, \n        generatedPreviewURL, \n        onExecuteWizziJob, \n        onExecuteWizziMetaFolder, \n        onSaveLocalFolder, \n        onCloseLocalFolder\n     } = props;\n    const {\n        theme\n     } = preferences;\n    const isPublishing = saveStatus === 'publishing';\n    const isPublished = saveStatus === 'published';\n    const productionLabel = isLocalFolder ? \"Filesystem folder\" : packiProduction;\n    console.log('EditorToolbar.props', props, mainIttf, wizziSchema, __filename);\n    return  (\n        <div\n         className={css(styles.ve_top_bar)}>\n            <div\n             className={css(styles.ve_top_bar_logo)}>\n                <a\n                 href=\"/\">\n                    <WizziIcon\n                     theme={theme} width=\"90\" height=\"30\" />\n                </a>\n            </div>\n            <div\n             className={css(styles.ve_top_bar_control)}>\n                <div\n                 className={css(styles.ve_top_bar_label)}>\n                    {productionLabel} Production\n                </div>\n                <div\n                 className={css(styles.ve_top_bar_field)}>\n                    <div\n                     className={css(styles.ve_top_bar_field_editor)}>\n                        {name + (readOnly ? ' (generated, readonly)': '')}\n                    </div>\n                    {\n                        !(isLocalFolder)\n                         &&  (\n                            <div\n                             className={css(styles.ve_top_bar_field_button)}>\n                                <IconButton\n                                 responsive title=\"Edit production metadata\" onClick={onShowEditModal}>\n                                    <EditIcon\n                                     theme={theme} width=\"20\" height=\"20\" />\n                                </IconButton>\n                            </div>\n                            )\n                        \n                    }\n                </div>\n            </div>\n            <div\n             className={css(styles.ve_top_bar_icons)}>\n                {\n                    packiProduction == 'artifact'\n                     &&  (\n                        <IconButton\n                         responsive title=\"Browse generated\" onClick={() => \n                            \n                                window.open(generatedPreviewURL)\n                        }>\n                            <BrowserIcon\n                             />\n                        </IconButton>\n                        )\n                    \n                }\n                {\n                    packiProduction == 'package'\n                     &&  (\n                        <React.Fragment\n                        >\n                            <IconButton\n                             responsive title=\"Generate .wizzi-meta folder\" onClick={onExecuteWizziMetaFolder}>\n                                <svg \n                                    width=\"20px\"\n                                    height=\"18px\"\n                                    viewBox=\"0 0 20 18\"\n                                    fill=\"none\"\n                                    strokeWidth=\"2\"\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                >\n                                    <path\n                                     d=\"M18,8a3,3,0,1,1,3-3A3,3,0,0,1,18,8Zm0-4a1,1,0,1,0,1,1A1,1,0,0,0,18,4Z\" />\n                                    <path\n                                     d=\"M5.5,14.5A3.5,3.5,0,1,1,9,11,3.5,3.5,0,0,1,5.5,14.5Zm0-5A1.5,1.5,0,1,0,7,11,1.5,1.5,0,0,0,5.5,9.5Z\" />\n                                    <path\n                                     d=\"M18,22a4,4,0,1,1,4-4A4,4,0,0,1,18,22Zm0-6a2,2,0,1,0,2,2A2,2,0,0,0,18,16Z\" />\n                                    <path\n                                     d=\"M7.73,10.64a1,1,0,0,1-.91-.57,1,1,0,0,1,.47-1.34L15.37,4.9a1,1,0,0,1,.86,1.8L8.15,10.54A.9.9,0,0,1,7.73,10.64Z\" />\n                                    <path\n                                     d=\"M18.7,16.1a.92.92,0,0,1-.36-.07L8.14,12.1a1,1,0,0,1,.72-1.87l10.2,3.94a1,1,0,0,1-.36,1.93Z\" />\n                                    <path\n                                     d=\"M12.21,18.5a1,1,0,0,1-.6-.2L6,14.1a1,1,0,1,1,1.19-1.6l5.62,4.2a1,1,0,0,1,.2,1.4A1,1,0,0,1,12.21,18.5Z\" />\n                                </svg>\n                            </IconButton>\n                            <IconButton\n                             responsive title=\"Generate package\" onClick={onExecuteWizziJob}>\n                                <svg \n                                    width=\"20px\"\n                                    height=\"18px\"\n                                    viewBox=\"0 0 20 18\"\n                                    fill=\"none\"\n                                >\n                                    <path \n                                        d=\"M13.333 15l5-5-5-5M6.667 5l-5 5 5 5\"\n                                        strokeWidth=\"2\"\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                     />\n                                </svg>\n                            </IconButton>\n                        </React.Fragment>\n                        )\n                    \n                }\n                {\n                    isLocalFolder\n                     &&  (\n                        <React.Fragment\n                        >\n                            <IconButton\n                             responsive title=\"Save\" onClick={onSaveLocalFolder}>\n                                <SaveIcon\n                                 theme={theme} width=\"20\" height=\"20\" />\n                            </IconButton>\n                        </React.Fragment>\n                        )\n                    \n                }\n                {\n                    isLocalFolder\n                     &&  (\n                        <React.Fragment\n                        >\n                            <IconButton\n                             responsive title=\"Close\" onClick={onCloseLocalFolder}>\n                                <CloseIcon\n                                 theme={theme} width=\"20\" height=\"20\" />\n                            </IconButton>\n                        </React.Fragment>\n                        )\n                    \n                }\n                <UserMenu\n                 loggedUser={loggedUser} />\n            </div>\n            <ModalProductionDetails \n                title=\"Edit Production Details\"\n                action=\"Done\"\n                visible={isEditModalVisible}\n                onDismiss={onDismissEditModal}\n                onSubmit={(details) => {\n                    \n                        onSubmitMetadata(details);\n                        onDismissEditModal();\n                    }\n                }\n                packiProduction={name}\n                name={name}\n                description={description}\n                mainIttf={mainIttf}\n                wizziSchema={wizziSchema}\n             />\n        </div>\n        )\n    ;\n}\nexport default EditorToolbar;\nconst styles = StyleSheet.create({\n    ve_top_bar: {\n        display: \"grid\", \n        gridTemplateColumns: \"1fr 5fr 1fr\", \n        marginBottom: \"20px\", \n        height: \"50px\", \n        zIndex: \"100\"\n     }, \n    ve_top_bar_logo: {\n        paddingTop: \"10px\", \n        paddingLeft: \"15px\", \n        cursor: \"pointer\"\n     }, \n    ve_top_bar_control: {\n        display: \"grid\", \n        gridTemplateRows: \"0.1fr 1fr\"\n     }, \n    ve_top_bar_label: {\n        paddingTop: \"2px\", \n        paddingLeft: \"10px\", \n        fontSize: \"12px\", \n        fontWeight: \"900\"\n     }, \n    ve_top_bar_field: {\n        display: \"grid\", \n        gridTemplateColumns: \"5fr 1fr\"\n     }, \n    ve_top_bar_field_editor: {\n        paddingLeft: \"10px\", \n        fontSize: \"24px\"\n     }, \n    ve_top_bar_field_button: {\n        \n     }, \n    ve_top_bar_icons: {\n        paddingTop: \"4px\", \n        display: \"flex\", \n        flexDirection: \"row\", \n        alignItems: \"center\", \n        justifyItems: \"center\"\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\EditorView.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport './EditorView.css';\nimport debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport {connect} from 'react-redux';\n// import Split from 'react-split'\nimport {SplitPane} from '../widgets/react-multi-split-pane';\nimport {PackiFiles, PackiProduction} from '../../features/packi';\nimport {GeneratedArtifact} from '../../features/wizzi';\nimport {LoggedUser} from '../../features/app';\nimport {Annotation} from '../../features/annotations';\nimport {isScript, isJson, isTest} from '../../features/file/index';\nimport {EditorProps} from '../Editor/EditorProps';\nimport EditorFooter from './EditorFooter';\nimport EditorPanels from './EditorPanels';\nimport EditorToolbar from './EditorToolbar';\nimport {EditorViewProps as BaseEditorViewProps} from './EditorViewProps';\nimport FileList from '../FileList/FileList';\nimport KeyboardShortcuts, {Shortcuts} from './KeyboardShortcuts';\nimport NoFileSelected from './NoFileSelected';\nimport PageMetadata from '../PageMetadata';\nimport type {PanelType} from '../../features/preferences/index';\nimport {withPreferences, PreferencesContextType} from '../../features/preferences/index';\n// from shell\nimport {ContentShell} from '../shell/ContentShell';\nimport {EditorShell} from '../shell/EditorShell';\nimport {LayoutShell} from '../shell/LayoutShell';\nimport {c, s} from '../ThemeProvider';\n// from widgets\nimport Banner from '../widgets/Banner';\nimport KeybindingsManager from '../widgets/KeybindingsManager';\nimport LazyLoad from '../widgets/LazyLoad';\nimport {ModalDialog} from '../widgets/ModalDialog';\nimport {ProgressIndicator} from '../widgets/ProgressIndicator';\nimport GeneratedView from './GeneratedView';\nimport GenerationErrors from './GenerationErrors';\n\nconst EDITOR_LOAD_FALLBACK_TIMEOUT = 3000;\n\nexport type EditorViewProps = PreferencesContextType & BaseEditorViewProps & { \n    loggedUser?: LoggedUser;\n};\ntype ModalName = 'auth' | 'packi-manager' | 'github-commit' | 'github-create' | 'edit-info' | 'shortcuts' | 'previous-saves' | 'import-repo' | 'import-production';\ntype BannerName = 'reconnect' | 'autosave-disabled' | 'export-unavailable' | 'slow-connection';\ntype SplitViewKind = 'left' | 'right' | 'both';\ntype State = { \n    currentModal: ModalName | null;\n    currentBanner: BannerName | null;\n    loadedEditor: 'monaco' | 'simple' | null;\n    isMarkdownPreview: boolean;\n    shouldPreventRedirectWarning: boolean;\n    isDownloading: boolean;\n    splitViewKind: SplitViewKind;\n};\nconst BANNER_TIMEOUT_SHORT = 1500;\nconst BANNER_TIMEOUT_LONG = 5000;\nclass EditorViewComp extends React.Component<EditorViewProps, State> {\n    state: State = {\n        currentModal: null, \n        currentBanner: null, \n        loadedEditor: null, \n        isMarkdownPreview: true, \n        shouldPreventRedirectWarning: false, \n        isDownloading: false, \n        splitViewKind: 'both' as SplitViewKind\n    }\n    ;\n    \n    static getDerivedStateFromProps(props: EditorViewProps, state: State) {\n        const {\n            selectedFile, \n            files\n         } = props;\n        \n        // When an empty markdown file is opened, switch to edit mode\n        let newState: any = null;\n        if (state.isMarkdownPreview && selectedFile.endsWith('.md') && !files[selectedFile]?.contents) {\n            newState = newState || {};\n            newState.isMarkdownPreview = false;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        window.addEventListener('beforeunload', this._handleUnload);\n    }\n    \n    componentDidUpdate(prevProps: EditorViewProps) {\n        if (prevProps.autosaveEnabled !== this.props.autosaveEnabled && !this.props.autosaveEnabled) {\n            this._showBanner('autosave-disabled', BANNER_TIMEOUT_LONG);\n        }\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this._handleUnload);\n    }\n    \n    _handleUnload = (e: any) => {\n        const isUnsaved = this.props.saveStatus === 'edited' || this.props.saveStatus === 'publishing' || this.props.saveStatus === 'saving-draft';\n        if (!isUnsaved || this.state.shouldPreventRedirectWarning) {\n            this._allowRedirectWarning();\n            return ;\n        }\n        const message = 'You have unsaved changes. Are you sure you want to leave this page?';\n        e.returnValue = message;\n        return message;\n    };\n    _showBanner = (name: BannerName, duration: number) => {\n        this.setState({\n            currentBanner: name\n         })\n        setTimeout(() => \n        \n            // @ts-ignore\n            this.setState((state) => \n            \n                (state.currentBanner === name ? {\n                        currentBanner: null\n                     } : state)\n            )\n        , duration)\n    };\n    \n    _handleChangeSplitViewKind = (e: any) => \n    \n        this.setState({\n            splitViewKind: e.target.value as SplitViewKind\n         })\n    ;\n    \n    _handleDismissEditModal = () => \n        this.setState({\n            currentModal: null\n         });\n    _handleShowTitleDescriptionModal = () => \n        this.setState({\n            currentModal: 'edit-info'\n         });\n    _handleShowShortcuts = () => \n        this.setState({\n            currentModal: 'shortcuts'\n         });\n    _handleShowModal = (name: any) => \n        this.setState({\n            currentModal: name\n         });\n    _handleRemoveFile = (path: string) => \n        this._EditorComponent?.removePath?.(path);\n    _handleRenameFile = (oldPath: string, newPath: string) => \n        this._EditorComponent?.renamePath?.(oldPath, newPath);\n    _EditorComponent: any;\n    _showErrorPanel = () => \n        this.props.setPreferences({\n            panelType: 'errors'\n         });\n    _togglePanels = (panelType?: PanelType) => \n        this.props.setPreferences({\n            panelsShown: !this.props.preferences.panelsShown, \n            panelType: panelType && !this.props.preferences.panelsShown ? panelType : this.props.preferences.panelType\n         });\n    _toggleFileTree = () => \n        this.props.setPreferences({\n            fileTreeShown: !this.props.preferences.fileTreeShown\n         });\n    _toggleTheme = () => \n        this.props.setPreferences({\n            theme: this.props.preferences.theme === 'light' ? 'dark' : 'light'\n         });\n    _toggleMarkdownPreview = () => \n        this.setState((state) => \n        \n            ({\n                isMarkdownPreview: !state.isMarkdownPreview\n             })\n        );\n    _preventRedirectWarning = () => \n        this.setState({\n            shouldPreventRedirectWarning: true\n         });\n    _allowRedirectWarning = () => \n        this.setState({\n            shouldPreventRedirectWarning: false\n         });\n    \n    // log 'EditorView.props.loggedUser', loggedUser, this.props.loggedUser\n    \n    // log 'EditorView.props', this.props, mainIttf, wizziSchema\n    render() {\n        const {\n            currentModal, \n            currentBanner, \n            isDownloading\n         } = this.state;\n        const {\n            id, \n            createdAt, \n            saveStatus, \n            files, \n            selectedFile, \n            sendCodeOnChangeEnabled, \n            userAgent, \n            onPublishAsync, \n            preferences, \n            owner, \n            name, \n            description, \n            mainIttf, \n            wizziSchema, \n            packiProduction, \n            isLocalFolder, \n            previewRef, \n            previewURL, \n            loggedUser, \n            onExecuteWizziJob, \n            onExecuteWizziMetaFolder, \n            onSaveLocalFolder, \n            onCloseLocalFolder, \n            previewKind, \n            generatedArtifact, \n            mTreeBuildupScript, \n            mTreeIttf, \n            isWizziJobWaiting, \n            wizzifiedIttfContent, \n            codeASTContent, \n            wizziError, \n            onGenerateArtifactPreview, \n            onMTreePreview, \n            onMTreeDebugInfoPreview, \n            onBrowsePreview, \n            onWizzifyPreview, \n            onCodeASTPreview\n         } = this.props;\n        const annotations = this.props.annotations;\n        const testPreviewURL = `${process.env.API_SERVER_URL}/~/${encodeURIComponent(owner)}/${encodeURIComponent(name)}`;\n        return  (\n            <ContentShell\n            >\n                {\n                    this.state.loadedEditor ? null :  (\n                        <ProgressIndicator\n                         />\n                        )\n                    \n                }\n                <PageMetadata\n                 name={name} description={description} id={id} />\n                <KeybindingsManager\n                 bindings={Shortcuts} onTrigger={(type) => {\n                    \n                        const commands: { \n                            [key: string]: (() => void) | null;\n                        } = {\n                            tree: this._toggleFileTree, \n                            panels: this._togglePanels, \n                            shortcuts: this._handleShowShortcuts\n                         };\n                        const fn = commands[type];\n                        if (fn) {\n                            fn();\n                        }\n                    }\n                } />\n                <EditorToolbar \n                    packiProduction={packiProduction}\n                    name={name}\n                    description={description}\n                    wizziSchema={wizziSchema}\n                    mainIttf={mainIttf}\n                    readOnly={this.props.readOnly}\n                    createdAt={createdAt}\n                    saveStatus={saveStatus}\n                    loggedUser={loggedUser}\n                    isEditModalVisible={currentModal === 'edit-info'}\n                    isLocalFolder={isLocalFolder}\n                    isWizziJobWaiting={isWizziJobWaiting}\n                    onChangeSplitViewKind={this._handleChangeSplitViewKind}\n                    splitViewKind={this.state.splitViewKind}\n                    isDownloading={isDownloading}\n                    generatedPreviewURL={previewURL}\n                    onShowEditModal={this._handleShowTitleDescriptionModal}\n                    onDismissEditModal={this._handleDismissEditModal}\n                    onExecuteWizziJob={onExecuteWizziJob}\n                    onExecuteWizziMetaFolder={onExecuteWizziMetaFolder}\n                    onSaveLocalFolder={onSaveLocalFolder}\n                    onCloseLocalFolder={onCloseLocalFolder}\n                    onSubmitMetadata={this.props.onSubmitMetadata}\n                    onDownloadCode={this.props.onDownloadAsync}\n                    onPublishAsync={onPublishAsync}\n                 />\n                <div\n                 className={css(styles.editorAreaOuterWrapper)}>\n                    <div\n                     className={css(styles.editorAreaOuter)}>\n                        <LayoutShell\n                        >\n                            <SplitPane \n                                split=\"vertical\"\n                                defaultSizes={JSON.parse(localStorage.getItem('splitPos1')) || undefined}\n                                onDragFinished={(size) => localStorage.setItem('splitPos1', JSON.stringify(size))}\n                                minSize={[240,400]}\n                                style={{\n                                        position: 'relative'\n                                     }}\n                            >\n                                <FileList \n                                    annotations={annotations}\n                                    visible={preferences.fileTreeShown}\n                                    files={files}\n                                    selectedFile={selectedFile}\n                                    readOnly={this.props.readOnly}\n                                    updateFiles={this.props.updateFiles}\n                                    onSelectFile={this.props.onSelectFile}\n                                    onRemoveFile={this._handleRemoveFile}\n                                    onRenameFile={this._handleRenameFile}\n                                    onGithubClone={this.props.onGithubClone}\n                                    onDownloadCode={this.props.onDownloadAsync}\n                                    saveStatus={saveStatus}\n                                 />\n                                <SplitPane \n                                    split=\"vertical\"\n                                    defaultSizes={JSON.parse(localStorage.getItem('splitPos2')) || undefined}\n                                    onDragFinished={(size) => localStorage.setItem('splitPos2', JSON.stringify(size))}\n                                    minSize={[200,200]}\n                                    style={{\n                                            position: 'relative'\n                                         }}\n                                >\n                                    <LazyLoad\n                                     load={async ():  Promise<{ \n                                            default: React.ComponentType<EditorProps>;\n                                        }> => {\n                                        \n                                            let timeout: any;\n                                            \n                                            // Fallback to simple editor if monaco editor takes too long to load\n                                            const MonacoEditorPromise = import('../Editor/MonacoEditor').then((editor) => \n                                            \n                                                ({\n                                                    editor, \n                                                    type: 'monaco'\n                                                 })\n                                            )\n                                            ;\n                                            \n                                            // Fallback to simple editor if monaco editor takes too long to load\n                                            const SimpleEditorPromise = new Promise((resolve, reject) => \n                                            \n                                                timeout = setTimeout(() => {\n                                                \n                                                    this._showBanner('slow-connection', BANNER_TIMEOUT_LONG);\n                                                    import('../Editor/SimpleEditor').then(resolve, reject)\n                                                }\n                                                , EDITOR_LOAD_FALLBACK_TIMEOUT)\n                                            \n                                            ).then((editor) => \n                                            \n                                                ({\n                                                    editor, \n                                                    type: 'simple'\n                                                 })\n                                            );\n                                            return Promise.race([\n                                                    MonacoEditorPromise.catch(() => \n                                                    \n                                                        SimpleEditorPromise\n                                                    \n                                                    ), \n                                                    SimpleEditorPromise\n                                                ]).then(({\n                                                    editor, \n                                                    type\n                                                 }: any) => {\n                                                \n                                                    this.setState({\n                                                        loadedEditor: type\n                                                     })\n                                                    clearTimeout(timeout);\n                                                    return editor;\n                                                }\n                                                )\n                                            ;\n                                        }\n                                    }>\n                                        {\n                                            ({\n                                                loaded, \n                                                data: Comp\n                                             }) => {\n                                            \n                                                this._EditorComponent = Comp;\n                                                const file = files[selectedFile];\n                                                if (file) {\n                                                    const {\n                                                        contents\n                                                     } = file;\n                                                    const isMarkdown = selectedFile.endsWith('.md');\n                                                    if (isMarkdown && this.state.isMarkdownPreview) {\n                                                        return  (\n                                                            <React.Fragment\n                                                            >\n                                                                <LazyLoad\n                                                                 load={() => \n                                                                    \n                                                                        import('../Markdown/MarkdownPreview')\n                                                                }>\n                                                                    {\n                                                                        ({\n                                                                            loaded: mdLoaded, \n                                                                            data: MarkdownPreview\n                                                                         }) => {\n                                                                        \n                                                                            if (mdLoaded && MarkdownPreview) {\n                                                                                return  (\n                                                                                    <MarkdownPreview\n                                                                                     source={contents as string} />\n                                                                                    )\n                                                                                ;\n                                                                            }\n                                                                            return  (\n                                                                                <EditorShell\n                                                                                 />\n                                                                                )\n                                                                            ;\n                                                                        }\n                                                                        \n                                                                    }\n                                                                </LazyLoad>\n                                                                <button\n                                                                 className={css(styles.previewToggle)} onClick={this._toggleMarkdownPreview}>\n                                                                    <svg \n                                                                        width=\"12px\"\n                                                                        height=\"12px\"\n                                                                        viewBox=\"0 0 18 18\"\n                                                                        className={css(styles.previewToggleIcon)}\n                                                                    >\n                                                                        <g\n                                                                         transform=\"translate(-147.000000, -99.000000)\">\n                                                                            <g\n                                                                             transform=\"translate(144.000000, 96.000000)\">\n                                                                                <path\n                                                                                 d=\"M3,17.25 L3,21 L6.75,21 L17.81,9.94 L14.06,6.19 L3,17.25 L3,17.25 Z M20.71,7.04 C21.1,6.65 21.1,6.02 20.71,5.63 L18.37,3.29 C17.98,2.9 17.35,2.9 16.96,3.29 L15.13,5.12 L18.88,8.87 L20.71,7.04 L20.71,7.04 Z\" />\n                                                                            </g>\n                                                                        </g>\n                                                                    </svg>\n                                                                </button>\n                                                            </React.Fragment>\n                                                            )\n                                                        ;\n                                                    }\n                                                    if (loaded && Comp) {\n                                                        return  (\n                                                            <div\n                                                             className={css(styles.editorComponentOuter)}>\n                                                                <Comp \n                                                                    className={css(styles.editorComponent)}\n                                                                    selectedFile={selectedFile}\n                                                                    files={files}\n                                                                    autoFocus={!/Untitled file.*\\.(js|tsx?)$/.test(selectedFile)}\n                                                                    readOnly={this.props.readOnly}\n                                                                    updateFiles={this.props.updateFiles}\n                                                                    onSelectFile={this.props.onSelectFile}\n                                                                    wordWrap='off'\n                                                                 />\n                                                                {\n                                                                    isMarkdown ?  (\n                                                                        <button\n                                                                         className={css(styles.previewToggle)} onClick={this._toggleMarkdownPreview}>\n                                                                            <svg \n                                                                                width=\"16px\"\n                                                                                height=\"12px\"\n                                                                                viewBox=\"0 0 22 16\"\n                                                                                className={css(styles.previewToggleIcon)}\n                                                                            >\n                                                                                <g\n                                                                                 transform=\"translate(-145.000000, -1156.000000)\">\n                                                                                    <g\n                                                                                     transform=\"translate(144.000000, 1152.000000)\">\n                                                                                        <path\n                                                                                         d=\"M12,4.5 C7,4.5 2.73,7.61 1,12 C2.73,16.39 7,19.5 12,19.5 C17,19.5 21.27,16.39 23,12 C21.27,7.61 17,4.5 12,4.5 L12,4.5 Z M12,17 C9.24,17 7,14.76 7,12 C7,9.24 9.24,7 12,7 C14.76,7 17,9.24 17,12 C17,14.76 14.76,17 12,17 L12,17 Z M12,9 C10.34,9 9,10.34 9,12 C9,13.66 10.34,15 12,15 C13.66,15 15,13.66 15,12 C15,10.34 13.66,9 12,9 L12,9 Z\" />\n                                                                                    </g>\n                                                                                </g>\n                                                                            </svg>\n                                                                        </button>\n                                                                        )\n                                                                     : null\n                                                                }\n                                                            </div>\n                                                            )\n                                                        ;\n                                                    }\n                                                }\n                                                else {\n                                                    return  (\n                                                        <NoFileSelected\n                                                         />\n                                                        )\n                                                    ;\n                                                }\n                                                return  (\n                                                    <EditorShell\n                                                     />\n                                                    )\n                                                ;\n                                            }\n                                            \n                                        }\n                                    </LazyLoad>\n                                    {\n                                        wizziError ?  (\n                                            <GenerationErrors\n                                             key='GeneratedView' error={wizziError} />\n                                            )\n                                         : (generatedArtifact && generatedArtifact.artifactContent) || wizzifiedIttfContent || codeASTContent ?  (\n                                                <GeneratedView \n                                                    key='GeneratedView'\n                                                    selectedFile={this.props.selectedFile}\n                                                    generatedContent={generatedArtifact ? generatedArtifact.artifactContent : undefined}\n                                                    generatedSourcePath={generatedArtifact ? generatedArtifact.sourcePath : undefined}\n                                                    mTreeBuildupScript={mTreeBuildupScript}\n                                                    mTreeIttf={mTreeIttf}\n                                                    wizzifiedIttfContent={wizzifiedIttfContent}\n                                                    codeASTContent={codeASTContent}\n                                                    generatedPreviewURL={previewURL}\n                                                    previewKind={previewKind}\n                                                    splitViewKind={this.state.splitViewKind}\n                                                    onGenerateArtifactPreview={onGenerateArtifactPreview}\n                                                    onMTreePreview={onMTreePreview}\n                                                    onMTreeDebugInfoPreview={onMTreeDebugInfoPreview}\n                                                    onBrowsePreview={onBrowsePreview}\n                                                    onWizzifyPreview={onWizzifyPreview}\n                                                    onCodeASTPreview={onCodeASTPreview}\n                                                 />\n                                                )\n                                             : generatedArtifact && generatedArtifact.errorLines ?  (\n                                                    <GenerationErrors \n                                                        key='GeneratedView'\n                                                        errorName={generatedArtifact.errorName}\n                                                        errorLines={generatedArtifact.errorLines}\n                                                        errorMessage={generatedArtifact.errorMessage}\n                                                        errorStack={generatedArtifact.errorStack}\n                                                     />\n                                                    )\n                                                 :  (\n                                                    <div\n                                                     key='GeneratedView'>\n                                                        No data\n                                                    </div>\n                                                    )\n                                        \n                                    }\n                                </SplitPane>\n                            </SplitPane>\n                        </LayoutShell>\n                        {\n                            preferences.panelsShown ?  (\n                                <EditorPanels \n                                    annotations={annotations}\n                                    onShowErrorPanel={this._showErrorPanel}\n                                    onTogglePanels={this._togglePanels}\n                                    onSelectFile={this.props.onSelectFile}\n                                    panelType={preferences.panelType}\n                                 />\n                                )\n                             : null\n                        }\n                    </div>\n                </div>\n                <EditorFooter \n                    annotations={annotations}\n                    loggedUser={loggedUser}\n                    fileTreeShown={preferences.fileTreeShown}\n                    panelsShown={preferences.panelsShown}\n                    sendCodeOnChangeEnabled={sendCodeOnChangeEnabled}\n                    onToggleTheme={this._toggleTheme}\n                    onTogglePanels={this._togglePanels}\n                    onToggleFileTree={this._toggleFileTree}\n                    onShowShortcuts={this._handleShowShortcuts}\n                    theme={this.props.preferences.theme}\n                    autoGenSingleDoc={preferences.autoGenSingleDoc}\n                    autoExecJob={preferences.autoExecJob}\n                 />\n                <ModalDialog\n                 visible={currentModal === 'shortcuts'} onDismiss={this._handleHideModal}>\n                    <KeyboardShortcuts\n                     />\n                </ModalDialog>\n                <Banner\n                 type=\"info\" visible={currentBanner === 'autosave-disabled'}>\n                    Automatic saving has been disabled in this Packi because you have it open in\n                  another tab.\n                </Banner>\n                <Banner\n                 type=\"info\" visible={currentBanner === 'slow-connection'}>\n                    Slow network detected. Trying to load a basic version of the editor. Some features\n                  such as linting and autocomplete may not work.\n                </Banner>\n                <Banner\n                 type=\"info\" visible={currentBanner === 'export-unavailable'}>\n                    You need to save the Packi first to export the code!\n                </Banner>\n            </ContentShell>\n            )\n        ;\n    }\n}\nexport const EditorView = withPreferences(EditorViewComp);\nexport default EditorView;\nconst styles = StyleSheet.create({\n    editorAreaOuter: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'column', \n        minWidth: 0, \n        minHeight: 0\n     }, \n    editorAreaOuterWrapper: {\n        display: 'flex', \n        flex: 1, \n        flexDirection: 'row', \n        minHeight: 0, \n        minWidth: 0\n     }, \n    embedModal: {\n        minWidth: 0, \n        minHeight: 0, \n        maxWidth: 'calc(100% - 48px)', \n        maxHeight: 'calc(100% - 48px)'\n     }, \n    preview: {\n        backgroundColor: c('content'), \n        borderLeft: `1px solid ${c('border')}`\n     }, \n    previewToggle: {\n        appearance: 'none', \n        position: 'absolute', \n        right: 0, \n        bottom: 0, \n        margin: 32, \n        padding: 12, \n        height: 48, \n        width: 48, \n        border: 0, \n        borderRadius: '50%', \n        backgroundColor: c('secondary'), \n        color: c('secondary-text'), \n        outline: 0, \n        transitionDuration: '170ms', \n        transitionProperty: 'box-shadow', \n        transitionTimingFunction: 'linear', \n        ':focus-visible': {\n            outline: 'auto'\n         }, \n        ':hover': {\n            boxShadow: s('small')\n         }\n     }, \n    previewToggleIcon: {\n        fill: 'currentColor', \n        verticalAlign: -1\n     }, \n    editorComponentOuter: {\n        height: '100%', \n        width: '100%'\n     }, \n    editorComponent: {\n        height: '100%', \n        width: '100%'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\GeneratedView.tsx.ittf\n*/\nimport * as React from 'react';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport {BrowserIcon} from '../../assets/BrowserIcon';\nimport {TreeIcon} from '../../assets/TreeIcon';\nimport {DebugIcon} from '../../assets/DebugIcon';\nimport {AstIcon} from '../../assets/AstIcon';\nimport {WizzifiedIcon} from '../../assets/WizzifiedIcon';\nimport SyntaxHighlighter from '../CodeView/SyntaxHighlighter';\nimport WebFrame from '../widgets/WebFrame';\nimport {PreviewKind} from '../types';\nimport LazyLoad from '../widgets/LazyLoad';\ntype Props = { \n    classes: any;\n    selectedFile: string;\n    previewKind: PreviewKind;\n    generatedContent: string;\n    generatedSourcePath?: string;\n    mTreeBuildupScript?: string;\n    mTreeIttf?: string;\n    wizzifiedIttfContent?: string;\n    codeASTContent?: string;\n    generatedPreviewURL?: string;\n    splitViewKind: string;\n    onGenerateArtifactPreview: () => void;\n    onMTreePreview: () => void;\n    onMTreeDebugInfoPreview: () => void;\n    onMTreePreview: () => void;\n    onBrowsePreview: () => void;\n    onWizzifyPreview: () => void;\n    onCodeASTPreview: () => void;\n};\nclass GeneratedView extends React.Component<Props> {\n    _handleGenerateArtifact = () => \n    \n        this.props.onGenerateArtifactPreview()\n    ;\n    _handleMTree = () => \n    \n        this.props.onMTreePreview()\n    ;\n    _handleMTreeDebugInfo = () => \n    \n        this.props.onMTreeDebugInfoPreview()\n    ;\n    _handleBrowse = () => \n    \n        this.props.onBrowsePreview()\n    ;\n    _handleWizzify = () => \n    \n        this.props.onWizzifyPreview()\n    ;\n    _handleCodeAST = () => \n    \n        this.props.onCodeASTPreview()\n    ;\n    render() {\n        const {\n            classes, \n            previewKind, \n            splitViewKind, \n            selectedFile\n         } = this.props;\n        const isIttf = selectedFile && selectedFile.endsWith('.ittf');\n        return  (\n            <div\n             className={splitViewKind === 'right' ? classes.containerFull : classes.container}>\n                {\n                    previewKind === 'generated' && this.props.generatedContent\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            <SyntaxHighlighter \n                                className={classes.syntaxHigh}\n                                code={this.props.generatedContent}\n                                filePath={selectedFile.substr(0, selectedFile.length - 5)}\n                                lineNumbers={true}\n                             />\n                        </div>\n                        )\n                    \n                }\n                {\n                    previewKind === 'mTreeIttf'\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            <SyntaxHighlighter \n                                className={classes.syntaxHigh}\n                                code={this.props.mTreeIttf || ''}\n                                filePath={'mTree.ittf'}\n                                lineNumbers={true}\n                             />\n                        </div>\n                        )\n                    \n                }\n                {\n                    previewKind === 'mTreeBuildupScript'\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            <SyntaxHighlighter \n                                className={classes.syntaxHigh}\n                                code={this.props.mTreeBuildupScript || ''}\n                                filePath={'mTreeBuildupScript.js'}\n                                lineNumbers={true}\n                             />\n                        </div>\n                        )\n                    \n                }\n                {\n                    previewKind === 'browser'\n                     &&  (\n                        <div\n                         className={classes.browserOuter}>\n                            {\n                                ((this.props.generatedSourcePath.endsWith('.html.ittf') || this.props.generatedSourcePath.endsWith('.svg.ittf')) ?  (\n                                    <WebFrame\n                                     previewURL={this.props.generatedPreviewURL} />\n                                    )\n                                 : (this.props.generatedSourcePath.endsWith('.md.ittf') ?  (\n                                        <React.Fragment\n                                        >\n                                            <LazyLoad\n                                             load={() => \n                                                \n                                                    import('../Markdown/MarkdownPreview')\n                                            }>\n                                                {\n                                                    ({\n                                                        loaded: mdLoaded, \n                                                        data: MarkdownPreview\n                                                     }) => {\n                                                    \n                                                        if (mdLoaded && MarkdownPreview) {\n                                                            return  (\n                                                                <MarkdownPreview\n                                                                 source={this.props.generatedContent} />\n                                                                )\n                                                            ;\n                                                        }\n                                                        else {\n                                                            return  (\n                                                                <React.Fragment\n                                                                >\n                                                                    <h1\n                                                                    >\n                                                                        Failed to load markdown preview for document\n                                                                    </h1>\n                                                                    <p\n                                                                    >\n                                                                    {this.props.generatedSourcePath}\n                                                                    </p>\n                                                                </React.Fragment>\n                                                                )\n                                                            ;\n                                                        }\n                                                    }\n                                                    \n                                                }\n                                            </LazyLoad>\n                                        </React.Fragment>\n                                        )\n                                     :  (\n                                        <React.Fragment\n                                        >\n                                            <h1\n                                            >\n                                                No browser viewer for document\n                                            </h1>\n                                            <p\n                                            >\n                                            {this.props.generatedSourcePath}\n                                            </p>\n                                        </React.Fragment>\n                                        )\n                                    ))\n                            }\n                        </div>\n                        )\n                    \n                }\n                {\n                    previewKind === 'wizzified' && this.props.wizzifiedIttfContent\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            <SyntaxHighlighter \n                                className={classes.syntaxHigh}\n                                code={this.props.wizzifiedIttfContent}\n                                filePath={selectedFile}\n                                lineNumbers={true}\n                             />\n                        </div>\n                        )\n                    \n                }\n                {\n                    previewKind === 'codeAST' && this.props.codeASTContent\n                     &&  (\n                        <div\n                         className={classes.editor}>\n                            <SyntaxHighlighter \n                                className={classes.syntaxHigh}\n                                code={this.props.codeASTContent}\n                                filePath={selectedFile}\n                                lineNumbers={true}\n                             />\n                        </div>\n                        )\n                    \n                }\n                <div\n                 className={classes.sidebar}>\n                    {\n                        isIttf\n                         &&  (\n                            <div\n                             className={classes.sbItem}>\n                                <Tooltip\n                                 title=\"View generated artifact content\">\n                                    <IconButton\n                                     onClick={this._handleGenerateArtifact} classes={{\n                                            root: classes.iconButton\n                                         }}>\n                                        <ViewListIcon\n                                         />\n                                    </IconButton>\n                                </Tooltip>\n                            </div>\n                            )\n                        \n                    }\n                    {\n                        isIttf\n                         &&  (\n                            <div\n                             className={classes.sbItem}>\n                                <Tooltip\n                                 title=\"View mTree\">\n                                    <IconButton\n                                     onClick={this._handleMTree} classes={{\n                                            root: classes.iconButton\n                                         }}>\n                                        <AccountTreeIcon\n                                         />\n                                    </IconButton>\n                                </Tooltip>\n                            </div>\n                            )\n                        \n                    }\n                    {\n                        isIttf\n                         &&  (\n                            <div\n                             className={classes.sbItem}>\n                                <Tooltip\n                                 title=\"View mTree build script\">\n                                    <IconButton\n                                     onClick={this._handleMTreeDebugInfo} classes={{\n                                            root: classes.iconButton\n                                         }}>\n                                        <DebugIcon\n                                         />\n                                    </IconButton>\n                                </Tooltip>\n                            </div>\n                            )\n                        \n                    }\n                    {\n                        isIttf\n                         &&  (\n                            <div\n                             className={classes.sbItem}>\n                                <Tooltip\n                                 title=\"Browse artifact\">\n                                    <IconButton\n                                     onClick={this._handleBrowse} classes={{\n                                            root: classes.iconButton\n                                         }}>\n                                        <BrowserIcon\n                                         />\n                                    </IconButton>\n                                </Tooltip>\n                            </div>\n                            )\n                        \n                    }\n                    {\n                        isIttf == false\n                         &&  (\n                            <div\n                             className={classes.sbItem}>\n                                <Tooltip\n                                 title=\"Wizzify source\">\n                                    <IconButton\n                                     onClick={this._handleWizzify} classes={{\n                                            root: classes.iconButton\n                                         }}>\n                                        <WizzifiedIcon\n                                         />\n                                    </IconButton>\n                                </Tooltip>\n                            </div>\n                            )\n                        \n                    }\n                    {\n                        isIttf == false\n                         &&  (\n                            <div\n                             className={classes.sbItem}>\n                                <Tooltip\n                                 title=\"Get code AST\">\n                                    <IconButton\n                                     onClick={this._handleCodeAST} classes={{\n                                            root: classes.iconButton\n                                         }}>\n                                        <AstIcon\n                                         />\n                                    </IconButton>\n                                </Tooltip>\n                            </div>\n                            )\n                        \n                    }\n                </div>\n            </div>\n            )\n        ;\n    }\n}\nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        container: {\n            display: 'flex', \n            flexDirection: 'row', \n            borderLeft: '1px solid #cccccc', \n            width: '100%', \n            height: '100%'\n         }, \n        containerFull: {\n            display: 'flex', \n            flexDirection: 'row', \n            borderLeft: '1px solid #cccccc', \n            width: '100%', \n            height: '100%'\n         }, \n        editor: {\n            width: '92%'\n         }, \n        browserOuter: {\n            width: '92%'\n         }, \n        syntaxHigh: {\n            margin: 0, \n            padding: 0, \n            height: '100%'\n         }, \n        sidebar: {\n            display: 'flex', \n            flexDirection: 'column', \n            justifyContent: 'start', \n            width: '8%', \n            backgroundColor: '#666'\n         }, \n        sbItem: {\n            display: 'flex', \n            justifyContent: 'center'\n         }, \n        iconButton: {\n            padding: '10px'\n         }\n     })\n;\nexport default withStyles(muiStyles)(GeneratedView);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\GenerationErrors.tsx.ittf\n*/\nimport * as React from 'react';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nexport type GenerationErrorsProps = { \n    classes: any;\n    error?: any;\n};\n\nexport class GenerationErrors extends React.Component<GenerationErrorsProps> {\n    render() {\n        const {\n            classes, \n            error\n         } = this.props;\n        var {\n            name, \n            message, \n            data, \n            inner, \n            ittfDocumentUri, \n            method, \n            uri, \n            mixerUri, \n            stack, \n            errorLines, \n            parameter\n         } = error;\n        if (data) {\n            if (data.errorName) {\n                name = data.errorName;\n            }\n            if (data.method) {\n                method = data.method;\n            }\n            if (data.uri) {\n                ittfDocumentUri = data.uri;\n            }\n            if (data.mixerUri) {\n                mixerUri = data.mixerUri;\n            }\n            if (data.errorLines) {\n                errorLines = data.errorLines;\n            }\n        }\n        if (inner) {\n            if (inner.name) {\n                name = inner.name;\n            }\n            if (inner.message) {\n                message = inner.message;\n            }\n            if (inner.stack) {\n                stack = inner.stack;\n            }\n            if (inner.errorLines) {\n                errorLines = inner.errorLines;\n            }\n        }\n        return  (\n            <div\n             className={classes.container}>\n                <div\n                 className={classes.errorName}>\n                    {name}\n                </div>\n                {\n                    method\n                     &&  (\n                        <div\n                         className={classes.errorMethod}>\n                            Method: {method}\n                        </div>\n                        )\n                    \n                }\n                {\n                    ittfDocumentUri\n                     &&  (\n                        <div\n                         className={classes.errorUri}>\n                            In ITTF Document: {ittfDocumentUri}\n                        </div>\n                        )\n                    \n                }\n                {\n                    mixerUri\n                     &&  (\n                        <div\n                         className={classes.errorUri}>\n                            Mixed by ITTF Document: {mixerUri}\n                        </div>\n                        )\n                    \n                }\n                <div\n                 className={classes.message}>\n                    {\n                        message\n                         && message.split(',').map((line, i) => \n                        \n                             (\n                            <div\n                             key={i}>\n                                {line}\n                            </div>\n                            )\n                        \n                        )\n                    }\n                    {\n                        parameter\n                         && Object.keys(parameter).map((key) => {\n                        \n                            return  (\n                                <div\n                                >\n                                    {key}: {parameter[key]}\n                                </div>\n                                )\n                            ;\n                        }\n                        )\n                    }\n                </div>\n                <pre\n                 className={classes.lines}>\n                    {errorLines && errorLines.join('\\n')}\n                    <ul\n                     />\n                    {\n                        stack\n                         && stack.split('\\n').map((line, i) => \n                        \n                             (\n                            <li\n                             key={i}>\n                                {line}\n                            </li>\n                            )\n                        \n                        )\n                    }\n                </pre>\n            </div>\n            )\n        ;\n    }\n}\n\nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        container: {\n            display: 'flex', \n            flexDirection: 'column', \n            borderLeft: '1px solid #cccccc', \n            width: '44vw', \n            height: '100%', \n            overflow: 'scroll'\n         }, \n        errorName: {\n            padding: '15px 30px', \n            fontSize: '28px'\n         }, \n        errorMethod: {\n            padding: '5px 10px', \n            fontSize: '20px'\n         }, \n        errorUri: {\n            padding: '5px 10px', \n            fontSize: '20px'\n         }, \n        message: {\n            padding: '15px 30px', \n            fontSize: '20px'\n         }, \n        lines: {\n            padding: '15px 30px', \n            fontSize: '18px', \n            fontFamily: 'Courier, mono'\n         }\n     })\n;\n\nexport default withStyles(muiStyles)(GenerationErrors);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\KeyboardShortcuts.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {KeyMap} from '../widgets/KeybindingsManager';\nimport ShortcutLabel from '../widgets/ShortcutLabel';\nexport const Shortcuts = {\n    save: {\n        description: 'Save changes', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.S\n        ]\n     }, \n    update: {\n        type: 'update', \n        description: 'Update code on device', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.U\n        ]\n     }, \n    tree: {\n        description: 'Toggle sidebar', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.Backslash\n        ]\n     }, \n    panels: {\n        description: 'Toggle error and log panels', \n        combo: [\n            KeyMap.Ctrl, \n            KeyMap.Tilde\n        ]\n     }, \n    format: {\n        description: 'Format code with prettier', \n        combo: [\n            KeyMap.Ctrl, \n            KeyMap.Alt, \n            KeyMap.F\n        ]\n     }, \n    shortcuts: {\n        description: 'Show keyboard shortcuts', \n        combo: [\n            KeyMap.Meta, \n            KeyMap.Alt, \n            KeyMap.Shift\n        ]\n     }\n };\nclass KeyboardShortcuts extends React.PureComponent {\n    render() {\n        return  (\n            <table\n             className={css(styles.shortcutList)}>\n                <tbody\n                >\n                    {\n                        Object.entries(Shortcuts).map(([type, binding]) => \n                        \n                             (\n                            <tr\n                             key={type}>\n                                <td\n                                 className={css(styles.shortcutCell, styles.shortcutLabelCell)}>\n                                    <ShortcutLabel\n                                     boxed combo={binding.combo} />\n                                </td>\n                                <td\n                                 className={css(styles.shortcutCell, styles.shortcutDescriptionCell)}>\n                                    {binding.description}\n                                </td>\n                            </tr>\n                            )\n                        \n                        )\n                    }\n                </tbody>\n            </table>\n            )\n        ;\n    }\n}\nexport default KeyboardShortcuts;\nconst styles = StyleSheet.create({\n    shortcutList: {\n        fontSize: '1.2em', \n        tableLayout: 'fixed'\n     }, \n    shortcutCell: {\n        padding: '6px 8px'\n     }, \n    shortcutLabelCell: {\n        textAlign: 'right', \n        marginRight: 8\n     }, \n    shortcutDescriptionCell: {\n        textAlign: 'left'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\ModalProductionDetails.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Form, withStatus, withValidation} from '../../features/form';\nimport {PackiProduction} from '../../features/packi';\nimport {c} from '../ThemeProvider';\nimport {Button} from '../widgets/Button';\nimport LargeInput from '../widgets/LargeInput';\nimport LargeTextArea from '../widgets/LargeTextArea';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    visible: boolean;\n    title: string;\n    action: string;\n    onSubmit: (details: { \n        name: string;\n        description: string;\n        mainIttf: string;\n        wizziSchema: string;\n    }) => void;\n    onDismiss: () => void;\n    packiProduction: PackiProduction;\n    name: string;\n    description: string | undefined;\n    mainIttf?: string;\n    wizziSchema?: string;\n    isWorking?: boolean;\n};\ntype State = { \n    name: string;\n    description: string;\n    mainIttf: string;\n    wizziSchema: string;\n    visible: boolean;\n};\n\n// @ts-ignore\nconst FormButton = withStatus(Button); \n\n// @ts-ignore\nconst ValidatedInput = withValidation(LargeInput); \nexport default class ModalProductionDetails extends React.Component<Props, State> {\n        static getDerivedStateFromProps(props: Props, state: State) {\n            if (state.visible !== props.visible) {\n                if (props.visible) {\n                    return {\n                            name: props.name || '', \n                            description: props.description ?? '', \n                            mainIttf: props.mainIttf ?? '', \n                            wizziSchema: props.wizziSchema ?? '', \n                            visible: props.visible\n                         };\n                }\n                else {\n                    return {\n                            visible: props.visible\n                         };\n                }\n            }\n            return null;\n        }\n        state = {\n            name: this.props.name || '', \n            description: this.props.description ?? '', \n            mainIttf: this.props.mainIttf ?? '', \n            wizziSchema: this.props.wizziSchema ?? '', \n            visible: this.props.visible\n        }\n        ;\n        _handleSubmit = () => \n            this.props.onSubmit({\n                name: this.state.name, \n                description: this.state.description, \n                mainIttf: this.state.mainIttf, \n                wizziSchema: this.state.wizziSchema\n             });\n        _validateName = (name: string) => \n            name ? /^[a-z_\\-\\.\\/\\d\\s]+$/i.test(name) ? null : new Error('Name can only contain letters, numbers, space, hyphen (-) and underscore (_).') : new Error('Name cannot be empty.');\n        handleChange = (e: React.ChangeEvent<HTMLInputElement>) => \n            this.setState({\n                [e.target.name]: e.target.value\n             });\n        \n        // log 'ModalProductionDetails.state', this.state\n        render() {\n            const {\n                visible, \n                title, \n                onDismiss, \n                isWorking, \n                action, \n                packiProduction\n             } = this.props;\n            return  (\n                <ModalDialog\n                 visible={visible} title={title} onDismiss={onDismiss}>\n                    <Form\n                     onSubmit={this._handleSubmit}>\n                        <h4\n                         className={css(styles.subtitle)}>\n                            Name\n                        </h4>\n                        <ValidatedInput \n                            name='name'\n                            \n                            // @ts-ignore\n                            autoFocus\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                            placeholder=\"Unnamed Packi\"\n                            validate={this._validateName}\n                         />\n                        <h4\n                         className={css(styles.subtitle)}>\n                            Description\n                        </h4>\n                        <LargeTextArea \n                            name='description'\n                            value={this.state.description}\n                            onChange={this.handleChange}\n                            minRows={4}\n                         />\n                        {\n                            packiProduction == \"artifact\"\n                             &&  (\n                                <div\n                                >\n                                    <h4\n                                     className={css(styles.subtitle)}>\n                                        Main ittf\n                                    </h4>\n                                    <LargeInput\n                                     name='mainIttf' value={this.state.mainIttf} onChange={this.handleChange} />\n                                    <h4\n                                     className={css(styles.subtitle)}>\n                                        Wizzi schema\n                                    </h4>\n                                    <LargeInput\n                                     name='wizziSchema' value={this.state.wizziSchema} onChange={this.handleChange} />\n                                </div>\n                                )\n                            \n                        }\n                        <div\n                         className={css(styles.buttons)}>\n                            <FormButton \n                                \n                                // @ts-ignore\n                                type=\"submit\"\n                                large\n                                variant=\"primary\"\n                                loading={isWorking}\n                            >\n                                {action}\n                            </FormButton>\n                        </div>\n                    </Form>\n                </ModalDialog>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({ subtitle: { fontSize: 16,  fontWeight: 500,  padding: 0,  lineHeight: '22px',  margin: '16px 0 6px 0'  },  buttons: { margin: '20px 0 0 0'  },  caption: { marginTop: 24,  fontSize: '16px',  lineHeight: '22px',  textAlign: 'center'  },  link: { cursor: 'pointer',  color: c('primary'),  textDecoration: 'underline'  }  }); \n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\NoFileSelected.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nexport default class NoFileSelected extends React.PureComponent {\n        render() {\n            return  (\n                <div\n                 className={css(styles.container)}>\n                    <h4\n                     className={css(styles.text)}>\n                        Select a file to view and edit\n                    </h4>\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1, \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center'\n     }, \n    text: {\n        fontSize: '1.5em', \n        fontWeight: 500, \n        opacity: 0.5\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\ProblemsPanel.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport trim from 'lodash/trim';\nimport * as React from 'react';\nimport {Annotation} from '../../features/annotations';\nimport {c, s} from '../ThemeProvider';\nexport type ProblemsPanelProps = { \n    annotations: Annotation[];\n    onSelectFile: (path: string) => void;\n};\nexport function ProblemsPanel({\n    annotations, \n    onSelectFile\n }: ProblemsPanelProps) {\n\n    const [selected, setSelected] = React.useState<string | undefined>(undefined);\n    return  (\n        <React.Fragment\n        >\n            {\n                annotations.map(({\n                    message, \n                    location, \n                    source, \n                    severity, \n                    action\n                 }, index) => {\n                \n                    let iconStyle = styles.infoIcon;\n                    let locationStyle = styles.infoColor;\n                    if (severity >= 3) {\n                        iconStyle = styles.errorIcon;\n                        locationStyle = styles.errorColor;\n                    }\n                    else {\n                        if (severity >= 2) {\n                            iconStyle = styles.warningIcon;\n                            locationStyle = styles.warningColor;\n                        }\n                        else {\n                            if (severity < 0) {\n                                iconStyle = styles.loadingIcon;\n                            }\n                        }\n                    }\n                    const file = location?.fileName ?  (\n                        <span\n                         className={css(styles.location, locationStyle)} onClick={() => \n                            \n                                onSelectFile(location.fileName)\n                        }>\n                            {\n                                `${location.fileName} (${location.startLineNumber}:${location.startColumn})`\n                            }\n                        </span>\n                        )\n                     : '';\n                    const icon =  (\n                    <div\n                     className={css(styles.icon, iconStyle)} />\n                    )\n                    ;\n                    const lines = message.split('\\n');\n                    const title = lines[0];\n                    let suffix;\n                    if (action) {\n                        suffix =  (\n                        <button\n                         className={css(styles.action)} onClick={action.run}>\n                            {\n                                action.icon ?  (\n                                    <span\n                                     className={css(styles.actionIcon)}>\n                                        <action.icon\n                                         />\n                                    </span>\n                                    )\n                                 : undefined\n                            }\n                            <span\n                             className={css(styles.actionText)}>\n                                {action.title}\n                            </span>\n                        </button>\n                        )\n                        ;\n                    }\n                    else {\n                        if (source) {\n                            suffix =  (\n                            <span\n                             className={css(styles.source)}>\n                                {\n                                    ` (${source})`\n                                }\n                            </span>\n                            )\n                            ;\n                        }\n                    }\n                    const key = `${location?.fileName ?? ''}.${title}.${source ?? ''}`;\n                    const expanded = annotations.length === 1 || selected === key;\n                    return  (\n                        <div\n                         key={index} className={css(styles.item)} onClick={() => \n                            \n                                setSelected(key)\n                        }>\n                            <div\n                             className={css(styles.line)}>\n                                {icon}\n                                {file}\n                                {title}\n                                {suffix}\n                            </div>\n                            {\n                                expanded && lines.length > 1 ?  (\n                                    <pre\n                                     className={css(styles.callstack)}>\n                                        {trim(message.substring(title.length), '\\r\\n')}\n                                    </pre>\n                                    )\n                                 : undefined\n                            }\n                        </div>\n                        )\n                    ;\n                }\n                )\n            }\n        </React.Fragment>\n        )\n    ;\n}\n\nexport default ProblemsPanel;\n\nconst styles = StyleSheet.create({\n    item: {\n        display: 'flex', \n        flexDirection: 'column', \n        padding: '0 1.5em'\n     }, \n    line: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        border: 0, \n        margin: 0, \n        padding: '1px 0', \n        color: c('text'), \n        minHeight: 30\n     }, \n    icon: {\n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: 'center center', \n        width: 16, \n        height: 16, \n        marginRight: '0.5em'\n     }, \n    loadingIcon: {\n        borderWidth: 2, \n        borderStyle: 'solid', \n        borderTopColor: c('text'), \n        borderLeftColor: c('text'), \n        borderBottomColor: c('text'), \n        borderRightColor: 'rgba(0, 0, 0, .16)', \n        opacity: 0.5, \n        borderRadius: '50%', \n        verticalAlign: -3, \n        animationName: [\n            {\n                from: {\n                    transform: 'rotate(0deg)'\n                 }, \n                to: {\n                    transform: 'rotate(360deg)'\n                 }\n             }\n        ], \n        animationDuration: '1s', \n        animationIterationCount: 'infinite', \n        animationTimingFunction: 'linear'\n     }, \n    infoIcon: {\n        backgroundImage: `url(${require('../../assets/info-icon.png')})`\n     }, \n    errorIcon: {\n        backgroundImage: `url(${require('../../assets/cross-red.png')})`\n     }, \n    warningIcon: {\n        backgroundImage: `url(${require('../../assets/cross.png')})`\n     }, \n    location: {\n        textDecoration: 'underline', \n        cursor: 'pointer', \n        marginRight: '0.5em'\n     }, \n    infoColor: {\n        opacity: 0.5\n     }, \n    errorColor: {\n        color: c('error')\n     }, \n    warningColor: {\n        color: c('warning')\n     }, \n    source: {\n        color: c('text'), \n        opacity: 0.5, \n        marginLeft: '0.5em'\n     }, \n    action: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        appearance: 'none', \n        outline: 0, \n        margin: '0 0 0 0.5em', \n        backgroundColor: c('content'), \n        color: c('selected'), \n        borderRadius: 3, \n        border: `1px solid ${c('selected')}`, \n        lineHeight: 1, \n        padding: '0 12px', \n        minWidth: 50, \n        minHeight: 30, \n        ':hover': {\n            backgroundColor: c('selected'), \n            color: c('content'), \n            boxShadow: s('small')\n         }\n     }, \n    actionIcon: {\n        marginRight: 4\n     }, \n    actionText: {\n        whiteSpace: 'nowrap', \n        overflow: 'hidden', \n        textOverflow: 'ellipsis'\n     }, \n    callstack: {\n        color: c('error'), \n        fontFamily: 'var(--font-monospace)', \n        margin: '0.5em 0px'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\EditorView\\UserMenu.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {loggedUser} from '../../features/app';\nimport {c} from '../ThemeProvider';\nimport {Avatar} from '../widgets/Avatar';\nimport ContextMenu from '../widgets/ContextMenu';\nexport type UserMenuProps = { \n    loggedUser: LoggedUser;\n};\ntype State = { \n    visible: boolean;\n};\nexport class UserMenuComp extends React.Component<UserMenuProps, State> {\n    state: State = {\n        visible: false\n    }\n    ;\n    componentDidMount() {\n        document.addEventListener('click', this._handleDocumentClick);\n        document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click', this._handleDocumentClick);\n        document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    _handleDocumentClick = (e: MouseEvent) => {\n        if (this.state.visible) {\n            if (this._menu.current && e.target !== this._menu.current && !this._menu.current.contains(e.target as HTMLElement)) {\n                this._hideMenu();\n            }\n        }\n        else {\n            if (this._avatar.current && (e.target === this._avatar.current || this._avatar.current.contains(e.target as Node))) {\n                this.setState((state) => \n                \n                    ({\n                        visible: !state.visible\n                     })\n                )\n            }\n        }\n    };\n    _handleDocumentContextMenu = () => {\n        if (this.state.visible) {\n            this._hideMenu();\n        }\n    };\n    _hideMenu = () => \n        this.setState({\n            visible: false\n         });\n    _menu = React.createRef<HTMLUListElement>();\n    _avatar = React.createRef<HTMLButtonElement>();\n    render() {\n        const {\n            loggedUser\n         } = this.props;\n        return  (\n            <div\n             className={css(styles.container)}>\n                <button\n                 ref={this._avatar} className={css(styles.button)} title=\"Your profile\">\n                    <Avatar\n                     source={loggedUser?.picture ? loggedUser.picture : null} size={26} />\n                </button>\n                <ContextMenu \n                    ref={this._menu}\n                    visible={this.state.visible}\n                    actions={loggedUser ? [\n                                {\n                                    label: 'Artifacts', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/productions/artifacts`)\n                                    \n                                 }, \n                                {\n                                    label: 'Packages', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/productions/packages`)\n                                    \n                                 }, \n                                {\n                                    label: 'Metas', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/productions/metas`)\n                                    \n                                 }, \n                                {\n                                    label: 'tFolders', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/productions/tfolders`)\n                                    \n                                 }, \n                                {\n                                    label: 'Settings', \n                                    handler: () => \n                                    \n                                        window.open(`${process.env.SERVER_URL}/settings`)\n                                    \n                                 }\n                            ] : [\n                                {\n                                    label: 'Log in to Wizzi', \n                                    handler: () => \n                                    \n                                        window.location.href = '#'\n                                    \n                                 }\n                            ]}\n                    onHide={this._hideMenu}\n                    className={css(styles.menu)}\n                 />\n            </div>\n            )\n        ;\n    }\n}\nexport const UserMenu = UserMenuComp;\nexport default UserMenu;\nconst styles = StyleSheet.create({\n    container: {\n        marginRight: 16\n     }, \n    menu: {\n        position: 'absolute', \n        margin: '4px 0', \n        right: 16\n     }, \n    button: {\n        appearance: 'none', \n        background: 'transparent', \n        padding: 0, \n        margin: 0, \n        border: 0, \n        outline: 0, \n        height: 40, \n        width: 40, \n        borderRadius: 2, \n        textDecoration: 'none', \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        ':hover': {\n            backgroundColor: c('hover')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileList.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport pickBy from 'lodash/pickBy';\nimport * as React from 'react';\nimport eslintrc from '../../features/lint/eslint.json';\nimport {SaveStatus, PackiFiles, PackiFile} from '../../features/packi';\nimport {Annotation} from '../../features/annotations';\nimport {FileSystemEntry, TextFileEntry, AssetFileEntry, isPackageJson, getUniquePath, isInsideFolder, isESLintConfig} from '../../features/file';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {SidebarShell} from '../shell/SidebarShell';\nimport {c} from '../ThemeProvider';\nimport ResizablePane from '../widgets/ResizablePane';\nimport Toast from '../widgets/Toast';\nimport FileListChildren from './FileListChildren';\nimport FileListEntryDropTarget from './FileListEntryDropTarget';\nimport FileListOpenEntry from './FileListOpenEntry';\nimport FileListPane from './FileListPane';\nimport FileListPaneButton from './FileListPaneButton';\nimport closeEntry from './actions/closeEntry';\nimport createNewEntry from './actions/createNewEntry';\nimport expandEntry from './actions/expandEntry';\nimport openEntry from './actions/openEntry';\nimport pasteEntry from './actions/pasteEntry';\nimport recursivelyCreateParents from './actions/recursivelyCreateParents';\nimport renameEntry from './actions/renameEntry';\nimport selectEntry from './actions/selectEntry';\nimport updateEntry from './actions/updateEntry';\nimport {filesToEntries, findFocusedEntry} from './utils/convertFileStructure';\nimport PackiPanel from '../Packi/PackiPanel';\nexport type FileListProps = { \n    visible: boolean;\n    files: PackiFiles;\n    selectedFile: string;\n    readOnly: boolean;\n    updateFiles: (updateFn: (files: PackiFiles) => { \n        [path: string]: PackiFile | null;\n    }) => void;\n    onSelectFile: (path: string) => void;\n    onRemoveFile: (path: string) => void;\n    onRenameFile: (oldPath: string, newPath: string) => void;\n    onDownloadCode: () => Promise<void>;\n    onGithubClone: () => void;\n    saveStatus: SaveStatus;\n    theme: ThemeName;\n    annotations: Annotation[];\n};\ntype State = { \n    clipboard: FileSystemEntry[];\n    deleted: { \n        id: number;\n        path: string;\n        entries: FileSystemEntry[];\n    }[];\n    optionsPane: boolean;\n    openFilesPane: boolean;\n    projectPane: boolean;\n    entries: FileSystemEntry[];\n    selectedFile: string;\n};\nconst AddIcon = () => \n\n     (\n    <g\n     transform=\"translate(7.000000, 7.000000)\">\n        <circle \n            fill={c('success')}\n            cx=\"4.5\"\n            cy=\"4.5\"\n            r=\"4.5\"\n         />\n        <rect \n            fill={c('success-text')}\n            x=\"4\"\n            y=\"2\"\n            width=\"1\"\n            height=\"5\"\n         />\n        <rect \n            fill={c('success-text')}\n            x=\"2\"\n            y=\"4\"\n            width=\"5\"\n            height=\"1\"\n         />\n    </g>\n    )\n\n;\nclass FileListComp extends React.PureComponent<FileListProps, State> {\n    state: State = {\n        clipboard: [], \n        deleted: [], \n        optionsPane: true, \n        openFilesPane: true, \n        projectPane: true, \n        entries: [], \n        selectedFile: ''\n    }\n    ;\n    static getDerivedStateFromProps(props: FileListProps, state: State) {\n        let entries = filesToEntries(props.files, props.annotations, state.entries);\n        entries = state.selectedFile !== props.selectedFile ? openEntry(entries, props.selectedFile) : entries;\n        return {\n                entries, \n                selectedFile: props.selectedFile\n             };\n    }\n    private updateEntries(entries: FileSystemEntry[]) {\n        const prevEntries = this.state.entries;\n        // Sync changes\n        this.setState({\n            entries\n         })\n        // Sync changes\n        this.props.updateFiles((files) => {\n        \n            \n            // Handle file removal (and rename)\n            const updates: { \n                [path: string]: PackiFile | null;\n            } = {};\n            for (const path in files) {\n                const entry = entries.find(entry => \n                \n                    entry.item.path === path\n                );\n                if (!entry) {\n                    updates[path] = null;\n                }\n                // Handle file removal (and rename)\n                // Handle added/renamed files\n            }\n            // Handle added/renamed files\n            entries.forEach((entry) => {\n            \n                if (entry.item.type === 'file' && !files[entry.item.path] && !isPackageJson(entry.item.path)) {\n                    updates[entry.item.path] = {\n                        type: entry.item.asset ? 'ASSET' : 'CODE', \n                        contents: entry.item.asset ? entry.item.uri : entry.item.content\n                     };\n                }\n            }\n            )\n            return updates;\n        }\n        )\n        \n        // Update focus\n        const prevFocusedEntry = findFocusedEntry(prevEntries);\n        const focusedEntry = findFocusedEntry(entries);\n        if (focusedEntry?.item?.path !== prevFocusedEntry?.item?.path) {\n            this.props.onSelectFile(focusedEntry?.item?.path ?? '');\n        }\n    }\n    _handleEntrySelect = (path: string) => \n        this.updateEntries(selectEntry(this.state.entries, path));\n    _handleEntryOpen = (path: string) => \n        this.updateEntries(openEntry(this.state.entries, path));\n    _handleEntryFocus = (path: string) => \n        this.updateEntries(openEntry(this.state.entries, path, true));\n    _handleEntryExpand = (path: string, expand?: boolean) => \n        this.updateEntries(expandEntry(this.state.entries, path, expand));\n    _handleEntryRename = (oldPath: string, newPath: string) => {\n        if (oldPath === newPath) {\n            return ;\n        }\n        const entry = this.state.entries.find(e => \n        \n            e.item.path === oldPath\n        );\n        if (entry) {\n            if (entry.item.type === 'folder') {\n                this.state.entries.filter(e => \n                \n                    e.item.type === 'file' && e.item.path.startsWith(oldPath)\n                ).forEach(renamedFile => \n                \n                    this.props.onRenameFile(renamedFile.item.path, `${newPath}${renamedFile.item.path.substring(oldPath.length)}`)\n                )\n            }\n            else {\n                this.props.onRenameFile(oldPath, newPath);\n            }\n        }\n        this.updateEntries(renameEntry(this.state.entries, oldPath, newPath));\n    };\n    _restoreEntries = (entries: FileSystemEntry[]) => \n        this.updateEntries([\n            ...this.state.entries, \n            ...(entries.map(e => \n                \n                    updateEntry(e, {\n                        item: {\n                            path: getUniquePath(this.state.entries.map(it => \n                            \n                                it.item.path\n                            ), e.item.path)\n                         }\n                     })\n                ))\n            \n        ]);\n    _handleDismissDelete = (id: number) => \n        this.setState((state) => \n        \n            ({\n                deleted: state.deleted.filter(g => \n                \n                    g.id !== id\n                )\n             })\n        );\n    _handleEntryClose = (path: string) => \n        this.updateEntries(this.state.entries.map((e) => \n        \n            (e.item.path === path ? closeEntry(e) : e)\n        ));\n    _handleEntryCloseOthers = (path: string) => \n        this.updateEntries(this.state.entries.map((e) => \n        \n            (e.item.path !== path ? closeEntry(e) : e)\n        ));\n    _handleEntryCloseAll = () => \n        this.updateEntries(this.state.entries.map(e => \n        \n            closeEntry(e)\n        ));\n    _handleEntryDelete = (path: string) => {\n        const entry = this.state.entries.find(e => \n        \n            e.item.path === path\n        );\n        const deletedEntries: FileSystemEntry[] = [];\n        this.updateEntries(this.state.entries.filter((e) => {\n        \n            const remove = e.item.path === path || isInsideFolder(e.item.path, path);\n            if (remove) {\n                deletedEntries.push(e);\n                if (e.item.type === 'file') {\n                    this.props.onRemoveFile(e.item.path);\n                }\n            }\n            return !remove;\n        }\n        ))\n        this.setState((state) => \n        \n            ({\n                deleted: [\n                    ...state.deleted, \n                    {\n                        id: this._currentDeleteID++, \n                        path: entry ? entry.item.path : 'Item', \n                        entries: deletedEntries\n                     }\n                ]\n             })\n        )\n    };\n    _currentDeleteID: number = 0;\n    _handleEntryImport = (entry: TextFileEntry | AssetFileEntry) => {\n        let entries: FileSystemEntry[];\n        if (isPackageJson(entry.item.path)) {\n            \n            // Merge dependencies from package.json file\n            entries = this.state.entries.map((e) => {\n            \n                if (isPackageJson(e.item.path)) {\n                    try {\n                        \n                        // @ts-ignore\n                        \n                        // @ts-ignore\n                        const previous = JSON.parse(e.item.content); \n                        \n                        // @ts-ignore\n                        const next = JSON.parse(entry.item.content); \n                        return {\n                                    ...e, \n                                    item: {\n                                        ...e.item, \n                                        content: JSON.stringify({\n                                            ...previous, \n                                            dependencies: {\n                                                ...previous.dependencies, \n                                                ...Object.keys(next.dependencies).reduce((acc: { \n                                                    [key: string]: string;\n                                                }, name) => {\n                                                \n                                                    return acc;\n                                                }\n                                                , {})\n                                             }\n                                         }, null, 2)\n                                     }\n                                 } as TextFileEntry;\n                    } \n                    catch (err) {\n                    } \n                }\n                return e;\n            }\n            )\n            ;\n        }\n        else {\n            if (isESLintConfig(entry.item.path)) {\n                try {\n                    \n                    // Cleanup the config file to remove unsupported plugins and rules\n                    const content = JSON.parse((entry as TextFileEntry).item.content);\n                    if (content.plugins) {\n                        content.plugins = content.plugins.filter((name: string) => \n                        \n                            eslintrc.plugins.includes(name)\n                        )\n                        ;\n                        if (!content.plugins.length) {\n                            delete content.plugins\n                        }\n                    }\n                    if (content.rules) {\n                        content.rules = pickBy(content.rules, (_, key) => {\n                        \n                            if (key.includes('/')) {\n                                return eslintrc.plugins.some(name => \n                                    \n                                        key.startsWith(`${name}/`)\n                                    );\n                            }\n                            return key;\n                        }\n                        )\n                        ;\n                    }\n                    if (content.extends) {\n                        if (typeof content.extends === 'string' && !content.extends.startsWith('eslint:')) {\n                            delete content.extends\n                        }\n                        else {\n                            content.extends = content.extends.filter((name: string) => \n                            \n                                name.startsWith('eslint:')\n                            )\n                            ;\n                            if (!content.extends.length) {\n                                delete content.extends\n                            }\n                        }\n                    }\n                    \n                    // Remove existing eslintrc if any\n                    entries = this.state.entries.filter(e => \n                    \n                        !isESLintConfig(e.item.path)\n                    )\n                    ;\n                    entries.push(updateEntry(entry, {\n                        item: {\n                            content: JSON.stringify(content, null, 2)\n                         }\n                     }))\n                } \n                catch (e) {\n                    \n                    // Ignore errors\n                    entries = this.state.entries;\n                } \n            }\n            else {\n                const parents = recursivelyCreateParents(this.state.entries, entry.item.path);\n                entries = [\n                    ...this.state.entries, \n                    ...parents\n                ];\n                entries.push(updateEntry(entry, {\n                    item: {\n                        path: getUniquePath(entries.map(e => \n                        \n                            e.item.path\n                        ), entry.item.path)\n                     }\n                 }))\n            }\n        }\n        this.updateEntries(entries);\n    };\n    _handleEntryPaste = (path: string | undefined, e: FileSystemEntry) => \n        this.updateEntries(pasteEntry(this.state.entries, path, e));\n    _handleCopy = (path: string) => \n        this.setState((state) => \n        \n            ({\n                clipboard: state.entries.filter(e => \n                \n                    e.item.path === path\n                )\n             })\n        );\n    _handleClearClipboard = () => \n        this.setState({\n            clipboard: []\n         });\n    _toggleOptionsPane = () => \n        this.setState((state) => \n        \n            ({\n                optionsPane: !state.optionsPane\n             })\n        );\n    _toggleOpenFilesPane = () => \n        this.setState((state) => \n        \n            ({\n                openFilesPane: !state.openFilesPane\n             })\n        );\n    _toggleProjectPane = () => \n        this.setState((state) => \n        \n            ({\n                projectPane: !state.projectPane\n             })\n        );\n    _handleCreateFile = (path?: string | undefined) => {\n        let entries = createNewEntry(this.state.entries, 'file', path);\n        const newEntry = entries.find(e => \n        \n            !this.state.entries.find(e2 => \n                \n                    e2.item.path === e.item.path\n                )\n        );\n        entries = newEntry ? openEntry(entries, newEntry.item.path, true) : entries;\n        this.updateEntries(entries);\n    };\n    _handleCreateFolder = (path?: string | undefined) => \n        this.updateEntries(createNewEntry(this.state.entries, 'folder', path));\n    render() {\n        return  (\n            <div\n             className={css(styles.container)}>\n                {\n                this.props.visible ?  (\n                    <SidebarShell\n                     className={css(styles.pane)}>\n                        <FileListPane \n                            className={css(styles.options)}\n                            title={\"Options\" + (this.props.readOnly ? ' (readonly)': '')}\n                            expanded={this.state.optionsPane}\n                            onClick={this._toggleOptionsPane}\n                            buttons={!this.props.readOnly ? [\n                                         (\n                                        <FileListPaneButton\n                                         key=\"github-clone\" onClick={() => \n                                            \n                                                this._handleGithubClone()\n                                        }>\n                                            <path\n                                             fillOpacity=\"0.7\" d=\"M3,2 L13,2 L13,14 L3,14 L3,2 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                                            <AddIcon\n                                             />\n                                        </FileListPaneButton>\n                                        )\n                                        \n                                    ] : []}\n                        >\n                            <PackiPanel\n                             onGithubClone={this.props.onGithubClone}>\n                                <ul\n                                 className={css(styles.tabs)} />\n                            </PackiPanel>\n                        </FileListPane>\n                        <FileListPane \n                            className={css(this.state.projectPane ? styles.openFilesSmall : styles.openFilesLarge)}\n                            title=\"Open files\"\n                            expanded={this.state.openFilesPane}\n                            onClick={this._toggleOpenFilesPane}\n                        >\n                            <ul\n                             className={css(styles.tabs)} data-test-id=\"file-list-open-files-content\">\n                                {\n                                this.state.entries.filter(e => \n                                \n                                    e.item.type === 'file' && e.state.isOpen\n                                ).map((e: any) => \n                                \n                                     (\n                                    <FileListOpenEntry \n                                        key={e.item.path}\n                                        entry={e}\n                                        onOpen={() => \n                                            \n                                                this._handleEntryOpen(e.item.path)\n                                        }\n                                        onClose={() => \n                                            \n                                                this._handleEntryClose(e.item.path)\n                                        }\n                                        onCloseOthers={() => \n                                            \n                                                this._handleEntryCloseOthers(e.item.path)\n                                        }\n                                        onCloseAll={this._handleEntryCloseAll}\n                                     />\n                                    )\n                                \n                                )\n                                }</ul>\n                        </FileListPane>\n                        <FileListPane \n                            className={css(styles.project)}\n                            title={\"Project\" + (this.props.readOnly ? ' (readonly)': '')}\n                            expanded={this.state.projectPane}\n                            onClick={this._toggleProjectPane}\n                            buttons={!this.props.readOnly ? [\n                                         (\n                                        <FileListPaneButton\n                                         key=\"create-file\" onClick={() => \n                                            \n                                                this._handleCreateFile()\n                                        }>\n                                            <path\n                                             fillOpacity=\"0.7\" d=\"M3,2 L13,2 L13,14 L3,14 L3,2 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                                            <AddIcon\n                                             />\n                                        </FileListPaneButton>\n                                        )\n                                        , \n                                         (\n                                        <FileListPaneButton\n                                         key=\"create-folder\" onClick={() => \n                                            \n                                                this._handleCreateFolder()\n                                        }>\n                                            <path\n                                             fillOpacity=\"0.7\" d=\"M7.25,4 L7.5,4 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L7.25,4 Z M6.75,4 L5,4 L7,2 L7,3.5 L6.5,4 L6.75,4 Z M1,4 L15,4 L15,14 L1,14 L1,4 Z M7.5,3 L7.5,4 L14,4 L14,3 L7.5,3 Z\" />\n                                            <AddIcon\n                                             />\n                                        </FileListPaneButton>\n                                        )\n                                        \n                                    ] : []\n                            }\n                        >\n                            <FileListEntryDropTarget\n                             className={css(styles.files)} rest={this.state.entries} onRename={this._handleEntryRename}>\n                                <div\n                                 className={css(styles.children)} data-test-id=\"file-list-project-content\">\n                                    <FileListChildren \n                                        parent=\"\"\n                                        entries={this.state.entries}\n                                        readOnly={this.props.readOnly}\n                                        clipboard={this.state.clipboard}\n                                        onCreateFile={this._handleCreateFile}\n                                        onCreateFolder={this._handleCreateFolder}\n                                        onOpen={this._handleEntryOpen}\n                                        onSelect={this._handleEntrySelect}\n                                        onFocus={this._handleEntryFocus}\n                                        onPaste={this._handleEntryPaste}\n                                        onRename={this._handleEntryRename}\n                                        onExpand={this._handleEntryExpand}\n                                        onDelete={this._handleEntryDelete}\n                                        onCopy={this._handleCopy}\n                                        onClearClipboard={this._handleClearClipboard}\n                                        theme={this.props.theme}\n                                        className={css(styles.list)}\n                                     />\n                                </div>\n                            </FileListEntryDropTarget>\n                        </FileListPane>\n                        {\n                        this.state.deleted.map((group) => \n                        \n                             (\n                            <Toast \n                                key={group.id}\n                                label={`Deleted ${group.path.split('/').pop()}`}\n                                actions={[\n                                        {\n                                            label: 'Undo', \n                                            action: () => {\n                                            \n                                                this._restoreEntries(group.entries);\n                                                this._handleDismissDelete(group.id);\n                                            }\n                                            \n                                         }, \n                                        {\n                                            label: 'Dismiss'\n                                         }\n                                    ]}\n                                onDismiss={() => \n                                    \n                                        this._handleDismissDelete(group.id)\n                                }\n                             />\n                            )\n                        \n                        ).reverse()\n                        }</SidebarShell>\n                    )\n                 : null}\n            </div>\n            )\n        ;\n    }\n}\n\nexport const FileList = withThemeName(FileListComp);\n\nexport default withThemeName(FileListComp);\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flexDirection: 'column', \n        height: '100%', \n        width: '100%'\n     }, \n    list: {\n        padding: '0 12px', \n        height: '100%', \n        width: '100%'\n     }, \n    pane: {\n        flex: 1, \n        display: 'flex', \n        flexDirection: 'column', \n        height: '100%', \n        width: '100%', \n        zIndex: 10\n     }, \n    project: {\n        flex: 1\n     }, \n    options: {\n        maxHeight: '30%'\n     }, \n    openFilesSmall: {\n        maxHeight: '50%'\n     }, \n    openFilesLarge: {\n        maxHeight: 'calc(100% - 30px)'\n     }, \n    files: {\n        flex: '1 0 0', \n        overflow: 'auto', \n        paddingBottom: 16\n     }, \n    children: {\n        position: 'relative'\n     }, \n    tabs: {\n        margin: 0, \n        listStyle: 'none', \n        padding: '2px 0', \n        overflow: 'auto', \n        ':empty': {\n            display: 'none'\n         }\n     }, \n    toolbar: {\n        padding: 8\n     }, \n    toasts: {\n        position: 'fixed', \n        bottom: '3em', \n        left: '1em', \n        zIndex: 10\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListChildren.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport escapeRegexp from 'escape-string-regexp';\nimport * as React from 'react';\nimport {FileSystemEntry, isInsideFolder} from '../../features/file';\nimport {ThemeName} from '../../features/preferences';\nimport FileListEntry from './FileListEntry';\ntype Props = { \n    parent: string;\n    entries: FileSystemEntry[];\n    readOnly: boolean;\n    clipboard: FileSystemEntry[];\n    onOpen: (path: string) => void;\n    onFocus: (path: string) => void;\n    onSelect: (path: string) => void;\n    onCopy: (path: string) => void;\n    onDelete: (path: string) => void;\n    onExpand: (path: string, expand?: boolean) => void;\n    onCreateFile: (path: string | undefined) => void;\n    onCreateFolder: (path: string | undefined) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    onPaste: (path: string | undefined, entry: FileSystemEntry) => void;\n    onClearClipboard: () => void;\n    theme: ThemeName;\n    className?: string;\n};\nexport default class FileListChildren extends React.PureComponent<Props> {\n        _getImmediateChildren = () => \n            this.props.entries.filter(e => \n            \n                !e.item.path.replace(new RegExp(`^${escapeRegexp(this.props.parent)}/`), '').includes('/')\n                    // Filter-out non-immediate children\n            \n            );\n        render() {\n            const {\n                entries, \n                readOnly, \n                clipboard, \n                onCreateFile, \n                onCreateFolder, \n                onFocus, \n                onOpen, \n                onSelect, \n                onPaste, \n                onRename, \n                onExpand, \n                onDelete, \n                onCopy, \n                onClearClipboard, \n                className, \n                theme\n             } = this.props;\n            return  (\n                <div\n                 className={`${css(styles.container)} ${className ?? ''}`}>\n                    {\n                        this._getImmediateChildren().sort((a, b) => {\n                        \n                            if (a.item.type === b.item.type) {\n                                if (a.item.path.startsWith('.') && !b.item.path.startsWith('.')) {\n                                    return 1;\n                                }\n                                if (b.item.path.startsWith('.') && !a.item.path.startsWith('.')) {\n                                    return -1;\n                                }\n                                return a.item.path.localeCompare(b.item.path);\n                            }\n                            else {\n                                if (a.item.type === 'folder') {\n                                    return -1;\n                                }\n                                else {\n                                    return 1;\n                                }\n                            }\n                        }\n                        ).map((e) => \n                        \n                             (\n                            <FileListEntry \n                                key={e.item.path}\n                                entry={e}\n                                rest={entries.filter(en => \n                                    \n                                        isInsideFolder(en.item.path, e.item.path)\n                                    )}\n                                readOnly={readOnly}\n                                clipboard={clipboard}\n                                onCreateFile={onCreateFile}\n                                onCreateFolder={onCreateFolder}\n                                onOpen={onOpen}\n                                onSelect={onSelect}\n                                onFocus={onFocus}\n                                onCopy={onCopy}\n                                onPaste={onPaste}\n                                onDelete={onDelete}\n                                onRename={onRename}\n                                onExpand={onExpand}\n                                onClearClipboard={onClearClipboard}\n                                getAdjacentEntries={this._getImmediateChildren}\n                                theme={theme}\n                             />\n                            )\n                        \n                        )\n                        \n                    }\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        display: 'inline-block', \n        width: '100%'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntry.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {FileSystemEntry, isEntryPoint, getParentPath, isTest} from '../../features/file';\nimport {ThemeName} from '../../features/preferences';\nimport {c} from '../ThemeProvider';\nimport {Action} from '../widgets/ContextMenu';\nimport {KeyMap} from '../widgets/KeybindingsManager';\nimport FileListChildren from './FileListChildren';\nimport FileListEntryBase from './FileListEntryBase';\nimport FileListEntryIcon from './FileListEntryIcon';\nexport type FileListEntryProps = { \n    entry: FileSystemEntry;\n    rest: FileSystemEntry[];\n    readOnly: boolean;\n    clipboard: FileSystemEntry[];\n    onOpen: (path: string) => void;\n    onFocus: (path: string) => void;\n    onSelect: (path: string) => void;\n    onDelete: (path: string) => void;\n    onCopy: (path: string) => void;\n    onExpand: (path: string, expand?: boolean) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    onCreateFile: (path: string | undefined) => void;\n    onCreateFolder: (path: string | undefined) => void;\n    onPaste: (path: string | undefined, entry: FileSystemEntry) => void;\n    onClearClipboard: () => void;\n    getAdjacentEntries: () => FileSystemEntry[];\n    theme: ThemeName;\n};\ntype State = { \n    name: string;\n    error: Error | null;\n    isRenaming: boolean;\n};\nconst toggleTSExt = (name: string) => \n\n    name.replace(/(\\.[^.]+$)/, (_, $1) => \n    \n        ($1 === '.js' ? '.tsx' : '.js')\n    )\n;\nexport class FileListEntry extends React.Component<FileListEntryProps, State> {\n    constructor(props: FileListEntryProps) {\n        super(props);\n        const {\n            entry\n         } = props;\n        this.state = {\n            name: entry.state.isCreating ? entry.item.path.split('/').pop() ?? '' : '', \n            error: null, \n            isRenaming: !entry.item.asset && !!entry.state.isCreating\n         };\n    }\n    state: State;\n    componentDidMount() {\n        if (this.props.entry.state.isCreating) {\n            this.props.onOpen(this.props.entry.item.path);\n        }\n    }\n    _handleToggleExpand = () => \n        this.props.onExpand(this.props.entry.item.path, !this.props.entry.state.isExpanded);\n    _handleToggleRename = () => {\n        if (this.state.isRenaming && !this.state.error) {\n            this._handleNameChange(this.state.name);\n        }\n        this.setState((state, props) => \n        \n            state.isRenaming ? {\n                    isRenaming: false, \n                    name: '', \n                    error: null\n                 } : {\n                    isRenaming: true, \n                    name: props.entry.item.path.split('/').pop() ?? '', \n                    error: null\n                 }\n        )\n    };\n    _handleDelete = () => \n        this.props.onDelete(this.props.entry.item.path);\n    _handleNameChange = (name: string) => {\n        const {\n            entry\n         } = this.props;\n        if (name && (name !== entry.item.path.split('/').pop() || entry.state.isCreating)) {\n            const newPath = entry.item.path.replace(/[^/]+$/, name);\n            this.props.onRename(entry.item.path, newPath);\n        }\n    };\n    _handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.value;\n        this.setState({\n            name, \n            error: this._validateName(name)\n         })\n    };\n    _validateName = (name: string) => {\n        if (name === this.props.entry.item.path.split('/').pop()) {\n            return null;\n        }\n        const invalidCharacters = [\n            '\\0', \n            '\\\\', \n            ':', \n            '*', \n            '?', \n            '\"', \n            '<', \n            '>', \n            '|'\n        ];\n        const usedCharacters = invalidCharacters.filter(c => \n        \n            name.includes(c)\n        );\n        if (usedCharacters.length) {\n            return new Error(`${\n                usedCharacters.length === 1\n                 ? `${usedCharacters[0]} is`\n                 : `${usedCharacters.join(', ')} are`}\n                 not allowed`);\n        }\n        const adjacentEntries = this.props.getAdjacentEntries();\n        if (adjacentEntries.some(e => \n        \n            (e.item.path.split('/').pop() ?? '').toLowerCase() === name.toLowerCase()\n        )) {\n            return new Error(`Another entry already exists with same name`);\n        }\n        if (isEntryPoint(name)) {\n            return new Error(`Cannot name a new file as ${name}`);\n        }\n        return null;\n    };\n    _handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        const input = e.target;\n        if (input instanceof HTMLInputElement) {\n            input.select();\n        }\n    };\n    _handleInputBlur = () => {\n        if (!this.state.error) {\n            this._handleNameChange(this.state.name);\n        }\n        this.setState({\n            isRenaming: false, \n            name: '', \n            error: null\n         })\n    };\n    _handleInputKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        switch (e.keyCode) {\n            case KeyMap.Enter: {\n                this._handleToggleRename();\n                break;\n            }\n            case KeyMap.Escape: {\n                this._handleInputBlur();\n                break;\n            }\n        }\n    };\n    _handleCreateFile = () => \n        this.props.onCreateFile(this.props.entry.item.path);\n    _handleCreateFolder = () => \n        this.props.onCreateFolder(this.props.entry.item.path);\n    _handleCopy = () => \n        this.props.onCopy(this.props.entry.item.path);\n    _handlePaste = () => {\n        const {\n            entry, \n            clipboard, \n            onPaste, \n            onClearClipboard\n         } = this.props;\n        clipboard.forEach(e => \n        \n            onPaste(entry.item.path, e)\n        )\n        onClearClipboard();\n    };\n    _handleDuplicate = () => {\n        const {\n            entry, \n            onPaste\n         } = this.props;\n        const path = entry.item.path.includes('/') ? entry.item.type === 'folder' ? getParentPath(entry.item.path) : entry.item.path : undefined;\n        onPaste(path, entry);\n    };\n    _handleToggleTSExt = () => {\n        const filepath = this.props.entry.item.path;\n        this.props.onRename(filepath, toggleTSExt(filepath));\n    };\n    _getActions = ():  (Action | undefined)[] => \n        [\n            {\n                label: 'New file', \n                handler: this._handleCreateFile\n             }, \n            {\n                label: 'New folder', \n                handler: this._handleCreateFolder\n             }, \n            this.props.entry.item.type === 'folder' ? {\n                    label: this.props.entry.item.type === 'folder' && this.props.entry.state.isExpanded ? 'Collapse' : 'Expand', \n                    handler: this._handleToggleExpand, \n                    combo: [\n                        KeyMap.Enter\n                    ]\n                 } : undefined, \n            this.props.clipboard.length ? {\n                    label: 'Paste', \n                    handler: this._handlePaste, \n                    combo: [\n                        KeyMap.Meta, \n                        KeyMap.V\n                    ]\n                 } : !this.props.entry.item.virtual ? {\n                        label: 'Copy', \n                        handler: this._handleCopy, \n                        combo: [\n                            KeyMap.Meta, \n                            KeyMap.C\n                        ]\n                     } : undefined, \n            !this.props.entry.item.virtual ? {\n                    label: 'Duplicate', \n                    handler: this._handleDuplicate, \n                    combo: [\n                        KeyMap.Meta, \n                        KeyMap.D\n                    ]\n                 } : undefined, \n            isEntryPoint(this.props.entry.item.path) ? {\n                    label: `Rename to ${toggleTSExt(this.props.entry.item.path)}`, \n                    handler: this._handleToggleTSExt\n                 } : undefined, \n            ...((!isEntryPoint(this.props.entry.item.path) && !this.props.entry.item.virtual ? [\n                        {\n                            label: 'Rename', \n                            handler: this._handleToggleRename, \n                            combo: [\n                                KeyMap.F2\n                            ]\n                         }, \n                        {\n                            label: 'Delete', \n                            handler: this._handleDelete, \n                            combo: [\n                                KeyMap.Delete\n                            ]\n                         }\n                    ] : []))\n            \n        ];\n    _renderItem = () => {\n        const {\n            entry\n         } = this.props;\n        const {\n            isRenaming, \n            name\n         } = this.state;\n        const displayName = isRenaming ? '\\u00A0' : entry.item.path.split('/').pop();\n        return  (\n            <div\n            >\n                {\n                    this.state.error ?  (\n                        <div\n                         className={css(styles.error)}>\n                            {this.state.error.message}\n                        </div>\n                        )\n                     : null\n                }\n                <FileListEntryIcon\n                 entry={entry} />\n                <span\n                 className={css(styles.label, isTest(entry.item.path) ? styles.labelTest : undefined, entry.state.isError ? styles.labelError : undefined)}>\n                    {displayName}\n                </span>\n                {\n                    isRenaming ?  (\n                        <input \n                            autoFocus\n                            type=\"text\"\n                            value={name}\n                            onChange={this._handleInputChange}\n                            onFocus={this._handleInputFocus}\n                            onBlur={this._handleInputBlur}\n                            onKeyUp={this._handleInputKeyUp}\n                            className={css(styles.input)}\n                         />\n                        )\n                     : null\n                }\n            </div>\n            )\n        ;\n    };\n    _renderTree = () => {\n        const {\n            entry, \n            rest, \n            clipboard, \n            readOnly, \n            onCreateFile, \n            onCreateFolder, \n            onOpen, \n            onSelect, \n            onFocus, \n            onPaste, \n            onRename, \n            onExpand, \n            onDelete, \n            onCopy, \n            onClearClipboard, \n            theme\n         } = this.props;\n        return entry.item.type === 'folder' && rest.length && entry.state.isExpanded ?  (\n                <div\n                 className={css(styles.child)}>\n                    <FileListChildren \n                        parent={entry.item.path}\n                        entries={rest}\n                        clipboard={clipboard}\n                        readOnly={readOnly}\n                        onCreateFile={onCreateFile}\n                        onCreateFolder={onCreateFolder}\n                        onOpen={onOpen}\n                        onSelect={onSelect}\n                        onFocus={onFocus}\n                        onCopy={onCopy}\n                        onPaste={onPaste}\n                        onRename={onRename}\n                        onExpand={onExpand}\n                        onDelete={onDelete}\n                        onClearClipboard={onClearClipboard}\n                        theme={theme}\n                     />\n                </div>\n                )\n             : null;\n    };\n    _renderMenuIcon = () => \n         (\n        <svg\n         className={css(styles.icon)} viewBox=\"0 0 16 16\">\n            <circle\n             cy=\"3\" cx=\"8\" r=\"1.5\" />\n            <circle\n             cy=\"8\" cx=\"8\" r=\"1.5\" />\n            <circle\n             cy=\"13\" cx=\"8\" r=\"1.5\" />\n        </svg>\n        )\n    ;\n    render() {\n        \n        // Disable drag n drop for the entry file and virtual files\n        \n        // Also disable for files being created because they will have a nested input\n        \n        // Otherwise it'll be impossible to move the cursor in the input by dragging\n        const {\n            entry, \n            rest, \n            onOpen, \n            onFocus, \n            onRename, \n            onExpand, \n            readOnly, \n            theme\n         } = this.props;\n        \n        // Disable drag n drop for the entry file and virtual files\n        \n        // Also disable for files being created because they will have a nested input\n        \n        // Otherwise it'll be impossible to move the cursor in the input by dragging\n        const draggable = !((isEntryPoint(this.props.entry.item.path) || this.props.entry.item.virtual) ?? this.props.entry.state.isCreating);\n        return  (\n            <FileListEntryBase \n                entry={entry}\n                rest={rest}\n                onOpen={onOpen}\n                onFocus={onFocus}\n                onRename={onRename}\n                onExpand={onExpand}\n                renderItem={this._renderItem}\n                renderTree={this._renderTree}\n                renderMenuIcon={this._renderMenuIcon}\n                actions={this._getActions()}\n                draggable={draggable}\n                readOnly={readOnly}\n                theme={theme}\n             />\n            )\n        ;\n    }\n}\n\nexport default FileListEntry;\n\nconst styles = StyleSheet.create({\n    child: {\n        marginLeft: 16\n     }, \n    label: {\n        verticalAlign: -1, \n        margin: '0 6px', \n        userSelect: 'none'\n     }, \n    labelError: {\n        color: c('error')\n     }, \n    labelTest: {\n        color: c('soft')\n     }, \n    input: {\n        position: 'absolute', \n        top: 0, \n        left: 35, \n        height: 28, \n        margin: 1, \n        border: `1px solid ${c('selected')}`, \n        borderRadius: 3, \n        backgroundColor: c('content'), \n        outline: 0, \n        paddingLeft: 2\n     }, \n    error: {\n        backgroundColor: c('error'), \n        color: c('error-text'), \n        padding: '4px 8px', \n        position: 'fixed', \n        marginTop: -32, \n        marginLeft: 20, \n        borderRadius: 3\n     }, \n    icon: {\n        height: 16, \n        width: 16, \n        opacity: 0.7, \n        fill: 'currentColor'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntryBase.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport ContextMenu, {Action} from '../widgets/ContextMenu';\nimport {isKeyCombo} from '../widgets/KeybindingsManager';\nimport FileListEntryDropTarget from './FileListEntryDropTarget';\nimport {FileSystemEntry} from '../../features/file';\ntype Props = { \n    entry: FileSystemEntry;\n    rest: FileSystemEntry[];\n    onOpen: (path: string) => void;\n    onFocus: (path: string) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    onExpand?: (path: string, expand?: boolean) => void;\n    renderMenuIcon: () => React.ReactNode;\n    renderItem: () => React.ReactNode;\n    renderTree?: () => React.ReactNode;\n    actions: (Action | undefined)[];\n    draggable?: boolean;\n    readOnly: boolean;\n    theme: string | undefined;\n};\ntype State = { \n    menu: { \n        pageX: number;\n        pageY: number;\n    } | null;\n    isHovered: boolean;\n};\nexport let lastDraggedEntry: FileSystemEntry | null;\nexport default class FileListEntry extends React.Component<Props, State> {\n        static defaultProps = {\n            draggable: true\n        }\n        ;\n        state = {\n            menu: null, \n            isHovered: false\n        }\n        ;\n        componentDidMount() {\n            document.addEventListener('click', this._handleDocumentClick);\n            document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n        }\n        componentWillUnmount() {\n            document.removeEventListener('click', this._handleDocumentClick);\n            document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n        }\n        _handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n            if (((event.target as HTMLDivElement).tagName) === 'INPUT') {\n                return ;\n            }\n            this.props.onOpen(this.props.entry.item.path);\n        };\n        _handleMouseEnter = () => \n            this.setState({\n                isHovered: true\n             });\n        _handleMouseLeave = () => \n            this.setState({\n                isHovered: false\n             });\n        _handleMouseDown = () => \n            this._click = true;\n        _handleFocus = () => {\n            if (this._click) {\n                \n                // The focus was triggered by a click event\n                \n                // Ignore it to avoid double handling\n                this._click = false;\n                return ;\n            }\n            this.props.onFocus(this.props.entry.item.path);\n        };\n        _handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (((event.target as HTMLDivElement).tagName) === 'INPUT') {\n                return ;\n            }\n            const bindings = this.props.actions.filter(action => \n            \n                action?.combo ? isKeyCombo(event as any, action.combo) : false\n            );\n            if (bindings.length) {\n                event.preventDefault();\n                bindings.forEach(binding => \n                \n                    binding?.handler?.()\n                )\n            }\n        };\n        _hideContextMenu = () => \n            this.setState({\n                menu: null\n             });\n        _showContextMenu = (e: MouseEvent) => \n            this.setState({\n                menu: {\n                    pageX: e.pageX, \n                    pageY: e.pageY\n                 }\n             });\n        _handleDocumentClick = (e: MouseEvent) => {\n            if (this.state.menu) {\n                if (this._menu.current && e.target !== this._menu.current && !this._menu.current.contains(e.target as HTMLElement)) {\n                    this._hideContextMenu();\n                }\n            }\n            else {\n                if (this._more.current && (e.target === this._more.current || this._more.current.contains(e.target as Node))) {\n                    if (this.state.menu) {\n                        this._hideContextMenu();\n                    }\n                    else {\n                        this._showContextMenu(e);\n                    }\n                }\n            }\n        };\n        _handleDocumentContextMenu = (e: MouseEvent) => {\n            if (e.target === this._item.current || this._item.current?.contains?.(e.target as Node)) {\n                e.preventDefault();\n                this._showContextMenu(e);\n            }\n            else {\n                if (this.state.menu) {\n                    this._hideContextMenu();\n                }\n            }\n        };\n        _handleDragStart = (e: React.DragEvent<HTMLDivElement>) => {\n            e.dataTransfer.effectAllowed = 'move';\n            e.dataTransfer.setData('application/json', JSON.stringify(this.props.entry));\n            lastDraggedEntry = this.props.entry;\n        };\n        _handleDragEnd = () => \n            lastDraggedEntry = null;\n        _click: boolean = false;\n        _item = React.createRef<HTMLDivElement>();\n        _more = React.createRef<HTMLButtonElement>();\n        _menu = React.createRef<HTMLUListElement>();\n        render() {\n            const {\n                entry, \n                rest, \n                draggable, \n                readOnly, \n                onRename, \n                onExpand, \n                theme, \n                actions\n             } = this.props;\n            const {\n                menu, \n                isHovered\n             } = this.state;\n            return  (\n                <FileListEntryDropTarget \n                    entry={entry}\n                    rest={rest}\n                    onRename={onRename}\n                    onExpand={onExpand}\n                >\n                    <div \n                        ref={this._item}\n                        draggable={draggable}\n                        onDragStart={this._handleDragStart}\n                        onDragEnd={this._handleDragEnd}\n                        tabIndex={0}\n                        className={css(styles.entry)}\n                        onClick={this._handleClick}\n                        onMouseEnter={this._handleMouseEnter}\n                        onMouseLeave={this._handleMouseLeave}\n                        onMouseDown={this._handleMouseDown}\n                        onFocus={this._handleFocus}\n                        onKeyDown={this._handleKeyDown}\n                    >\n                        {this.props.renderItem()}\n                    </div>\n                    <div\n                     className={css(styles.highlight, theme === 'dark' ? styles.highlightDark : styles.highlightLight, entry.state.isSelected ? styles.highlightActive : null)} />\n                    {\n                        !readOnly\n                         &&  (\n                            <ContextMenu \n                                ref={this._menu}\n                                visible={Boolean(menu)}\n                                position={menu}\n                                actions={actions}\n                                onHide={this._hideContextMenu}\n                             />\n                            )\n                        \n                    }\n                    <button\n                     ref={this._more} tabIndex={-1} className={css(styles.more, isHovered || menu ? styles.moreVisible : styles.moreInvisible)}>\n                        {this.props.renderMenuIcon()}\n                    </button>\n                    {this.props.renderTree?.()}\n                </FileListEntryDropTarget>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    entry: {\n        position: 'relative', \n        display: 'inline-block', \n        outline: 0, \n        padding: '1px 16px', \n        width: '100%', \n        cursor: 'pointer', \n        zIndex: 1, \n        whiteSpace: 'nowrap'\n     }, \n    highlight: {\n        content: '\"\"', \n        display: 'inline-block', \n        height: 30, \n        position: 'absolute', \n        left: 0, \n        right: 0, \n        opacity: 0, \n        zIndex: 1, \n        pointerEvents: 'none'\n     }, \n    highlightLight: {\n        backgroundColor: 'rgba(0, 0, 0, .04)'\n     }, \n    highlightDark: {\n        backgroundColor: 'rgba(255, 255, 255, .04)'\n     }, \n    highlightActive: {\n        opacity: 1\n     }, \n    more: {\n        position: 'absolute', \n        left: -8, \n        border: 0, \n        outline: 0, \n        background: 'none', \n        height: 30, \n        zIndex: 2, \n        padding: '7px 12px', \n        textAlign: 'right', \n        ':hover': {\n            opacity: 1\n         }\n     }, \n    moreInvisible: {\n        opacity: 0\n     }, \n    moreVisible: {\n        opacity: 1\n     }, \n    icon: {\n        fill: 'currentColor', \n        height: 16, \n        width: 16\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntryDropTarget.tsx.ittf\n*/\nimport * as React from 'react';\nimport {FileSystemEntry, getUniquePath, dragEventIncludes} from '../../features/file';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {lastDraggedEntry} from './FileListEntryBase';\ntype Props = { \n    entry?: FileSystemEntry;\n    rest: FileSystemEntry[];\n    onExpand?: (path: string, expand?: boolean) => void;\n    onRename: (oldPath: string, newPath: string) => void;\n    className?: string;\n    theme: ThemeName;\n    children?: any;\n};\n\nclass FileListEntryDropTarget extends React.PureComponent<Props> {\n    componentDidMount() {\n        const container = this._container.current;\n        if (container) {\n            // We don't use react's event system since we need to stop the events from bubbling up\n            container.addEventListener('dragover', this._handleDragOver);\n            container.addEventListener('dragleave', this._handleDragLeave);\n            container.addEventListener('dragend', this._handleDragLeave);\n            container.addEventListener('drop', this._handleDrop);\n        }\n    }\n    componentWillUnmount() {\n        const container = this._container.current;\n        if (container) {\n            container.removeEventListener('dragover', this._handleDragOver);\n            container.removeEventListener('dragleave', this._handleDragLeave);\n            container.removeEventListener('dragend', this._handleDragLeave);\n            container.removeEventListener('drop', this._handleDrop);\n        }\n    }\n    _getParentPath = (path: string) => \n        (path.includes('/') ? path.replace(/\\/[^/]+$/, '') : null);\n    _isDirectChild = (path: string) => {\n        if (this.props.entry && this.props.entry.item.path === path) {\n            return true;\n        }\n        const parent = this._getParentPath(path);\n        if (this.props.entry && parent) {\n            return this.props.entry.item.path === parent;\n        }\n        return this.props.entry == null && parent == null;\n    };\n    _handleDragLeave = (e: any) => {\n        e.currentTarget.style.backgroundColor = null;\n        clearTimeout(this._dragTimer);\n        this._dragTimer = null;\n    };\n    _handleDragOver = (e: any) => {\n        const entry = lastDraggedEntry;\n        if (!dragEventIncludes(e, 'application/json') || (this.props.entry && this.props.entry.item.type !== 'folder') || !entry) {\n            return ;\n        }\n        if (entry.item.type !== 'file' && entry.item.type !== 'folder') {\n            return ;\n        }\n        e.stopPropagation();\n        if (this._isDirectChild(entry.item.path)) {\n            return ;\n        }\n        e.preventDefault();\n        e.currentTarget.style.backgroundColor = this.props.theme === 'dark' ? 'rgba(255, 255, 255, .1)' : 'rgba(0, 0, 0, .1)';\n        if (this._dragTimer) {\n            return ;\n        }\n        this._dragTimer = setTimeout(() => {\n        \n            if (this.props.entry && !this.props.entry.state.isExpanded && this.props.onExpand) {\n                this.props.onExpand(this.props.entry.item.path);\n            }\n        }\n        , 500)\n        ;\n    };\n    _dragTimer: any;\n    _handleDrop = (e: any) => {\n        e.currentTarget.style.backgroundColor = null;\n        if (!dragEventIncludes(e, 'application/json') || (this.props.entry && this.props.entry.item.type !== 'folder')) {\n            return ;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        try {\n            const data = e.dataTransfer.getData('application/json');\n            const entry = JSON.parse(data);\n            if ((entry.item.type !== 'file' && entry.item.type !== 'folder') || this._isDirectChild(entry.item.path)) {\n                return ;\n            }\n            const name = entry.item.path.split('/').pop();\n            this.props.onRename(entry.item.path, getUniquePath(this.props.rest.map(e => \n            \n                e.item.path\n            ), this.props.entry ? this.props.entry.item.path + '/' + name : name))\n        } \n        catch (e) {\n        } \n    };\n    _container = React.createRef<HTMLDivElement>();\n    render() {\n        \n        // eslint-disable-next-line no-unused-vars\n        const {\n            entry, \n            rest, \n            onExpand, \n            onRename, \n            theme, \n            ...restProps\n         } = this.props;\n        return  (\n            <div\n             {...restProps} ref={this._container} />\n            )\n        ;\n    }\n}\nexport default withThemeName(FileListEntryDropTarget);\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListEntryIcon.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {FileSystemEntry, isEntryPoint, isPackageJson, isImage, isTest} from '../../features/file';\nimport {c} from '../ThemeProvider';\ntype Props = { \n    entry: FileSystemEntry;\n};\nexport default function FileListEntryIcon({\n        entry\n     }: Props) {\n    \n        let icon;\n        if (entry.state.isLoading) {\n            return  (\n                <div\n                 className={css(styles.spinner)} />\n                )\n            ;\n        }\n        else {\n            if (isEntryPoint(entry.item.path)) {\n                icon =  (\n                <g\n                >\n                    <path\n                     d=\"M7.46487122,14 C7.80521143,13.4116533 8,12.7285743 8,12 C8,9.790861 6.209139,8 4,8 C3.65470043,8 3.31961992,8.043753 3,8.12601749 L3,2 L13,2 L13,14 L7.46487122,14 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                    <circle\n                     cx=\"4\" cy=\"12\" r=\"3\" />\n                </g>\n                )\n                ;\n            }\n            else {\n                if (isPackageJson(entry.item.path)) {\n                    icon =  (\n                    <path\n                     d=\"M2,5.09257608 L7.47329684,8.31213064 L7.47329684,14.7092088 L2,11.5325867 L2,5.09257608 Z M2.49245524,4.22207437 L7.97432798,1 L13.506361,4.2238509 L7.92838937,7.41965108 L2.49245524,4.22207437 Z M14,5.09352708 L14,11.5325867 L8.47329684,14.7128733 L8.47329684,8.25995389 L14,5.09352708 Z\" />\n                    )\n                    ;\n                }\n                else {\n                    if (entry.item.type === 'folder') {\n                        if (entry.state.isExpanded) {\n                            icon =  (\n                            <g\n                            >\n                                <path\n                                 d=\"M7.5,5 L2,5 L2,13 L7.75,13 L14,13 L14,4 L15,4 L15,14 L1,14 L1,4 L6.5,4 L5.5,5 L7.5,5 L7.5,4.5 L7.5,5 Z M14,4 L14,3 L7.5,3 L7.5,3.5 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L14,4 Z M6.5,4 L5,4 L7,2 L7,3.5 L6.5,4 Z\" />\n                                <polygon\n                                 points=\"0 7 13 7 14 14 1 14\" />\n                            </g>\n                            )\n                            ;\n                        }\n                        else {\n                            icon =  (\n                            <path\n                             d=\"M7.25,4 L7.5,4 L7.5,3 L7,3.5 L7,2 L15,2 L15,4 L7.25,4 Z M6.75,4 L5,4 L7,2 L7,3.5 L6.5,4 L6.75,4 Z M1,4 L15,4 L15,14 L1,14 L1,4 Z M7.5,3 L7.5,4 L14,4 L14,3 L7.5,3 Z\" />\n                            )\n                            ;\n                        }\n                    }\n                    else {\n                        if (isImage(entry.item.path)) {\n                            icon =  (\n                            <g\n                            >\n                                <circle\n                                 cx=\"5\" cy=\"5\" r=\"1\" />\n                                <polygon\n                                 points=\"5.71428571 8.41176471 8 11.2352941 10.8571429 7 14 13 2 13\" />\n                                <path\n                                 d=\"M3,3 L3,13 L13,13 L13,3 L3,3 Z M3,2 L13,2 C13.5522847,2 14,2.44771525 14,3 L14,13 C14,13.5522847 13.5522847,14 13,14 L3,14 C2.44771525,14 2,13.5522847 2,13 L2,3 C2,2.44771525 2.44771525,2 3,2 Z\" />\n                            </g>\n                            )\n                            ;\n                        }\n                        else {\n                            icon =  (\n                            <path\n                             d=\"M3,2 L13,2 L13,14 L3,14 L3,2 Z M9,2 L13,6 L13,2 L9,2 Z M9,6 L9,2 L8,2 L8,7 L13,7 L13,6 L9,6 Z\" />\n                            )\n                            ;\n                        }\n                    }\n                }\n            }\n        }\n        return  (\n            <svg\n             className={css(styles.icon, isTest(entry.item.path) ? styles.test : undefined, entry.state.isError ? styles.error : undefined)} viewBox=\"0 0 16 16\">\n                {icon}\n            </svg>\n            )\n        ;\n    }\nconst spin = {\n    from: {\n        transform: 'rotate(0deg)'\n     }, \n    to: {\n        transform: 'rotate(360deg)'\n     }\n };\nconst styles = StyleSheet.create({\n    icon: {\n        height: 16, \n        width: 16, \n        fill: 'currentColor', \n        verticalAlign: 'middle', \n        opacity: 0.7\n     }, \n    error: {\n        fill: c('error')\n     }, \n    test: {\n        color: c('soft')\n     }, \n    spinner: {\n        display: 'inline-block', \n        verticalAlign: 'middle', \n        borderStyle: 'solid', \n        borderTopColor: 'currentColor', \n        borderLeftColor: 'currentColor', \n        borderBottomColor: 'currentColor', \n        borderRightColor: 'rgba(0, 0, 0, .16)', \n        borderWidth: 1, \n        height: 12, \n        width: 12, \n        borderRadius: '50%', \n        margin: '2px 2px', \n        animationDuration: '1s', \n        animationName: [\n            spin\n        ], \n        animationIterationCount: 'infinite', \n        animationTimingFunction: 'linear'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListOpenEntry.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {withThemeName, ThemeName} from '../../features/preferences';\nimport {c} from '../ThemeProvider';\nimport ContextMenu from '../widgets/ContextMenu';\nimport FileListEntryIcon from './FileListEntryIcon';\nimport {TextFileEntry, AssetFileEntry} from '../../features/file';\ntype Props = { \n    entry: TextFileEntry | AssetFileEntry;\n    onOpen: () => void;\n    onClose: () => void;\n    onCloseOthers: () => void;\n    onCloseAll: () => void;\n    theme: ThemeName;\n};\ntype State = { \n    isHovered: boolean;\n    menu: { \n        pageX: number;\n        pageY: number;\n    } | undefined | null;\n};\nclass FileListOpenEntry extends React.PureComponent<Props, State> {\n    state: State = {\n        isHovered: false, \n        menu: null\n    }\n    ;\n    componentDidMount() {\n        document.addEventListener('click', this._handleDocumentClick);\n        document.addEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click', this._handleDocumentClick);\n        document.removeEventListener('contextmenu', this._handleDocumentContextMenu);\n    }\n    _hideContextMenu = () => \n        this.setState({\n            menu: null\n         });\n    _showContextMenu = (e: MouseEvent) => \n        this.setState({\n            menu: {\n                pageX: e.pageX, \n                pageY: e.pageY\n             }\n         });\n    _handleDocumentClick = (e: MouseEvent) => {\n        if (this.state.menu) {\n            if (this._menu.current && e.target !== this._menu.current && !this._menu.current.contains(e.target as Node)) {\n                this._hideContextMenu();\n            }\n        }\n    };\n    _handleDocumentContextMenu = (e: MouseEvent) => {\n        if (e.target === this._item.current || this._item.current?.contains?.(e.target as Node)) {\n            e.preventDefault();\n            this._showContextMenu(e);\n        }\n        else {\n            if (this.state.menu) {\n                this._hideContextMenu();\n            }\n        }\n    };\n    _handleMouseEnter = () => \n        this.setState({\n            isHovered: true\n         });\n    _handleMouseLeave = () => \n        this.setState({\n            isHovered: false\n         });\n    _menu = React.createRef<HTMLUListElement>();\n    _item = React.createRef<HTMLLIElement>();\n    render() {\n        const {\n            entry, \n            theme\n         } = this.props;\n        const displayName = entry.item.path.split('/').pop();\n        return  (\n            <li \n                ref={this._item}\n                tabIndex={-1}\n                className={css(styles.item, entry.state.isFocused\n                     && ((theme === 'dark' ? styles.focusedDark : styles.focusedLight)))}\n                onMouseEnter={this._handleMouseEnter}\n                onMouseLeave={this._handleMouseLeave}\n            >\n                <button\n                 onClick={this.props.onClose} className={css(styles.close, this.state.isHovered ? styles.closeFocused : styles.closeBlurred)}>\n                    ×\n                </button>\n                <div\n                 onClick={this.props.onOpen}>\n                    <FileListEntryIcon\n                     entry={entry} />\n                    <span\n                     className={css(styles.label, entry.state.isError ? styles.labelError : undefined)}>\n                        {displayName}\n                    </span>\n                </div>\n                <ContextMenu \n                    ref={this._menu}\n                    visible={Boolean(this.state.menu)}\n                    position={this.state.menu}\n                    actions={[\n                            {\n                                label: 'Close', \n                                handler: this.props.onClose\n                             }, \n                            {\n                                label: 'Close Others', \n                                handler: this.props.onCloseOthers\n                             }, \n                            {\n                                label: 'Close All', \n                                handler: this.props.onCloseAll\n                             }\n                        ]}\n                    onHide={this._hideContextMenu}\n                 />\n            </li>\n            )\n        ;\n    }\n}\nexport default withThemeName(FileListOpenEntry);\nconst styles = StyleSheet.create({\n    item: {\n        paddingLeft: 24, \n        cursor: 'pointer', \n        outline: 0, \n        whiteSpace: 'nowrap'\n     }, \n    label: {\n        display: 'inline-block', \n        verticalAlign: -1, \n        margin: \"0 6px\", \n        userSelect: 'none', \n        whiteSpace: 'nowrap'\n     }, \n    labelError: {\n        color: c('error')\n     }, \n    focusedLight: {\n        backgroundColor: 'rgba(0, 0, 0, .04)'\n     }, \n    focusedDark: {\n        backgroundColor: 'rgba(255, 255, 255, .04)'\n     }, \n    close: {\n        padding: '7px 8px', \n        fontSize: '18px', \n        border: 'none', \n        appearance: 'none', \n        position: 'absolute', \n        left: 0, \n        margin: '-3px 0 0 0', \n        background: 'none', \n        outline: 0\n     }, \n    closeFocused: {\n        opacity: 1\n     }, \n    closeBlurred: {\n        opacity: 0\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListPane.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\ntype Props = { \n    title: string;\n    expanded: boolean;\n    onClick: (event: React.MouseEvent<HTMLDivElement>) => void;\n    buttons?: React.ReactNode[];\n    children?: React.ReactNode;\n    className?: string;\n};\nexport default function FileListPane({\n        title, \n        expanded, \n        buttons, \n        children, \n        onClick, \n        className\n     }: Props) {\n    \n        return  (\n            <div\n             className={`${className ?? ''} ${css(styles.container)}`}>\n                <div\n                 className={css(styles.header)}>\n                    <div\n                     className={css(styles.left)} onClick={onClick} data-test-id={`file-list-pane-${title.toLowerCase().replace(/[^a-z]/g, '-')}`}>\n                        <svg \n                            className={css(styles.collapse, expanded ? styles.collapseExpanded : styles.collapseCollapsed)}\n                            width=\"12px\"\n                            height=\"12px\"\n                            viewBox=\"0 0 12 12\"\n                        >\n                            <g \n                                stroke=\"none\"\n                                strokeWidth=\"2\"\n                                fill=\"none\"\n                                fillRule=\"evenodd\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                            >\n                                <polyline\n                                 stroke=\"currentColor\" transform=\"translate(6.000000, 6.000000) scale(-1, 1) rotate(180.000000) translate(-6.000000, -6.000000) \" points=\"2 4 6 8 10 4\" />\n                            </g>\n                        </svg>\n                        <h4\n                         className={css(styles.label)}>\n                            {title}\n                        </h4>\n                    </div>\n                    <div\n                     className={css(styles.right)}>\n                        {buttons}\n                    </div>\n                </div>\n                {\n                    expanded ? children : null\n                }\n            </div>\n            )\n        ;\n    }\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        flexDirection: 'column'\n     }, \n    header: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center', \n        padding: '0 4px'\n     }, \n    label: {\n        fontSize: '1em', \n        fontWeight: 500, \n        lineHeight: 1, \n        margin: 0\n     }, \n    collapse: {\n        margin: '1px 6px 1px 2px', \n        opacity: 0.7\n     }, \n    collapseCollapsed: {\n        transform: 'rotate(180deg)'\n     }, \n    collapseExpanded: {\n        transform: 'rotate(0deg)'\n     }, \n    left: {\n        flex: 1, \n        display: 'flex', \n        flexDirection: 'row', \n        padding: '2px 4px', \n        cursor: 'pointer'\n     }, \n    right: {\n        display: 'flex', \n        flexDirection: 'row', \n        alignItems: 'center'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\FileListPaneButton.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\ntype Props = { \n    innerRef?: React.Ref<HTMLButtonElement>;\n    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    children?: React.ReactNode;\n};\nclass FileListPaneButton extends React.PureComponent<Props> {\n    render() {\n        const {\n            innerRef, \n            ...rest\n         } = this.props;\n        return  (\n            <button\n             {...rest} className={css(styles.button)} ref={innerRef}>\n                <svg\n                 className={css(styles.icon)} viewBox=\"0 0 16 16\">\n                    {this.props.children}\n                </svg>\n            </button>\n            )\n        ;\n    }\n}\nexport default React.forwardRef((props: Props, ref: React.Ref<HTMLButtonElement>) => \n    \n         (\n        <FileListPaneButton\n         {...props} innerRef={ref} />\n        )\n    \n    )\nconst styles = StyleSheet.create({\n    button: {\n        appearance: 'none', \n        background: 'transparent', \n        border: 0, \n        margin: 0, \n        outline: 0\n     }, \n    icon: {\n        fill: 'currentColor', \n        height: 16, \n        width: 16, \n        verticalAlign: -3\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\closeEntry.tsx.ittf\n*/\nimport {FileSystemEntry} from '../../features/file';\nimport updateEntry from './updateEntry';\nexport default function closeEntry(entry: FileSystemEntry) {\n    \n        if (entry.item.type === 'file') {\n            if (entry.state.isSelected || entry.state.isFocused || entry.state.isOpen) {\n                \n                // Unselect and unfocus the file\n                return updateEntry(entry, {\n                        state: {\n                            isOpen: false, \n                            isSelected: false, \n                            isFocused: false\n                         }\n                     });\n            }\n        }\n        else {\n            if (entry.state.isSelected) {\n                \n                // Unselect the folder\n                return updateEntry(entry, {\n                        state: {\n                            isSelected: false\n                         }\n                     });\n            }\n        }\n        return entry;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\createEntryAtPath.tsx.ittf\n*/\nimport {FileSystemEntry, getUniquePath, getParentPath} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function createEntryAtPath(entries: FileSystemEntry[], path: string | undefined, e: FileSystemEntry, suffix?: string):  FileSystemEntry {\n    \n        \n        // Check if an entry exists for the path we want to create the entry at\n        \n        // If the entry is a folder, we create the new entry inside\n        \n        // Otherwise we create it inside the parent\n        const entry = path ? entries.find(e => \n            \n                e.item.path === path\n            ) : null;\n        \n        // If the entry is a folder, we create the new entry inside\n        \n        // Otherwise we create it inside the parent\n        \n        // @ts-ignore\n        const parent = entry ? entry.item.type === 'folder' ? entry.item.path : getParentPath(entry.item.path) : null; \n        \n        // @ts-ignore\n        const name: string = e.item.path.split('/').pop(); \n        \n        // @ts-ignore\n        const item = updateEntry(e, { item: { path: getUniquePath(entries.map(e =>  \n                    e.item.path\n                ), parent ? `${parent}/${name}` : name, suffix)\n             }\n         });\n        \n        \n        // @ts-ignore\n        item.state = { isCreating: true  }; \n        return item;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\createNewEntry.tsx.ittf\n*/\nimport {FileSystemEntry, isInsideFolder} from '../../../features/file';\nimport createEntryAtPath from './createEntryAtPath';\nimport updateEntry from './updateEntry';\nexport default function createNewEntry(entries: FileSystemEntry[], type: 'file' | 'folder', at?: string | undefined) {\n    \n        const e: FileSystemEntry = type === 'file' ? {\n                item: {\n                    path: 'Untitled file.js', \n                    type: 'file', \n                    content: ''\n                 }, \n                state: {\n                    isCreating: true\n                 }\n             } : {\n                item: {\n                    path: 'Untitled folder', \n                    type: 'folder'\n                 }, \n                state: {\n                    isCreating: true\n                 }\n             };\n        let path = at;\n        if (typeof path !== 'string') {\n            \n            // Get the current folder if no path is specified\n            const entry = entries.find(e => \n            \n                e.state.isSelected === true\n            );\n            path = entry ? entry.item.path : undefined;\n        }\n        const entry = createEntryAtPath(entries, path, e);\n        const next = entries.map((e) => {\n        \n            if (e.item.type === 'folder' && isInsideFolder(entry.item.path, e.item.path) && !e.state.isExpanded) {\n                return updateEntry(e, {\n                        state: {\n                            isExpanded: true\n                         }\n                     });\n            }\n            return e;\n        }\n        );\n        return [\n                ...next, \n                entry\n            ];\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\expandEntry.tsx.ittf\n*/\nimport {FileSystemEntry} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function expandEntry(entries: FileSystemEntry[], path: string, expand: boolean = true):  FileSystemEntry[] {\n    \n        return entries.map((entry) => {\n            \n                if (entry.item.path === path && entry.item.type === 'folder') {\n                    return updateEntry(entry, {\n                            state: {\n                                isExpanded: expand\n                             }\n                         });\n                }\n                return entry;\n            }\n            );\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\openEntry.tsx.ittf\n*/\nimport {FileSystemEntry} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function openEntry(entries: FileSystemEntry[], path: string, focus: boolean = false):  FileSystemEntry[] {\n    \n        const entry = entries.find(e => \n        \n            e.item.path === path\n        );\n        const isFolder = entry ? entry.item.type === 'folder' : false;\n        return entries.map((e) => {\n            \n                if (e.item.path === path) {\n                    if (e.item.type === 'file') {\n                        if (e.state.isSelected && e.state.isFocused && e.state.isOpen) {\n                            return e;\n                        }\n                        \n                        // Select, open and focus the file\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: true, \n                                    isFocused: true, \n                                    isOpen: true\n                                 }\n                             });\n                    }\n                    else {\n                        \n                        // Select and toggle the expand for the directory\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: true, \n                                    isExpanded: focus ? e.state.isExpanded : !e.state.isExpanded\n                                 }\n                             });\n                    }\n                }\n                if (e.item.type === 'file') {\n                    if (e.state.isSelected || e.state.isFocused) {\n                        \n                        // Unselect and unfocus the file\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: false, \n                                    isFocused: isFolder ? e.state.isFocused : false\n                                 }\n                             });\n                    }\n                }\n                else {\n                    if (e.state.isSelected) {\n                        \n                        // Unselect the folder\n                        return updateEntry(e, {\n                                state: {\n                                    isSelected: false\n                                 }\n                             });\n                    }\n                }\n                return e;\n            }\n            );\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\pasteEntry.tsx.ittf\n*/\nimport {FileSystemEntry, isInsideFolder, changeParentPath} from '../../../features/file';\nimport createEntryAtPath from './createEntryAtPath';\nimport updateEntry from './updateEntry';\nexport default function handleEntryPaste(entries: FileSystemEntry[], path: string | undefined, e: FileSystemEntry) {\n    \n        const entry = createEntryAtPath(entries, path, e, '- Copy');\n        if (e.item.type === 'folder') {\n            const children = entries.filter(it => \n            \n                // Get children of the old folder\n                isInsideFolder(it.item.path, e.item.path)\n            ).map(it => \n            \n                // Update the parent folder name to the new one\n                updateEntry(it, {\n                    item: {\n                        path: changeParentPath(it.item.path, e.item.path, entry.item.path)\n                     }\n                 })\n            )\n            ;\n            return [\n                    ...entries, \n                    ...children, \n                    entry\n                ];\n        }\n        else {\n            return [\n                    ...entries, \n                    entry\n                ];\n        }\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\recursivelyCreateParents.tsx.ittf\n*/\nimport {FileSystemEntry, getParentPath} from '../../../features/file';\nexport default function recursivelyCreateParents(entries: FileSystemEntry[], path: string, expand?: boolean):  FileSystemEntry[] {\n    \n        const next: FileSystemEntry[] = [];\n        let parent = getParentPath(path);\n        while (parent) {\n            const parentEntry = entries.find(e => \n            \n                e.item.path === parent\n            );\n            if (parentEntry) {\n                if (parentEntry.item.type !== 'folder') {\n                    throw new Error('File path must be inside a folder');\n                }\n                break;\n            }\n            else {\n                next.push({\n                    item: {\n                        type: 'folder', \n                        path: parent\n                     }, \n                    state: {\n                        isExpanded: !!expand\n                     }\n                 })\n                parent = getParentPath(parent);\n            }\n        }\n        return next;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\renameEntry.tsx.ittf\n*/\nimport {FileSystemEntry, changeParentPath, isInsideFolder} from '../../../features/file';\nimport recursivelyCreateParents from './recursivelyCreateParents';\nimport updateEntry from './updateEntry';\nexport default function renameEntry(entries: FileSystemEntry[], oldPath: string, newPath: string) {\n    \n        const entry = entries.find(e => \n        \n            e.item.path === oldPath\n        );\n        if (!entry) {\n            return entries;\n        }\n        const renamed = updateEntry(entry, {\n            item: {\n                path: newPath\n             }\n         });\n        delete renamed.state.isCreating\n        const next: FileSystemEntry[] = entries.map((e) => {\n        \n            if (e.item.path === entry.item.path) {\n                return renamed;\n            }\n            if (renamed.item.type === 'folder' && isInsideFolder(e.item.path, entry.item.path)) {\n                return updateEntry(e, {\n                        item: {\n                            path: changeParentPath(e.item.path, entry.item.path, renamed.item.path)\n                         }\n                     });\n            }\n            return e;\n        }\n        );\n        const parents = recursivelyCreateParents(next, renamed.item.path, true);\n        return [\n                ...next, \n                ...parents\n            ];\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\selectEntry.tsx.ittf\n*/\nimport {FileSystemEntry} from '../../../features/file';\nimport updateEntry from './updateEntry';\nexport default function selectEntry(entries: FileSystemEntry[], path: string):  FileSystemEntry[] {\n    \n        return entries.map(e => \n            \n                e.item.path === path ? updateEntry(e, {\n                        state: {\n                            isSelected: !e.state.isSelected\n                         }\n                     }) : e\n            );\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\actions\\updateEntry.tsx.ittf\n*/\nimport {FileSystemEntry} from '../../../features/file';\nexport default function updateEntry<T extends FileSystemEntry>(entry: T, updates: { \n        item?: Partial<T['item']>;\n        state?: Partial<T['state']>;\n    }):  T {\n    \n        return {\n                ...((entry as any))\n                , \n                item: updates.item ? {\n                        ...entry.item, \n                        ...((updates as any).item)\n                        \n                     } : entry.item, \n                state: updates.state ? {\n                        ...entry.state, \n                        ...((updates as any).state)\n                        \n                     } : entry.state\n             };\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\FileList\\utils\\convertFileStructure.tsx.ittf\n*/\nimport {PackiFiles, PackiFile} from '../../../features/packi/index';\nimport {Annotation} from '../../../features/annotations/index';\nimport {isEntryPoint} from '../../../features/file/index';\nimport {FileSystemEntry, TextFileEntry, AssetFileEntry} from '../types';\nconst getFolders = (path: string):  string[] => {\n\n    \n    // TODO: change this to slice and join\n    const pathSegments = path.split('/');\n    if (pathSegments.length === 0) {\n        return [];\n    }\n    const result = [];\n    for (let pathIdx = 0; pathIdx < pathSegments.length - 1; pathIdx++) {\n        result.push(pathSegments.slice(0, pathIdx + 1).join('/'));\n    }\n    return result;\n}\n;\nfunction fileToEntry(path: string, file: PackiFile, annotations: Annotation[], prevEntry?: FileSystemEntry):  any {\n\n    const isLoading = !!annotations.find(({\n        location, \n        severity\n     }) => \n    \n        location?.fileName === path && severity < 0\n    );\n    const isError = !isLoading && !!annotations.find(({\n        location, \n        severity\n     }) => \n    \n        location?.fileName === path && severity >= 3\n    );\n    if (file.type === 'ASSET') {\n        if (prevEntry && prevEntry.item.type === 'file' && prevEntry.item.asset) {\n            return prevEntry.item.uri === file.contents && prevEntry.state.isError === isError && prevEntry.state.isLoading === isLoading ? prevEntry : {\n                        item: {\n                            ...prevEntry.item, \n                            uri: file.contents as string\n                         }, \n                        state: {\n                            ...prevEntry.state, \n                            isError, \n                            isLoading\n                         }\n                     };\n        }\n        else {\n            return {\n                    item: {\n                        path, \n                        type: 'file', \n                        uri: file.contents as string, \n                        asset: true\n                     }, \n                    state: {\n                        isError, \n                        isLoading\n                     }\n                 };\n        }\n    }\n    else {\n        const isEntry = isEntryPoint(path);\n        if (prevEntry && prevEntry.item.type === 'file' && !prevEntry.item.asset) {\n            return prevEntry.item.content === file.contents && prevEntry.state.isError === isError && prevEntry.state.isLoading === isLoading ? prevEntry : {\n                        item: {\n                            ...prevEntry.item, \n                            content: file.contents\n                         }, \n                        state: {\n                            ...prevEntry.state, \n                            isError, \n                            isLoading\n                         }\n                     };\n        }\n        else {\n            return {\n                    item: {\n                        path, \n                        type: 'file', \n                        content: file.contents, \n                        virtual: path === 'package.json'\n                     }, \n                    state: {\n                        isOpen: isEntry, \n                        isSelected: isEntry, \n                        isFocused: isEntry, \n                        isError, \n                        isLoading\n                     }\n                 };\n        }\n    }\n}\nexport function filesToEntries(files: PackiFiles, annotations: Annotation[], prevEntries: FileSystemEntry[]):  FileSystemEntry[] {\n\n    const fileSystem: FileSystemEntry[] = [];\n    \n    // Add entries from files\n    const foldersInFileSystem = new Set();\n    for (const filename of Object.keys(files).sort()) {\n        for (const folder of getFolders(filename)) {\n            if (!foldersInFileSystem.has(folder)) {\n                fileSystem.push((prevEntries.find(entry => \n                \n                    entry.item.path === folder\n                )) ?? ({\n                    item: {\n                        path: folder, \n                        type: 'folder'\n                     }, \n                    state: {\n                        \n                     }\n                 }))\n                foldersInFileSystem.add(folder);\n            }\n        }\n        const file = files[filename];\n        const prevEntry = prevEntries.find(entry => \n        \n            entry.item.path === filename\n        );\n        fileSystem.push(fileToEntry(filename, file, annotations, prevEntry));\n        // Add entries from files\n        // Restore empty folders that cannot be derived from files\n    }\n    // Restore empty folders that cannot be derived from files\n    prevEntries.forEach((entry) => {\n    \n        if (entry.item.type === 'folder' && !foldersInFileSystem.has(entry.item.path)) {\n            fileSystem.push(entry);\n        }\n    }\n    )\n    return fileSystem;\n}\nexport function findFocusedEntry(entries: FileSystemEntry[]):  TextFileEntry | AssetFileEntry | undefined {\n\n    return entries.find(entry => \n            \n                entry.item.type === 'file' && entry.state.isFocused\n            ) as any;\n}\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Packi\\ModalGithubClone.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {Form, withStatus, withValidation} from '../../features/form';\nimport {c} from '../ThemeProvider';\nimport {Button} from '../widgets/Button';\nimport LargeInput from '../widgets/LargeInput';\nimport LargeTextArea from '../widgets/LargeTextArea';\nimport {ModalDialog} from '../widgets/ModalDialog';\ntype Props = { \n    visible: boolean;\n    title: string;\n    action: string;\n    onSubmit: (details: { \n        owner: string;\n        name: string;\n        branch: string;\n    }) => void;\n    onDismiss: () => void;\n    packiProduction: PackiProduction;\n    owner: string;\n    name: string;\n    branch: string;\n    isWorking?: boolean;\n};\ntype State = { \n    owner: string;\n    name: string;\n    branch: string;\n    visible: boolean;\n};\n\n// @ts-ignore\nconst FormButton = withStatus(Button); \n\n// @ts-ignore\nconst ValidatedInput = withValidation(LargeInput); \nexport default class ModalGithubClone extends React.Component<Props, State> {\n        static getDerivedStateFromProps(props: Props, state: State) {\n            if (state.visible !== props.visible) {\n                if (props.visible) {\n                    return {\n                            owner: props.owner || '', \n                            name: props.name ?? '', \n                            branch: props.branch ?? '', \n                            visible: props.visible\n                         };\n                }\n                else {\n                    return {\n                            visible: props.visible\n                         };\n                }\n            }\n            return null;\n        }\n        state = {\n            owner: this.props.owner || '', \n            name: this.props.name ?? '', \n            branch: this.props.branch ?? '', \n            visible: this.props.visible\n        }\n        ;\n        _handleSubmit = () => \n            this.props.onSubmit({\n                owner: this.state.owner, \n                name: this.state.name, \n                branch: this.state.branch\n             });\n        _validateName = (name: string) => \n            name ? /^[a-z_\\-\\.\\/\\d\\s]+$/i.test(name) ? null : new Error('Name can only contain letters, numbers, space, hyphen (-) and underscore (_).') : new Error('Name cannot be empty.');\n        handleChange = (e: React.ChangeEvent<HTMLInputElement>) => \n            this.setState({\n                [e.target.name]: e.target.value\n             });\n        \n        // log 'ModalGithubClone.state', this.state\n        render() {\n            const {\n                visible, \n                title, \n                onDismiss, \n                isWorking, \n                action\n             } = this.props;\n            return  (\n                <ModalDialog\n                 visible={visible} title={title} onDismiss={onDismiss}>\n                    <Form\n                     onSubmit={this._handleSubmit}>\n                        <h4\n                         className={css(styles.subtitle)}>\n                            Owner\n                        </h4>\n                        <ValidatedInput \n                            name='owner'\n                            \n                            // @ts-ignore\n                            autoFocus\n                            value={this.state.owner}\n                            onChange={this.handleChange}\n                            placeholder=\"Repo owner\"\n                            validate={this._validateName}\n                         />\n                        <ValidatedInput \n                            name='name'\n                            \n                            // @ts-ignore\n                            autoFocus\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                            placeholder=\"Repo name\"\n                            validate={this._validateName}\n                         />\n                        <ValidatedInput \n                            name='branch'\n                            \n                            // @ts-ignore\n                            autoFocus\n                            value={this.state.branch}\n                            onChange={this.handleChange}\n                            placeholder=\"Repo branch\"\n                            validate={this._validateName}\n                         />\n                        <div\n                         className={css(styles.buttons)}>\n                            <FormButton \n                                \n                                // @ts-ignore\n                                type=\"submit\"\n                                large\n                                variant=\"primary\"\n                                loading={isWorking}\n                            >\n                                {action}\n                            </FormButton>\n                        </div>\n                    </Form>\n                </ModalDialog>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({ subtitle: { fontSize: 16,  fontWeight: 500,  padding: 0,  lineHeight: '22px',  margin: '16px 0 6px 0'  },  buttons: { margin: '20px 0 0 0'  }  }); \n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\Packi\\PackiPanel.tsx.ittf\n*/\nimport * as React from 'react';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ModalGithubClone from './ModalGithubClone';\ntype Props = { \n    classes: any;\n    onGithubClone: any;\n};\ntype State = { \n    currentModal: string;\n};\nclass PackiPanelComp extends React.Component<Props, State> {\n    state: State = {\n        currentModal: null\n    }\n    ;\n    _handleDismissEditModal = () => \n        this.setState({\n            currentModal: null\n         });\n    _handleOpenModalGithubClone = () => \n        this.setState({\n            currentModal: 'github-clone'\n         });\n    render() {\n        const {\n            onGithubClone\n         } = this.props;\n        const {\n            currentModal\n         } = this.state;\n        return  (\n            <div\n            >\n                <Button\n                 variant=\"contained\" size=\"small\" onClick={this._handleOpenModalGithubClone}>\n                    Github clone\n                </Button>\n                <ModalGithubClone \n                    title=\"Clone github repository\"\n                    action=\"Clone\"\n                    visible={currentModal === 'github-clone'}\n                    onDismiss={this._handleDismissEditModal}\n                    onSubmit={(details) => {\n                        \n                            onGithubClone(details);\n                            this._handleDismissEditModal();\n                        }\n                    }\n                 />\n            </div>\n            )\n        ;\n    }\n}\nconst muiStyles = (theme: Theme) => \n\n    createStyles({})\n;\nexport const PackiPanel = withStyles(muiStyles)(PackiPanelComp)\n;\nexport default PackiPanel;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\PageMetadata.tsx.ittf\n*/\nimport * as React from 'react';\nimport {Helmet} from 'react-helmet-async';\ntype Props = { \n    name: string;\n    description: string;\n    id?: string;\n};\nexport function getPageMetadata(props: Props) {\n\n    const title = `${props.name} - Packi`;\n    const description = props.description;\n    const url = `${process.env.PACKI_SERVER_URL}${\n    props.id\n     ? `/${props.id}`\n     : ''}\n    `;\n    const image = 'https://s3.amazonaws.com/exp-brand-assets/PackiIcon_200.png';\n    const meta = [\n        {\n            name: 'description', \n            content: description\n         }, \n        \n        // Open graph\n        {\n            property: 'og:url', \n            content: url\n         }, \n        {\n            property: 'og:title', \n            content: title\n         }, \n        {\n            property: 'og:description', \n            content: description\n         }, \n        {\n            property: 'og:type', \n            content: 'website'\n         }, \n        {\n            property: 'og:image', \n            content: image\n         }, \n        {\n            property: 'og:image:width', \n            content: '200'\n         }, \n        {\n            property: 'og:image:height', \n            content: '200'\n         }, \n        \n        // Twitter\n        {\n            name: 'twitter:card', \n            content: 'summary'\n         }, \n        {\n            name: 'twitter:site', \n            content: '@expo'\n         }, \n        {\n            name: 'twitter:title', \n            content: title\n         }, \n        {\n            name: 'twitter:description', \n            content: description\n         }, \n        {\n            name: 'twitter:image', \n            content: image\n         }\n    ];\n    return {\n            title, \n            description, \n            url, \n            meta\n         };\n}\nexport default function PageMetadata(props: Props) {\n    \n        const {\n            title, \n            meta\n         } = getPageMetadata(props);\n        return  (\n            <Helmet\n             title={title} meta={meta} />\n            )\n        ;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Avatar.tsx.ittf\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {c} from '../ThemeProvider';\n\nexport interface AvatarProps {\n    size: number;\n    source: string | null;\n}\n\ninterface RootStyleProps {\n}\ninterface ImageStyleProps {\n    size: number;\n}\nconst StyledRoot = styled.div<RootStyleProps>`\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    justify-content: center;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    stroke: ${props => c('text')};\n`\nconst StyledImage = styled.img<ImageStyleProps>`\n    width: ${props => props.size + \"px\"};\n    height: ${props => props.size + \"px\"};\n    -webkit-border-radius: ${props => (props.size / 2) + \"px\"};\n    -khtml-border-radius: ${props => (props.size / 2) + \"px\"};\n    -moz-border-radius: ${props => (props.size / 2) + \"px\"};\n    -o-border-radius: ${props => (props.size / 2) + \"px\"};\n    border-radius: ${props => (props.size / 2) + \"px\"};\n`\nexport const Avatar: FunctionComponent<AvatarProps> = ({\n    size, \n    source\n }) => \n\n     (\n    <StyledRoot\n    >\n        {\n            source ?  (\n                <StyledImage\n                 src={source} size={size} />\n                )\n             :  (\n                <svg \n                    width=\"20\"\n                    height=\"20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path \n                        d=\"M13.125 13.563c2.423-3.635 2.831-10.938-2.623-10.938-5.454 0-5.05 7.303-2.627 10.938-2.423 0-5.25 2.389-5.25 4.812h15.75c.004-2.423-2.827-4.813-5.25-4.813z\"\n                        strokeWidth=\"1.75\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                     />\n                </svg>\n                )\n            \n        }\n    </StyledRoot>\n    )\n\n;\nexport default Avatar;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Banner.tsx.ittf\n*/\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\nimport {c, s} from '../ThemeProvider';\n\nexport interface BannerProps {\n    visible: boolean;\n    className?: string;\n    type?: 'info' | 'success' | 'error';\n    children?: React.ReactNode;\n}\n\ntype BannerState = { \n    rendered: boolean;\n};\n\ninterface BannerStyleProps {\n    visible: boolean;\n    type?: 'info' | 'success' | 'error';\n}\nconst StyledRoot = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 0 10px;\n    z-index: 999;\n    text-align: center;\n    pointer-events: none;\n    \n`\nconst StyledBanner = styled.div<BannerStyleProps>`\n    display: inline-block;\n    margin: auto;\n    padding: 1em;\n    max-width: 100%;\n    background-color: ${props => props.type === 'success' ? c('success') : props.type === 'error' ? c('error') : c('primary')};\n    color: ${props => props.type === 'success' ? c('success-text') : props.type === 'error' ? c('error-text') : c('primary-text')};\n    -webkit-border-radius: 0 0 4px 4px;\n    -khtml-border-radius: 0 0 4px 4px;\n    -moz-border-radius: 0 0 4px 4px;\n    -o-border-radius: 0 0 4px 4px;\n    border-radius: 0 0 4px 4px;\n    transition-duration: 200ms;\n    pointer-events: ${props => props.visible ? \"auto\" : \"none\"};\n    -webkit-box-shadow: ${props => s('popover')};\n    -moz-box-shadow: ${props => s('popover')};\n    -o-box-shadow: ${props => s('popover')};\n    box-shadow: ${props => s('popover')};\n    -webkit-transform: ${props => props.visible ? \"translateY(0)\" : \"translateY(-100%)\"};\n    -ms-transition: ${props => props.visible ? \"translateY(0)\" : \"translateY(-100%)\"};\n    transform: ${props => props.visible ? \"translateY(0)\" : \"translateY(-100%)\"};\n`\n\nexport class Banner extends PureComponent<BannerProps, BannerState> {\n    \n    static getDerivedStateFromProps(props: BannerProps) {\n        if (props.visible) {\n            return {\n                    rendered: true\n                 };\n        }\n        return null;\n    }\n    \n    state = {\n        rendered: this.props.visible\n    }\n    ;\n    \n    componentDidUpdate(prevProps: BannerProps) {\n        if (this.props.visible !== prevProps.visible) {\n            clearTimeout(this._timer);\n            if (!this.props.visible) {\n                this._timer = setTimeout(() => \n                \n                    this.setState({\n                        rendered: false\n                     })\n                , 300)\n                ;\n            }\n        }\n    }\n    \n    _timer: any;\n    \n    render() {\n        if (!this.state.rendered) {\n            return null;\n        }\n        return  (\n            <StyledRoot\n            >\n                <StyledBanner\n                 visible={this.props.visible} type={this.props.type} className={this.props.className}>\n                    {this.props.children}\n                </StyledBanner>\n            </StyledRoot>\n            )\n        ;\n    }\n}\nexport default Banner;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ContextMenu.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\nimport ShortcutLabel from './ShortcutLabel';\n\nexport type Action = { \n    label: string;\n    handler: () => void;\n    disabled?: boolean;\n    combo?: number[];\n};\n\nexport type ContextMenuProps = { \n    innerRef?: React.Ref<HTMLUListElement>;\n    visible: boolean;\n    actions: (Action | undefined)[];\n    position?: { \n        pageX: number;\n        pageY: number;\n    } | null;\n    onHide: () => void;\n    className?: string;\n};\nconst BOTTOM_OFFSET = 35;\nconst MENU_ITEM_HEIGHT = 28;\n\nexport class ContextMenu extends React.PureComponent<ContextMenuProps> {\n    render() {\n        const {\n            visible, \n            position, \n            actions, \n            onHide, \n            className, \n            \n            // @ts-ignore\n            innerRef\n         } = this.props;\n        if (!visible) {\n            return null; \n        }\n        const shownActions = actions.filter(action => \n            \n                action\n            ) as Action[];\n        return  (\n            <ul\n             ref={innerRef} className={classnames(css(styles.menu), className)} style={position ? {\n                        position: 'fixed', \n                        top: Math.min(position.pageY, window.innerHeight - BOTTOM_OFFSET - shownActions.length * MENU_ITEM_HEIGHT), \n                        left: position.pageX, \n                        marginTop: -8\n                     } : {}}>\n                {\n                    shownActions.map(({\n                        label, \n                        handler, \n                        disabled, \n                        combo\n                     }: Action) => \n                    \n                         (\n                        <li\n                         key={label}>\n                            <button\n                             disabled={disabled} className={css(styles.item, disabled && styles.disabled)} onClick={() => {\n                                \n                                    handler();\n                                    onHide();\n                                }\n                            }>\n                                <div\n                                >\n                                    {label}\n                                </div>\n                                {\n                                    combo ?  (\n                                        <ShortcutLabel\n                                         combo={combo} className={css(styles.hint)} />\n                                        )\n                                     : null\n                                }\n                            </button>\n                        </li>\n                        )\n                    \n                    )\n                }\n            </ul>\n            )\n        ;\n    }\n}\nexport default React.forwardRef((props: ContextMenuProps, ref: React.Ref<HTMLUListElement>) => \n    \n         (\n        <ContextMenu\n         {...props} innerRef={ref} />\n        )\n    \n    )\nconst fadeIn = {\n    from: {\n        opacity: 0\n     }, \n    to: {\n        opacity: 1\n     }\n };\nconst styles = StyleSheet.create({\n    menu: {\n        zIndex: 10, \n        listStyle: 'none', \n        padding: 0, \n        borderRadius: 4, \n        borderStyle: 'solid', \n        boxShadow: s('popover'), \n        minWidth: 160, \n        animationName: fadeIn, \n        animationDuration: '0.083s', \n        animationTimingfunction: 'linear', \n        backgroundColor: c('content'), \n        border: `1px solid ${c('border')}`, \n        color: c('text')\n     }, \n    item: {\n        display: 'flex', \n        justifyContent: 'space-between', \n        appearance: 'none', \n        background: 'none', \n        border: 0, \n        outline: 0, \n        width: '100%', \n        padding: '8px 6px', \n        textAlign: 'left', \n        userSelect: 'none', \n        borderRadius: 2, \n        fontSize: 16, \n        color: c('text'), \n        borderBottom: `1px solid ${c('border')}`, \n        marginBottom: '-1px', \n        ':hover': {\n            background: c('hover')\n         }\n     }, \n    disabled: {\n        pointerEvents: 'none', \n        opacity: 0.5\n     }, \n    hint: {\n        marginLeft: 24, \n        lineHeight: '24px'\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\FooterButton.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\ntype FooterButtonProps = { \n    active?: boolean;\n    icon?: string;\n    children?: React.ReactNode;\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nexport function FooterButton({\n    active, \n    icon, \n    children, \n    onClick\n }: FooterButtonProps) {\n\n    return  (\n        <button\n         onClick={onClick} style={icon ? {\n                    backgroundImage: `url(${icon})`\n                 } : undefined} className={css(styles.button, children ? styles.buttonLabel : undefined, active && styles.active)}>\n            {children}\n        </button>\n        )\n    ;\n}\n\nexport default FooterButton;\n\nconst styles = StyleSheet.create({\n    button: {\n        position: 'relative', \n        border: 0, \n        outline: 0, \n        margin: 0, \n        height: 30, \n        padding: '0 16px', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        backgroundSize: 16, \n        backgroundRepeat: 'no-repeat', \n        backgroundPosition: 'center right 8px', \n        ':active': {\n            backgroundColor: c('hover'), \n            color: c('soft')\n         }, \n        ':hover': {\n            backgroundColor: c('hover'), \n            color: c('soft')\n         }\n     }, \n    buttonLabel: {\n        '@media (min-width: 720px)': {\n            padding: '5px 32px 5px 8px'\n         }\n     }, \n    active: {\n        backgroundColor: c('hover'), \n        color: c('soft')\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\IconButton.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\n\nexport type IconButtonProps = { \n    type?: 'submit' | 'button';\n    disabled?: boolean;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    title: string;\n    label?: string;\n    responsive?: boolean;\n    children?: React.ReactNode;\n    small?: boolean;\n};\n\nexport function IconButton({\n    title, \n    label, \n    responsive, \n    children, \n    small, \n    ...rest\n }: IconButtonProps) {\n\n    return  (\n        <button\n         {...rest} className={css(styles.button, small && styles.small, rest.disabled && styles.disabled)}>\n            {children}\n            {\n                label ?  (\n                    <span\n                     className={css(styles.label, !children && styles.labelNoIcon, responsive && styles.responsive)}>\n                        {label}\n                    </span>\n                    )\n                 : null\n            }\n            <span\n             className={css(styles.phantom)}>\n                <span\n                 className={css(styles.tooltip)}>\n                    {title}\n                </span>\n            </span>\n        </button>\n        )\n    ;\n}\n\nexport default IconButton;\n\nconst styles = StyleSheet.create({\n    button: {\n        position: 'relative', \n        height: 40, \n        minWidth: 40, \n        margin: '0 8px', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center', \n        appearance: 'none', \n        backgroundColor: 'transparent', \n        color: 'inherit', \n        padding: 0, \n        outline: 0, \n        border: 0, \n        borderRadius: 2, \n        whiteSpace: 'nowrap', \n        textDecoration: 'none', \n        fill: c('text'), \n        stroke: c('text'), \n        ':active': {\n            opacity: 0.8\n         }, \n        ':hover': {\n            cursor: 'pointer', \n            backgroundColor: c('hover')\n         }\n     }, \n    small: {\n        height: 32, \n        minWidth: 32, \n        margin: 0, \n        padding: '0 8px 0 0', \n        ':hover': {\n            backgroundColor: 'transparent'\n         }\n     }, \n    disabled: {\n        cursor: 'not-allowed', \n        pointerEvents: 'none', \n        opacity: 0.3\n     }, \n    phantom: {\n        position: 'absolute', \n        top: 0, \n        left: 0, \n        right: 0, \n        bottom: 0, \n        opacity: 0, \n        zIndex: 1, \n        ':hover': {\n            opacity: 1, \n            pointerEvents: 'auto'\n         }\n     }, \n    tooltip: {\n        position: 'absolute', \n        top: 'calc(100% + 4px)', \n        left: '50%', \n        transform: 'translateX(-50%)', \n        marginLeft: -2.5, \n        borderRadius: 2, \n        fontSize: 12, \n        padding: '4px 8px', \n        whiteSpace: 'nowrap', \n        pointerEvents: 'none', \n        boxShadow: s('popover'), \n        backgroundColor: c('content', 'dark'), \n        color: c('text', 'dark')\n     }, \n    label: {\n        margin: '0 12px', \n        color: c('text')\n     }, \n    labelNoIcon: {\n        margin: '0 12px 0 0'\n     }, \n    responsive: {\n        '@media (max-width: 960px)': {\n            display: 'none'\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\KeybindingsManager.tsx.ittf\n*/\nimport * as React from 'react';\n\nexport type KeybindingsManagerProps<T extends { \n    combo: number[];\n}> = { \n    bindings: { \n        [key: string]: T;\n    };\n    onTrigger: (type: string, binding: T) => void;\n};\n\nconst isMac = 'navigator' in global && /Mac/i.test(navigator.platform);\n\nexport const KeyMap = {\n    C: 67, \n    D: 68, \n    F: 70, \n    S: 83, \n    U: 85, \n    V: 86, \n    F2: 113, \n    Delete: 8, \n    Enter: 13, \n    Escape: 27, \n    Shift: 16, \n    Ctrl: 17, \n    Alt: 18, \n    Cmd: 91, \n    Tilde: 192, \n    Backslash: 220, \n    Meta: isMac ? 91 : 17\n };\n\nexport const isKeyCombo = (e: KeyboardEvent, combo: number[]) => \n\n    combo.every((code) => {\n    \n        switch (code) {\n            case KeyMap.Ctrl: {\n                return e.ctrlKey;\n            }\n            case KeyMap.Meta: {\n                return e.metaKey;\n            }\n            case KeyMap.Alt: {\n                return e.altKey;\n            }\n            default: {\n                return e.keyCode === code;\n            }\n        }\n    }\n    )\n;\n\nexport class KeybindingsManager<T extends { \n    combo: number[];\n}> extends React.PureComponent<KeybindingsManagerProps<T>> {\n    componentDidMount() {\n        document.addEventListener('keydown', this._handleKeydown);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this._handleKeydown);\n    }\n    _handleKeydown = (e: KeyboardEvent) => {\n        const {\n            bindings, \n            onTrigger\n         } = this.props;\n        for (const type in bindings) {\n            if (bindings.hasOwnProperty(type)) {\n                const binding = bindings[type];\n                if (isKeyCombo(e, binding.combo)) {\n                    e.preventDefault();\n                    onTrigger(type, binding);\n                    break;\n                }\n            }\n        }\n    };\n    render() {\n        return null;\n    }\n}\nexport default KeybindingsManager;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\LargeInput.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\nexport type LargeInputProps = { \n    value: string | undefined;\n    disabled?: boolean;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder?: string;\n    name?: string;\n    type?: string;\n    autoFocus?: boolean;\n    error?: Error | null;\n};\n\ntype State = { \n    focused: boolean;\n};\n\nexport class LargeInput extends React.Component<LargeInputProps, State> {\n    state = {\n        focused: true\n    }\n    ;\n    focus() {\n        this._input.current?.focus?.();\n    }\n    _handleFocus = () => \n        this.setState({\n            focused: true\n         });\n    _handleBlur = () => \n        this.setState({\n            focused: false\n         });\n    _input = React.createRef<HTMLInputElement>();\n    render() {\n        return  (\n            <div\n             className={css(styles.container)}>\n                <input \n                    ref={this._input}\n                    autoFocus={this.props.autoFocus}\n                    className={css(styles.input, this.props.error ? styles.error : styles.normal)}\n                    value={this.props.value}\n                    name={this.props.name}\n                    type={this.props.type}\n                    disabled={this.props.disabled}\n                    onChange={this.props.onChange}\n                    placeholder={this.props.placeholder}\n                    onFocus={this._handleFocus}\n                    onBlur={this._handleBlur}\n                 />\n                {\n                    this.state.focused && this.props.error ?  (\n                        <div\n                         className={css(styles.validation)}>\n                            {this.props.error.message}\n                        </div>\n                        )\n                     : null\n                }\n            </div>\n            )\n        ;\n    }\n}\n\nexport default LargeInput;\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative'\n     }, \n    input: {\n        outline: 0, \n        fontSize: 16, \n        borderRadius: 3, \n        padding: '12px 14px 12px 14px', \n        lineHeight: '22px', \n        width: '100%', \n        borderWidth: 1, \n        borderStyle: 'solid', \n        backgroundColor: c('content')\n     }, \n    normal: {\n        borderColor: c('border'), \n        ':focus': {\n            borderColor: c('selected')\n         }\n     }, \n    error: {\n        borderColor: c('error')\n     }, \n    validation: {\n        position: 'absolute', \n        backgroundColor: c('error'), \n        color: c('error-text'), \n        padding: '6px 12px', \n        borderRadius: 3, \n        marginTop: 8, \n        textAlign: 'left', \n        zIndex: 1, \n        ':before': {\n            content: '\"\"', \n            display: 'block', \n            position: 'absolute', \n            bottom: '100%', \n            width: 0, \n            height: 0, \n            borderLeft: '6px solid transparent', \n            borderRight: '6px solid transparent', \n            borderBottom: `6px solid ${c('error')}`\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\LargeTextArea.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport {c} from '../ThemeProvider';\n\nexport type LargeTextAreaProps = { \n    autoFocus?: boolean;\n    value: string | undefined;\n    name?: string;\n    minRows?: number;\n    placeholder?: string;\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nexport function LargeTextArea({\n    ...rest\n }: LargeTextAreaProps) {\n\n    return  (\n        <Textarea\n         className={css(styles.input)} {...rest} />\n        )\n    ;\n}\n\nexport default LargeTextArea;\n\nconst styles = StyleSheet.create({\n    input: {\n        outline: 0, \n        fontSize: 16, \n        borderRadius: 3, \n        padding: '12px 14px 12px 14px', \n        lineHeight: '22px', \n        border: `1px solid ${c('border')}`, \n        backgroundColor: c('content'), \n        width: '100%', \n        ':focus': {\n            borderColor: c('selected')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\LoadingText.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport * as React from 'react';\n\ntype Props = { \n    className?: string;\n    children?: React.ReactNode;\n    onClick?: () => void;\n};\n\nconst rotate = {\n    from: {\n        transform: 'rotate(0deg)'\n     }, \n    to: {\n        transform: 'rotate(360deg)'\n     }\n };\n\nconst LoadingText = ({\n    children, \n    className, \n    onClick\n }: Props) => \n\n     (\n    <div\n     className={classnames(css(styles.loading), className)} onClick={onClick}>\n        {children}\n    </div>\n    )\n\n;\n\nexport default LoadingText;\n\nconst styles = StyleSheet.create({\n    loading: {\n        ':before': {\n            display: 'inline-block', \n            content: '\"\"', \n            borderWidth: 2, \n            borderStyle: 'solid', \n            borderTopColor: 'rgba(255, 255, 255, 0.2)', \n            borderRightColor: 'rgba(255, 255, 255, 0.2)', \n            borderBottomColor: 'rgba(255, 255, 255, 0.2)', \n            borderLeftColor: 'rgba(255, 255, 255, 0.5)', \n            height: 16, \n            width: 16, \n            borderRadius: '50%', \n            marginLeft: '.5em', \n            marginRight: '1em', \n            verticalAlign: -3, \n            animationName: [\n                rotate\n            ], \n            animationDuration: '1s', \n            animationIterationCount: 'infinite', \n            animationTimingFunction: 'linear'\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\MenuButton.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c, s} from '../ThemeProvider';\nimport FooterButton from './FooterButton';\n\nexport type MenuButtonProps = { \n    icon?: string;\n    label?: React.ReactNode;\n    content: React.ReactNode;\n};\n\nexport function MenuButton({\n    icon, \n    label, \n    content\n }: MenuButtonProps) {\n\n    const [active, setActive] = React.useState<boolean>(false);\n    const root = React.useRef<HTMLDivElement>(null);\n    React.useEffect(() => {\n    \n        const onClick = (e: MouseEvent) => {\n        \n            if (e.target === root.current || root.current?.contains?.(e.target as Node)) {\n                return ;\n            }\n            setActive(false);\n        }\n        ;\n        document.addEventListener('click', onClick);\n        return () => \n            \n                document.removeEventListener('click', onClick)\n        ;\n    }\n    , [])\n    return  (\n        <div\n         ref={root} className={css(styles.panelContainer)}>\n            <FooterButton\n             icon={icon} active={active} onClick={() => \n                \n                    setActive(value => \n                    \n                        !value\n                    \n                    )\n            }>\n                {label}\n            </FooterButton>\n            {\n                active ?  (\n                    <div\n                     className={css(styles.pane)}>\n                        {content}\n                    </div>\n                    )\n                 : null\n            }\n        </div>\n        )\n    ;\n}\n\nexport default MenuButton;\n\nconst styles = StyleSheet.create({\n    panelContainer: {\n        position: 'relative', \n        display: 'flex', \n        alignItems: 'center'\n     }, \n    pane: {\n        display: 'flex', \n        alignItems: 'stretch', \n        justifyContent: 'flex-end', \n        flexDirection: 'column', \n        position: 'absolute', \n        right: 0, \n        bottom: 32, \n        minWidth: 160, \n        padding: '8px 0', \n        borderWidth: 1, \n        borderRadius: 3, \n        borderStyle: 'solid', \n        backgroundColor: c('content'), \n        borderColor: c('border'), \n        boxShadow: s('popover'), \n        color: c('text'), \n        zIndex: -1\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Modal.tsx.ittf\n*/\nimport React, {PureComponent} from 'react';\nimport ReactDOM from 'react-dom';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nexport interface ModalProps {\n    visible: boolean;\n    onDismiss?: () => void;\n    children?: React.ReactNode;\n}\n\ntype ModalState = { \n    rendered: boolean;\n    initial: boolean;\n};\n\ninterface RootStyleProps {\n    initial: boolean;\n    visible: boolean;\n}\nconst StyledRoot = styled.div<RootStyleProps>`\n    -webkit-font-smoothing: antialiased;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    color: #fff;\n    z-index: 999;\n    transition-property: opacity;\n    transition-duration: 200ms;\n    background-color: ${props => props.initial ? \"rgba(24, 29, 37, 0.8)\" : \"inherit\"};\n    opacity: ${props => props.visible ? \"1\" : \"0\"};\n    pointer-events: ${props => props.visible ? \"auto\" : \"none\"};\n`\nconst StyledContent = styled.div`\n    width: 100%;\n    height: 100%;\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    justify-content: center;\n    \n`\n\nexport class Modal extends PureComponent<ModalProps, ModalState> {\n    \n    static getDerivedStateFromProps(props: ModalProps) {\n        return props.visible ? {\n                    rendered: true, \n                    initial: false\n                 } : null;\n    }\n    \n    state = {\n        rendered: this.props.visible, \n        initial: !this.props.visible\n    }\n    ;\n    \n    componentDidMount() {\n        document.body.appendChild(this._container);\n        document.addEventListener('keydown', this._handleKeyDown);\n    }\n    \n    componentDidUpdate(prevProps: ModalProps) {\n        if (this.props.visible !== prevProps.visible) {\n            clearTimeout(this._timer);\n            if (!this.props.visible) {\n                this._timer = setTimeout(() => \n                \n                    this.setState({\n                        rendered: false\n                     })\n                , 300)\n                ;\n            }\n        }\n    }\n    \n    componentWillUnmount() {\n        document.body.removeChild(this._container);\n        document.removeEventListener('keydown', this._handleKeyDown);\n    }\n    \n    _container = document.createElement('div');\n    \n    _content = React.createRef<HTMLDivElement>();\n    \n    _timer: any;\n    \n    _handleDismiss = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (this._content.current && this._content.current !== e.target && this._content.current.contains(e.target as Node)) {\n            return ;\n        }\n        this.props.onDismiss?.();\n    };\n    \n    _handleKeyDown = (e: KeyboardEvent) => {\n        if (e.keyCode === 27 && this.props.visible) {\n            // Esc was pressed\n            e.preventDefault();\n            this.props.onDismiss?.();\n        }\n    };\n    \n    render() {\n        return ReactDOM.createPortal(\n            <StyledRoot\n             initial={this.state.initial} visible={this.props.visible} onClick={this._handleDismiss}>\n                <StyledContent\n                 ref={this._content}>\n                    {\n                        this.state.rendered ? this.props.children : null\n                    }\n                </StyledContent>\n            </StyledRoot>\n            , this._container);\n    }\n}\nexport default Modal;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ModalDialog.tsx.ittf\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {ModalSheet} from './ModalSheet';\nimport {c} from '../ThemeProvider';\n\nexport interface ModalDialogProps {\n    visible: boolean;\n    className?: string;\n    onDismiss?: () => void;\n    title?: string;\n    autoSize?: boolean;\n    children: React.ReactNode;\n}\n\ninterface TitleStyleProps {\n    title?: string;\n}\ninterface SheetStyleProps {\n    autoSize?: boolean;\n}\nconst StyledModalSheet = styled(ModalSheet)<SheetStyleProps>`\n    min-width: 360px;\n    min-height: 0;\n    max-width: 420px;\n    max-height: calc(100% - 100px);\n    \n`\nconst StyledTitle = styled.div<TitleStyleProps>`\n    height: 72px;\n    font-size: 24px;\n    width: 100%;\n    line-height: 24px;\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex-shrink: 0;\n    -ms-flex-negative: 0;\n    flex-shrink: 0;\n    -webkit-align-items: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    -webkit-justify-content: center;\n    justify-content: center;\n    border-bottom: ${props => \"1px solid \" + c('border')};\n`\nconst StyledContent = styled.div<TitleStyleProps>`\n    padding: ${props => props.title ? \"16px 24px 24px 24px\" : \"24px\"};\n    overflow: auto;\n`\nexport const ModalDialog: FunctionComponent<ModalDialogProps> = ({\n    visible, \n    className, \n    onDismiss, \n    title, \n    autoSize, \n    children\n }) => \n\n     (\n    <StyledModalSheet \n        autoSize={autoSize}\n        className={className}\n        visible={visible}\n        onDismiss={onDismiss}\n    >\n        {\n            title ?  (\n                <StyledTitle\n                 title={title}>\n                    {title}\n                </StyledTitle>\n                )\n             : null\n        }\n        <StyledContent\n         title={title}>\n            {children}\n        </StyledContent>\n    </StyledModalSheet>\n    )\n\n;\nexport default ModalDialog;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ModalSheet.tsx.ittf\n*/\nimport React, {FunctionComponent} from 'react';\n// see https://mxstbr.blog/2016/11/styled-components-magic-explained/\nimport styled, {keyframes, css} from 'styled-components';\n\nimport {ThemeProvider, c, s} from '../ThemeProvider';\nimport Modal from './Modal';\n\nexport interface ModalSheetProps {\n    visible: boolean;\n    className?: string;\n    onDismiss?: () => void;\n    children: React.ReactNode;\n}\n\nconst StyledThemeProvider = styled(ThemeProvider)`\n    display: -ms-flexbox;\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex-direction: column;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    position: relative;\n    text-align: center;\n    -webkit-border-radius: 4px;\n    -khtml-border-radius: 4px;\n    -moz-border-radius: 4px;\n    -o-border-radius: 4px;\n    border-radius: 4px;\n    -webkit-box-shadow: ${props => s('popover')};\n    -moz-box-shadow: ${props => s('popover')};\n    -o-box-shadow: ${props => s('popover')};\n    box-shadow: ${props => s('popover')};\n    background-color: ${props => c('content')};\n    color: ${props => c('text')};\n`\nconst StyledClose = styled.button`\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -webkit-border-radius: 1em;\n    -khtml-border-radius: 1em;\n    -moz-border-radius: 1em;\n    -o-border-radius: 1em;\n    border-radius: 1em;\n    outline: 0;\n    padding: 0;\n    position: absolute;\n    right: -1em;\n    top: -1em;\n    width: 2em;\n    height: 2em;\n    background: ${props => c('text')};\n    border: ${props => \"2px solid \" + c('content')};\n    -webkit-box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    -moz-box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    -o-box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    box-shadow: 0 1.5px 3px rgba(0, 0, 0, .16);\n    color: ${props => c('content')};\n    font-size: 1em;\n    font-weight: bold;\n    text-align: center;\n`\nexport const ModalSheet: FunctionComponent<ModalSheetProps> = ({\n    visible, \n    className, \n    onDismiss, \n    children\n }) => \n\n     (\n    <Modal\n     visible={visible} onDismiss={onDismiss}>\n        <StyledThemeProvider\n         className={className}>\n            {\n                onDismiss ?  (\n                    <StyledClose\n                     onClick={onDismiss} data-test-id=\"modal-close\">\n                        ✕\n                    </StyledClose>\n                    )\n                 : null\n            }\n            {children}\n        </StyledThemeProvider>\n    </Modal>\n    )\n\n;\nexport default ModalSheet;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ResizablePane.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\n\ntype Props = { \n    inverted?: boolean;\n    direction: 'horizontal' | 'vertical';\n    children?: React.ReactNode;\n    className?: string;\n};\n\ntype State = { \n    resizing: boolean;\n    initialPosition: { \n        pageX: number;\n        pageY: number;\n    } | null;\n    initialWidth: number;\n    initialHeight: number;\n};\n\nexport default class ResizablePane extends React.PureComponent<Props, State> {\n        state: State = {\n            resizing: false, \n            initialPosition: null, \n            initialWidth: 0, \n            initialHeight: 0\n        }\n        ;\n        componentDidMount() {\n            // @ts-ignore\n            document.addEventListener('mouseup', this._handleMouseUp);\n            // @ts-ignore\n            document.addEventListener('mousemove', this._handleMouseMove);\n        }\n        componentWillUnmount() {\n            // @ts-ignore\n            document.removeEventListener('mouseup', this._handleMouseUp);\n            // @ts-ignore\n            document.removeEventListener('mousemove', this._handleMouseMove);\n        }\n        _handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!this._pane.current) {\n                return ;\n            }\n            const style = getComputedStyle(this._pane.current);\n            this.setState({\n                resizing: true, \n                initialPosition: {\n                    pageX: e.pageX, \n                    pageY: e.pageY\n                 }, \n                initialWidth: parseFloat(style.width || '0'), \n                initialHeight: parseFloat(style.height || '0')\n             })\n        };\n        _handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n            if (this.state.resizing) {\n                e.preventDefault();\n                this.setState({\n                    resizing: false, \n                    initialPosition: null, \n                    initialWidth: 0, \n                    initialHeight: 0\n                 })\n            }\n        };\n        _handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n            const {\n                direction, \n                inverted\n             } = this.props;\n            const {\n                resizing, \n                initialPosition, \n                initialWidth, \n                initialHeight\n             } = this.state;\n            if (resizing && initialPosition) {\n                e.preventDefault();\n                let style;\n                if (direction === 'horizontal') {\n                    const delta = e.pageX - initialPosition.pageX;\n                    style = `width: ${initialWidth + ((inverted ? -delta : delta))}px !important;`;\n                }\n                else {\n                    const delta = initialPosition.pageY - e.pageY;\n                    style = `height: ${initialHeight + ((inverted ? -delta : delta))}px !important`;\n                }\n                this._pane.current?.setAttribute?.('style', style);\n            }\n        };\n        _pane = React.createRef<HTMLDivElement>();\n        render() {\n            const {\n                direction, \n                inverted, \n                className, \n                children\n             } = this.props;\n            return  (\n                <div\n                 ref={this._pane} className={`${css(styles.container)} ${className ?? ''}`}>\n                    {children}\n                    <div\n                     className={css(styles.handle, direction === 'horizontal' ? styles.horizontal : styles.vertical, direction === 'horizontal' ? inverted ? styles.horizontalInverted : styles.horizontalNormal : inverted ? styles.verticalInverted : styles.verticalNormal)} onMouseDown={this._handleMouseDown} onMouseUp={this._handleMouseUp} />\n                </div>\n                )\n            ;\n        }\n    }\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative'\n     }, \n    handle: {\n        position: 'absolute', \n        zIndex: 1\n     }, \n    horizontal: {\n        top: 0, \n        bottom: 0, \n        width: 12, \n        cursor: 'col-resize'\n     }, \n    vertical: {\n        left: 0, \n        right: 0, \n        height: 12, \n        cursor: 'row-resize'\n     }, \n    horizontalNormal: {\n        right: -12\n     }, \n    horizontalInverted: {\n        left: -12\n     }, \n    verticalNormal: {\n        top: -12\n     }, \n    verticalInverted: {\n        bottom: -12\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ShortcutLabel.tsx.ittf\n*/\nimport {css, StyleSheet} from 'aphrodite';\nimport classnames from 'classnames';\nimport findKey from 'lodash/findKey';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\nimport {KeyMap} from './KeybindingsManager';\n\nexport type ShortcutLabelProps = { \n    combo: number[];\n    className?: string;\n    boxed?: boolean;\n};\n\ntype KeyName =  keyof typeof KeyMap;\n\nconst isMac = 'navigator' in global && /Mac/i.test(navigator.platform);\n\nconst KeyLabels: Partial<{[key in KeyName] : string}> = {\n    Cmd: '⌘', \n    Delete: '⌫', \n    Enter: '↩', \n    Shift: '⇧', \n    Ctrl: isMac ? '⌃' : 'Ctrl', \n    Alt: isMac ? '⌥' : 'Alt', \n    Backslash: '\\\\', \n    Tilde: '`'\n };\n\nexport function ShortcutLabel({\n    combo, \n    className, \n    boxed=false\n }: ShortcutLabelProps):  any {\n\n    return  (\n        <kbd\n         className={classnames(css(styles.shortcutLabel), boxed && css(styles.boxedShortcut), className)}>\n            {\n                combo.map((code) => {\n                \n                    \n                    // @ts-ignore\n                    const name = findKey(KeyMap, c =>  \n                        c === code\n                    );\n                    \n                    if (name && KeyLabels[name as KeyName]) {\n                        return KeyLabels[name as KeyName];\n                    }\n                    else {\n                        return name;\n                    }\n                }\n                ).join(isMac ? '' : '+')\n                \n            }\n        </kbd>\n        )\n    ;\n}\n\nexport default ShortcutLabel;\n\nconst styles = StyleSheet.create({\n    shortcutLabel: {\n        color: 'inherit', \n        fontFamily: 'var(--font-monospace)', \n        fontSize: '90%', \n        opacity: 0.5, \n        boxShadow: `none`, \n        display: 'inline-block', \n        lineHeight: 'initial'\n     }, \n    boxedShortcut: {\n        padding: '0.2rem 0.4rem', \n        border: `1px solid ${c(`border`)}`, \n        borderBottomWidth: 2, \n        borderRadius: 3, \n        opacity: 0.66\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\Toast.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ThemeProvider, c, s} from '../ThemeProvider';\n\nexport type ToastProps = { \n    label: React.ReactNode;\n    timeout?: number;\n    persistent?: boolean;\n    actions: { \n        label: string;\n        action?: () => void;\n        primary?: boolean;\n    }[];\n    onDismiss?: () => void;\n};\n\ntype State = { \n    dismissing: boolean;\n};\n\nconst TOAST_GROUP_ID = '__toast_group__container';\n\nexport class Toast extends React.Component<ToastProps, State> {\n    static defaultProps = {\n        timeout: 5000\n    }\n    ;\n    state = {\n        dismissing: false\n    }\n    ;\n    componentDidMount() {\n        let group = document.getElementById(TOAST_GROUP_ID);\n        if (!group) {\n            group = document.createElement('div');\n            group.id = TOAST_GROUP_ID;\n            Object.assign(group.style, {\n                position: 'fixed', \n                bottom: '3em', \n                left: '1em', \n                zIndex: '999'\n             })\n            document.body.appendChild(group);\n        }\n        group.appendChild(this._container);\n        if (this.props.persistent) {\n            this._scheduleDismiss();\n        }\n    }\n    componentWillUnmount() {\n        const group = document.getElementById(TOAST_GROUP_ID);\n        if (group) {\n            group.removeChild(this._container);\n        }\n        this._cancelDismiss();\n    }\n    _container = document.createElement('div');\n    _timer: any;\n    _scheduleDismiss = () => \n        this._timer = setTimeout(this._handleDismiss, this.props.timeout);\n    _cancelDismiss = () => {\n        this.setState({\n            dismissing: false\n         })\n        clearTimeout(this._timer);\n    };\n    _handleDismiss = () => {\n        this.setState({\n            dismissing: true\n         })\n        this._timer = setTimeout(() => \n        \n            this.props.onDismiss?.()\n        , 400)\n        ;\n    };\n    render() {\n        const props = this.props.persistent ? {} : {\n                onMouseEnter: this._cancelDismiss, \n                onMouseLeave: this._scheduleDismiss\n             };\n        return ReactDOM.createPortal(\n            <ThemeProvider\n             {...props} style={styles.toast} className={css(this.state.dismissing ? styles.dismissing : styles.appearing)}>\n                <div\n                 className={css(styles.label)}>\n                    {this.props.label}\n                </div>\n                {\n                    this.props.actions.map((action) => \n                    \n                         (\n                        <button\n                         key={action.label} className={css(styles.button)} onClick={action.action ?? this._handleDismiss}>\n                            {action.label}\n                        </button>\n                        )\n                    \n                    )\n                }\n            </ThemeProvider>\n            , this._container);\n    }\n}\n\nconst fadeIn = {\n    from: {\n        opacity: 0\n     }, \n    to: {\n        opacity: 1\n     }\n };\n\nconst fadeOut = {\n    from: {\n        opacity: 1\n     }, \n    to: {\n        opacity: 0\n     }\n };\n\nexport default Toast;\n\nconst styles = StyleSheet.create({\n    toast: {\n        display: 'flex', \n        margin: '1em', \n        padding: '0 .75em', \n        borderRadius: 3, \n        border: `1px solid ${c('border')}`, \n        boxShadow: s('popover'), \n        minWidth: '27em', \n        whiteSpace: 'nowrap', \n        backgroundColor: c('content'), \n        color: c('text')\n     }, \n    appearing: {\n        animationName: fadeIn, \n        animationDuration: '250ms', \n        opacity: 1\n     }, \n    dismissing: {\n        animationName: fadeOut, \n        animationDuration: '400ms', \n        opacity: 0\n     }, \n    label: {\n        flex: 1, \n        minWidth: 0, \n        overflow: 'hidden', \n        textOverflow: 'ellipsis', \n        padding: '.75em'\n     }, \n    button: {\n        appearance: 'none', \n        background: 'transparent', \n        color: c('primary'), \n        border: '0', \n        textTransform: 'uppercase', \n        fontSize: '.9em', \n        fontWeight: 'bold', \n        padding: '1em', \n        outline: 0, \n        ':hover': {\n            backgroundColor: c('hover')\n         }, \n        ':active': {\n            backgroundColor: c('hover')\n         }\n     }\n });\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\ToggleSwitch.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\nexport type ToggleSwitchProps = { \n    checked: boolean;\n    label: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    className?: string;\n};\n\nexport function ToggleSwitch(props: ToggleSwitchProps) {\n\n    return  (\n        <label\n         className={classnames(css(styles.container), props.className)}>\n            <span\n             className={css(styles.label)}>\n                {props.label}\n            </span>\n            <span\n             className={css(styles.switch, props.checked ? styles.active : styles.inactive)} />\n            <input \n                type=\"checkbox\"\n                checked={props.checked}\n                onChange={props.onChange}\n                className={css(styles.check)}\n             />\n        </label>\n        )\n    ;\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex', \n        alignItems: 'center', \n        margin: 8, \n        cursor: 'pointer', \n        whiteSpace: 'nowrap'\n     }, \n    switch: {\n        display: 'inline-block', \n        verticalAlign: -4, \n        width: 36, \n        height: 20, \n        borderRadius: 12, \n        border: `1px solid ${c('border')}`, \n        backgroundColor: c('background'), \n        ':before': {\n            content: '\"\"', \n            display: 'inline-block', \n            height: 14, \n            width: 14, \n            borderRadius: 7, \n            margin: 2, \n            transition: '.2s', \n            transform: 'translateX(0)'\n         }\n     }, \n    inactive: {\n        ':before': {\n            transform: 'translateX(0)', \n            backgroundColor: c('soft')\n         }\n     }, \n    active: {\n        ':before': {\n            transform: 'translateX(16px)', \n            backgroundColor: c('primary')\n         }\n     }, \n    check: {\n        display: 'none'\n     }, \n    label: {\n        flex: 1, \n        padding: '0 .5em', \n        fontWeight: 'normal'\n     }\n });\nexport default ToggleSwitch;\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\components\\widgets\\WebFrame.tsx.ittf\n*/\nimport {StyleSheet, css} from 'aphrodite';\nimport * as React from 'react';\nimport {c} from '../ThemeProvider';\n\nexport type WebFrameProps = { \n    previewURL: string;\n};\n\nexport function WebFrame({\n    previewURL\n }: Props) {\n\n    return  (\n        <div\n         className={css(styles.container)}>\n            <iframe\n             src={previewURL} allow=\"geolocation; camera; microphone\" className={css(styles.frame)} />\n        </div>\n        )\n    ;\n}\n\nexport default WebFrame;\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'relative', \n        display: 'flex', \n        flex: 1, \n        width: '100%', \n        height: '100%'\n     }, \n    frame: {\n        position: 'relative', \n        width: '100%', \n        height: '100%', \n        border: 0, \n        zIndex: 1, \n        backgroundColor: c('content', 'light')\n     }\n });\n","import * as React from 'react';\n\nexport interface PaneProps {\n\tsize: number;\n\tminSize: number;\n\n\tsplit: 'horizontal' | 'vertical';\n\tclassName: string;\n\n\tforwardRef: React.Ref<HTMLDivElement>;\n\n\tchildren: React.ReactNode;\n}\n\nconst baseStyle: React.CSSProperties = {\n\tposition: 'relative',\n\toutline: 'none',\n\tborder: 0,\n\toverflow: 'hidden',\n\tdisplay: 'flex',\n\tflexBasis: 'auto',\n};\n\nexport const Pane = React.memo(({ size, minSize, split, className, forwardRef, children }: PaneProps) => {\n\tconst style: React.CSSProperties = {\n\t\t...baseStyle,\n\t\tflexGrow: size,\n\t\tflexShrink: size,\n\t};\n\n\tif (split === 'vertical') {\n\t\tstyle.width = 0;\n\t\tstyle.height = '100%';\n\t\tstyle.minWidth = minSize;\n\t} else {\n\t\tstyle.width = '100%';\n\t\tstyle.height = 0;\n\t\tstyle.minHeight = minSize;\n\t}\n\n\tconst classes = ['Pane', split, className].join(' ');\n\n\treturn (\n\t\t<div className={classes} style={style} ref={forwardRef}>\n\t\t\t{children}\n\t\t</div>\n\t);\n});\nPane.displayName = 'Pane';\n","import * as React from 'react';\nconst { useCallback } = React;\n\nimport { ClientPosition } from './util';\n\nexport interface ResizerProps {\n\tsplit: 'horizontal' | 'vertical';\n\tclassName: string;\n\tindex: number;\n\n\tonDragStarted: (index: number, pos: ClientPosition) => void;\n}\n\nexport const Resizer = React.memo(({ split, className, index, onDragStarted }: ResizerProps) => {\n\tconst handleMouseDown = useCallback(\n\t\t(event: React.MouseEvent) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tonDragStarted(index, event);\n\t\t},\n\t\t[index, onDragStarted],\n\t);\n\n\tconst handleTouchStart = useCallback(\n\t\t(event: React.TouchEvent) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tonDragStarted(index, event.touches[0]);\n\t\t},\n\t\t[index, onDragStarted],\n\t);\n\n\tconst classes = ['Resizer', split, className].join(' ');\n\n\treturn (\n\t\t<span\n\t\t\trole='presentation'\n\t\t\tclassName={classes}\n\t\t\tstyle={{ flex: 'none' }}\n\t\t\tonMouseDown={handleMouseDown}\n\t\t\tonTouchStart={handleTouchStart}\n\t\t/>\n\t);\n});\nResizer.displayName = 'Resizer';\n","import * as React from 'react';\nconst { useCallback, useRef, useState, useMemo, useEffect } = React;\n\nimport { Pane } from './Pane';\nimport { Resizer } from './Resizer';\nimport { ClientPosition, useDragState, DragState } from './util';\n\nconst DEFAULT_MIN_SIZE = 50;\n\nexport interface SplitPaneProps {\n\tsplit?: 'horizontal' | 'vertical';\n\tclassName?: string;\n\n\tchildren: React.ReactChild[];\n\n\tdefaultSizes?: number[];\n\tminSize?: number | number[];\n\n    style?: React.CSSProperties;\n\n\tonDragStarted?: () => void;\n\tonChange?: (sizes: number[]) => void;\n\tonDragFinished?: (sizes: number[]) => void;\n}\n\nexport interface SplitPaneResizeOptions extends SplitPaneProps {\n\tsplit: 'horizontal' | 'vertical';\n\tclassName: string;\n}\n\ninterface ResizeState {\n\tindex: number;\n}\n\nfunction getNodeKey(node: React.ReactChild, index: number): string {\n\tif (typeof node === 'object' && node && node.key != null) {\n\t\treturn 'key.' + node.key;\n\t}\n\n\treturn 'index.' + index;\n}\n\nfunction getMinSize(index: number, minSizes?: number | number[]): number {\n\tif (typeof minSizes === 'number') {\n\t\tif (minSizes > 0) {\n\t\t\treturn minSizes;\n\t\t}\n\t} else if (minSizes instanceof Array) {\n\t\tconst value = minSizes[index];\n\t\tif (value > 0) {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\treturn DEFAULT_MIN_SIZE;\n}\n\nfunction getDefaultSize(index: number, defaultSizes?: number[]): number {\n\tif (defaultSizes) {\n\t\tconst value = defaultSizes[index];\n\t\tif (value >= 0) {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\treturn 1;\n}\n\nfunction move(sizes: number[], index: number, offset: number, minSizes: number | number[] | undefined): number {\n\tif (!offset || index < 0 || index + 1 >= sizes.length) {\n\t\treturn 0;\n\t}\n\n\tconst firstMinSize = getMinSize(index, minSizes);\n\tconst secondMinSize = getMinSize(index + 1, minSizes);\n\n\tconst firstSize = sizes[index] + offset;\n\tconst secondSize = sizes[index + 1] - offset;\n\n\tif (offset < 0 && firstSize < firstMinSize) {\n\t\t// offset is negative, so missing and pushed are, too\n\t\tconst missing = firstSize - firstMinSize;\n\t\tconst pushed = move(sizes, index - 1, missing, minSizes);\n\n\t\toffset -= missing - pushed;\n\t} else if (offset > 0 && secondSize < secondMinSize) {\n\t\tconst missing = secondMinSize - secondSize;\n\t\tconst pushed = move(sizes, index + 1, missing, minSizes);\n\n\t\toffset -= missing - pushed;\n\t}\n\n\tsizes[index] += offset;\n\tsizes[index + 1] -= offset;\n\n\treturn offset;\n}\n\nconst defaultProps = {\n\tsplit: 'vertical' as const,\n\tclassName: '',\n};\n\nfunction useSplitPaneResize(options: SplitPaneResizeOptions): {\n\tchildPanes: {\n\t\tkey: string;\n\t\tnode: React.ReactNode;\n\t\tref: React.RefObject<HTMLDivElement>;\n\t\tsize: number;\n\t\tminSize: number;\n\t}[];\n\tresizeState: ResizeState | null;\n\thandleDragStart: (index: number, pos: ClientPosition) => void;\n} {\n\tconst { children, split, defaultSizes, minSize: minSizes, onDragStarted, onChange, onDragFinished } = options;\n\n\tconst [sizes, setSizes] = useState(new Map<string, number>());\n\tconst paneRefs = useRef(new Map<string, React.RefObject<HTMLDivElement>>());\n\n\tconst getMovedSizes = useCallback(\n\t\t(dragState: DragState<ResizeState> | null): number[] => {\n\t\t\tconst collectedSizes = children.map(\n\t\t\t\t(node, index) =>\n\t\t\t\t\tsizes.get(getNodeKey(node, index)) || getDefaultSize(index, defaultSizes),\n\t\t\t);\n\n\t\t\tif (dragState) {\n\t\t\t\tconst {\n\t\t\t\t\toffset,\n\t\t\t\t\textraState: { index },\n\t\t\t\t} = dragState;\n\t\t\t\tmove(collectedSizes, index, offset, minSizes);\n\t\t\t}\n\n\t\t\treturn collectedSizes;\n\t\t},\n\t\t[children, defaultSizes, minSizes, sizes],\n\t);\n\n\tconst handleDragFinished = useCallback(\n\t\t(dragState: DragState<ResizeState>) => {\n\t\t\tconst movedSizes = getMovedSizes(dragState);\n\n\t\t\tsetSizes(\n\t\t\t\tnew Map(\n\t\t\t\t\tchildren.map((node, index): [string, number] => [\n\t\t\t\t\t\tgetNodeKey(node, index),\n\t\t\t\t\t\tmovedSizes[index],\n\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (onDragFinished) {\n\t\t\t\tonDragFinished(movedSizes);\n\t\t\t}\n\t\t},\n\t\t[children, getMovedSizes, onDragFinished],\n\t);\n\n\tconst [dragState, beginDrag] = useDragState<ResizeState>(split, handleDragFinished);\n\tconst movedSizes = useMemo(() => getMovedSizes(dragState), [dragState, getMovedSizes]);\n\tconst resizeState = dragState ? dragState.extraState : null;\n\n\tuseEffect(() => {\n\t\tif (onChange && dragState) {\n\t\t\tonChange(movedSizes);\n\t\t}\n\t}, [dragState, movedSizes, onChange]);\n\n\tconst childPanes = useMemo(() => {\n\t\tconst prevPaneRefs = paneRefs.current;\n\t\tpaneRefs.current = new Map<string, React.RefObject<HTMLDivElement>>();\n\n\t\treturn children.map((node, index) => {\n\t\t\tconst key = getNodeKey(node, index);\n\n\t\t\tconst ref = prevPaneRefs.get(key) || React.createRef();\n\t\t\tpaneRefs.current.set(key, ref);\n\n\t\t\tconst minSize = getMinSize(index, minSizes);\n\n\t\t\treturn { key, node, ref, minSize };\n\t\t});\n\t}, [children, minSizes]);\n\n\tconst childPanesWithSizes = useMemo(\n\t\t() =>\n\t\t\tchildPanes.map((child, index) => {\n\t\t\t\tconst size = movedSizes[index];\n\t\t\t\treturn { ...child, size };\n\t\t\t}),\n\t\t[childPanes, movedSizes],\n\t);\n\n\tconst handleDragStart = useCallback(\n\t\t(index: number, pos: ClientPosition): void => {\n\t\t\tconst sizeAttr = split === 'vertical' ? 'width' : 'height';\n\n\t\t\tconst clientSizes = new Map(\n\t\t\t\tchildPanes.map(({ key, ref }): [string, number] => {\n\t\t\t\t\tconst size = ref.current ? ref.current.getBoundingClientRect()[sizeAttr] : 0;\n\t\t\t\t\treturn [key, size];\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tif (onDragStarted) {\n\t\t\t\tonDragStarted();\n\t\t\t}\n\n\t\t\tbeginDrag(pos, { index });\n\t\t\tsetSizes(clientSizes);\n\t\t},\n\t\t[beginDrag, childPanes, onDragStarted, split],\n\t);\n\n\treturn { childPanes: childPanesWithSizes, resizeState, handleDragStart };\n}\n\nexport const SplitPane = React.memo((props: SplitPaneProps) => {\n\tconst options = { ...defaultProps, ...props };\n\tconst { split, className, style: styleProps } = options;\n\n\tconst { childPanes, resizeState, handleDragStart } = useSplitPaneResize(options);\n\n\tconst splitStyleProps: React.CSSProperties =\n\t\tsplit === 'vertical'\n\t\t\t? {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\tflexDirection: 'row',\n\t\t\t  }\n\t\t\t: {\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\tminHeight: '100%',\n\t\t\t\t\twidth: '100%',\n\t\t\t  };\n\n\tconst style: React.CSSProperties = {\n\t\tdisplay: 'flex',\n\t\tflex: 1,\n\t\theight: '100%',\n\t\tposition: 'absolute',\n\t\toutline: 'none',\n\t\toverflow: 'hidden',\n\t\t...splitStyleProps,\n        ...styleProps\n\t};\n\tconst classes = ['SplitPane', split, className].join(' ');\n\n\tconst dragLayerStyle: React.CSSProperties = {\n\t\tposition: 'absolute',\n\t\ttop: 0,\n\t\tright: 0,\n\t\tbottom: 0,\n\t\tleft: 0,\n\t};\n\tconst dragLayerClasses = ['DragLayer', split, resizeState ? 'resizing' : '', className].join(' ');\n\n\tconst entries: React.ReactNode[] = [];\n\n\tchildPanes.forEach(({ key, node, ref, size, minSize }, index) => {\n\t\tif (index !== 0) {\n\t\t\tconst resizing = resizeState && resizeState.index === index - 1;\n\n\t\t\tentries.push(\n\t\t\t\t<Resizer\n\t\t\t\t\tkey={'resizer.' + index}\n\t\t\t\t\tsplit={split}\n\t\t\t\t\tclassName={className + (resizing ? ' resizing' : '')}\n\t\t\t\t\tindex={index - 1}\n\t\t\t\t\tonDragStarted={handleDragStart}\n\t\t\t\t/>,\n\t\t\t);\n\t\t}\n\t\tentries.push(\n\t\t\t<Pane\n\t\t\t\tkey={'pane.' + key}\n\t\t\t\tforwardRef={ref}\n\t\t\t\tsize={size}\n\t\t\t\tminSize={minSize}\n\t\t\t\tsplit={split}\n\t\t\t\tclassName={className}\n\t\t\t>\n\t\t\t\t{node}\n\t\t\t</Pane>,\n\t\t);\n\t});\n    return (\n\t\t<div className={classes} style={style}>\n\t\t\t<div className={dragLayerClasses} style={dragLayerStyle} />\n\t\t\t{entries}\n\t\t</div>\n\t);\n});\nSplitPane.displayName = 'SplitPane';\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nconst { useCallback, useMemo, useState, useEffect } = React;\n\nexport interface ClientPosition {\n\tclientX: number;\n\tclientY: number;\n}\n\nexport function useEventListener<K extends keyof DocumentEventMap>(\n\ttype: K,\n\tlistener?: (this: Document, ev: DocumentEventMap[K]) => void,\n): void {\n\tuseEffect(() => {\n\t\tif (!listener) return;\n\n\t\tdocument.addEventListener(type, listener);\n\n\t\treturn (): void => {\n\t\t\tdocument.removeEventListener(type, listener);\n\t\t};\n\t}, [type, listener]);\n}\n\nexport interface DragState<T> {\n\toffset: number;\n\textraState: T;\n}\n\ninterface DragStateHandlers<T> {\n\tbeginDrag: (pos: ClientPosition, extraState: T) => void;\n\tdragState: DragState<T> | null;\n\tonMouseMove?: (event: ClientPosition) => void;\n\tonTouchMove?: (event: TouchEvent) => void;\n\tonMouseUp?: () => void;\n}\n\nfunction useDragStateHandlers<T>(\n\tsplit: 'horizontal' | 'vertical',\n\tonDragFinished: (dragState: DragState<T>) => void,\n): DragStateHandlers<T> {\n\tconst [dragging, setDragging] = useState<[T, number] | null>(null);\n\tconst [current, setCurrent] = useState<number>(0);\n\n\tconst beginDrag = useCallback(\n\t\t(event: ClientPosition, extraState: T): void => {\n\t\t\tconst pos = split === 'vertical' ? event.clientX : event.clientY;\n\t\t\tsetDragging([extraState, pos]);\n\t\t\tsetCurrent(pos);\n\t\t},\n\t\t[split],\n\t);\n\n\tconst [dragState, onMouseUp] = useMemo(() => {\n\t\tif (!dragging) {\n\t\t\treturn [null, undefined];\n\t\t}\n\n\t\tconst [extraState, origin] = dragging;\n\t\tconst dragState: DragState<T> = { offset: current - origin, extraState };\n\n\t\tconst onMouseUp = (): void => {\n\t\t\tReactDOM.unstable_batchedUpdates(() => {\n\t\t\t\tsetDragging(null);\n\t\t\t\tonDragFinished(dragState);\n\t\t\t});\n\t\t};\n\n\t\treturn [dragState, onMouseUp];\n\t}, [current, dragging, onDragFinished]);\n\n\tconst [onMouseMove, onTouchMove] = useMemo(() => {\n\t\tif (!dragging) {\n\t\t\treturn [undefined, undefined];\n\t\t}\n\n\t\tconst onMouseMove = (event: ClientPosition): void => {\n\t\t\tconst pos = split === 'vertical' ? event.clientX : event.clientY;\n\t\t\tsetCurrent(pos);\n\t\t};\n\n\t\tconst onTouchMove = (event: TouchEvent): void => {\n\t\t\tonMouseMove(event.touches[0]);\n\t\t};\n\n\t\treturn [onMouseMove, onTouchMove];\n\t}, [dragging, split]);\n\n\treturn { beginDrag, dragState, onMouseMove, onTouchMove, onMouseUp };\n}\n\nexport function useDragState<T>(\n\tsplit: 'horizontal' | 'vertical',\n\tonDragFinished: (dragState: DragState<T>) => void,\n): [DragState<T> | null, (pos: ClientPosition, extraState: T) => void] {\n\tconst { beginDrag, dragState, onMouseMove, onTouchMove, onMouseUp } = useDragStateHandlers<T>(\n\t\tsplit,\n\t\tonDragFinished,\n\t);\n\n\tuseEventListener('mousemove', onMouseMove);\n\tuseEventListener('touchmove', onTouchMove);\n\tuseEventListener('mouseup', onMouseUp);\n\n\treturn [dragState, beginDrag];\n}\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\EditorForm.tsx.ittf\n*/\nimport * as React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport classnames from 'classnames';\nimport Form from './Form';\nimport withStatus from './withStatus';\nimport withValidation from './withValidation';\nimport {ThemeName, withThemeName} from '../preferences';\nimport LargeInput from '../../components/widgets/LargeInput';\nimport {c} from '../../components/ThemeProvider';\nimport {FormField} from './types';\n\nfunction validationOk(value: string):  Error | null {\n\n    return null;\n}\n\nexport type EditFormProps = { \n    visible: boolean;\n    title: string;\n    action: string;\n    fields: { \n        [key: string]: FormField;\n    };\n    className?: string;\n    onSubmit: (details: { \n        [key: string]: string;\n    }) => void;\n    onDismiss: () => void;\n};\ntype Props = EditFormProps & { \n    classes: any;\n    theme: ThemeName;\n};\ntype State = { \n    values?: { \n        [key: string]: any;\n    };\n    visible: boolean;\n};\nfunction stateDefaultValues(fields: { \n    [key: string]: FormField;\n}):  { \n    [key: string]: string;\n} {\n\n    const ret: { \n        [key: string]: string;\n    } = {};\n    Object.keys(fields).map(k => \n    \n        ret[k] = fields[k].default\n    )\n    return ret;\n}\nfunction optionsSelected(options: { \n    label: string;\n    value: string;\n}[], value: string):  any {\n\n    const selected = options.find(option => \n    \n        option.value === value\n    );\n    return selected ? selected.value : undefined;\n}\n\n// @ts-ignore\nconst SubmitButton = withStatus(Fab); \n\n// @ts-ignore\nconst ValidatedInput = withValidation(TextField); \nclass EditorForm extends React.Component<Props, State> {\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (state.visible !== props.visible) {\n            if (props.visible) {\n                return {\n                        visible: props.visible, \n                        values: stateDefaultValues(props.fields)\n                     };\n            }\n            else {\n                return {\n                        visible: props.visible\n                     };\n            }\n        }\n        return null;\n    }\n    state = {\n        visible: this.props.visible, \n        values: stateDefaultValues(this.props.fields)\n    }\n    ;\n    _handleSubmit = () => \n    \n        this.props.onSubmit(this.state.values)\n    ;\n    render() {\n        \n        // console.log('EditForm.state.values', this.state.values);\n        const {\n            classes, \n            visible, \n            title, \n            action, \n            fields, \n            theme, \n            className, \n            onDismiss\n         } = this.props;\n        \n        // console.log('EditForm.state.values', this.state.values);\n        return visible ?  (\n                <div\n                 className={classes.container}>\n                    <div\n                     className={classnames(css(styles.modal, theme === 'dark' ? styles.contentDark : styles.contentLight), className)}>\n                        <div\n                         className={classes.title}>\n                            <Typography\n                             variant=\"h6\">\n                                {title}\n                            </Typography>\n                        </div>\n                        <Form\n                         onSubmit={this._handleSubmit}>\n                            {\n                                Object.keys(fields).map((k, i) => {\n                                \n                                    const field = fields[k];\n                                    const value = this.state.values[k];\n                                    return ((([\n                                            'text', \n                                            'checkbox'\n                                        ].indexOf(field.type)) > -1\n                                        ) ?  (\n                                            <div\n                                             key={i} className={classes.fieldContainer}>\n                                                <ValidatedInput \n                                                    \n                                                    // @ts-ignore\n                                                    autoFocus\n                                                    type={field.type}\n                                                    className={classes.textField}\n                                                    margin=\"normal\"\n                                                    label={field.label}\n                                                    value={value}\n                                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>  \n                                                            this.setState({\n                                                                values: {\n                                                                    ...this.state.values, \n                                                                    [k]: e.target.value\n                                                                 }\n                                                             })\n                                                    }\n                                                    placeholder={field.label}\n                                                    validate={field.onValidate || validationOk}\n                                                 />\n                                            </div>\n                                            )\n                                         : field.type === 'select' ?  (\n                                                <div\n                                                 key={i} className={classes.fieldContainer}>\n                                                    <ValidatedInput \n                                                        \n                                                        // @ts-ignore\n                                                        select\n                                                        className={classes.textField}\n                                                        label={field.label}\n                                                        SelectProps={{ MenuProps: { className: classes.menu  }  }\n                                                        }\n                                                        helperText={field.helperText}\n                                                        margin=\"normal\"\n                                                        value={value}\n                                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n                                                            \n                                                                // console.log('onChange', k, e.target.value);\n                                                                this.setState({\n                                                                    values: {\n                                                                        ...this.state.values, \n                                                                        [k]: e.target.value\n                                                                     }\n                                                                 })\n                                                        }\n                                                        placeholder={field.label}\n                                                        validate={field.onValidate || validationOk}\n                                                    >\n                                                        {\n                                                            field.options && field.options.map((option) => \n                                                            \n                                                                 (\n                                                                <MenuItem\n                                                                 key={option.value} value={option.value}>\n                                                                    {option.label}\n                                                                </MenuItem>\n                                                                )\n                                                            \n                                                            )\n                                                        }\n                                                    </ValidatedInput>\n                                                </div>\n                                                )\n                                             : null);\n                                }\n                                )\n                            }\n                            <div\n                             className={css(styles.buttons)}>\n                                <div\n                                 className={classes.button}>\n                                    <SubmitButton\n                                    \n                                    // @ts-ignore\n                                     type=\"submit\" color=\"primary\" variant=\"extended\">\n                                        {action}\n                                    </SubmitButton>\n                                </div>\n                                <div\n                                 className={classes.button}>\n                                    <Fab \n                                        \n                                        // @ts-ignore\n                                        type=\"button\"\n                                        color=\"secondary\"\n                                        variant=\"extended\"\n                                        onClick={onDismiss}\n                                    >\n                                        Cancel\n                                    </Fab>\n                                </div>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n                )\n             : null;\n    }\n}\nconst styles = StyleSheet.create({ title: { height: 72,  fontSize: 24,  width: '100%',  lineHeight: '24px',  display: 'flex',  flexShrink: 0,  alignItems: 'center',  justifyContent: 'center',  boxShadow: '0 1px 0 rgba(36, 44, 58, 0.1)'  },  subtitle: { fontSize: 16,  fontWeight: 500,  padding: 0,  lineHeight: '22px',  margin: '16px 0 6px 0'  },  buttons: { margin: '20px 0 0 0',  display: 'flex',  justifyContent: 'space-around'  },  caption: { marginTop: 24,  fontSize: '16px',  lineHeight: '22px',  textAlign: 'center'  },  link: { cursor: 'pointer',  color: c('primary'),  textDecoration: 'underline'  },  modal: { display: 'flex',  flexDirection: 'column',  position: 'relative',  textAlign: 'start',  borderRadius: 4,  boxShadow: '0 1px 4px rgba(36, 44, 58, 0.3)'  },  close: { appearance: 'none',  borderRadius: '1em',  outline: 0,  padding: 0,  position: 'absolute',  right: '-1em',  top: '-1em',  width: '2em',  height: '2em',  background: c('background'),  border: `2px solid ${c('border')}`,  boxShadow: '0 1.5px 3px rgba(0, 0, 0, .16)',  color: 'white',  fontSize: '1em',  fontWeight: 'bold',  textAlign: 'center'  },  contentLight: { backgroundColor: c('content'),  color: c('text')  },  contentDark: { backgroundColor: c('content'),  color: c('text'),  border: `1px solid ${c('border')}`  }  }); \nconst muiStyles = (theme: Theme) => \n\n    createStyles({\n        container: {\n            padding: '20px'\n         }, \n        title: {\n            padding: '10px', \n            boxShadow: '0 1px 0 rgba(36, 44, 58, 0.1)'\n         }, \n        fieldContainer: {\n            padding: '10px'\n         }, \n        button: {\n            padding: '5px'\n         }, \n        textField: {\n            marginLeft: theme.spacing(1), \n            marginRight: theme.spacing(1), \n            width: '100%'\n         }\n     })\n;\n\nexport default withStyles(muiStyles)(withThemeName(EditorForm));\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\Form.tsx.ittf\n*/\nimport * as React from 'react';\nimport {Register, Unregister, Update, FormValidation} from './types';\n\nexport type FormProps = { \n    onSubmit: () => void;\n    children: React.ReactNode;\n};\ntype State = { \n    isValid: boolean;\n};\n\nexport const FormValidationContext = React.createContext<FormValidation | undefined>(undefined);\n\nexport default class Form extends React.Component<FormProps, State> {\n        state = {\n            isValid: false\n        }\n        ;\n        componentDidMount() {\n            this._update();\n        }\n        _key = 0;\n        _inputs: Array<{ \n            key: number;\n            validate: () => Error | null;\n            focus: () => void;\n        }> = [];\n        _register: Register = ({\n            validate, \n            focus\n         }) => {\n        \n            const key = this._key++;\n            this._inputs.push({\n                key, \n                validate, \n                focus\n             })\n            return key;\n        }\n        ;\n        _unregister: Unregister = (key: number) => \n        \n            this._inputs = this._inputs.filter(it => \n            \n                it.key !== key\n            )\n        \n        ;\n        _update: Update = () => \n        \n            this.setState({\n                isValid: this._inputs.every(it => \n                \n                    !it.validate()\n                )\n             })\n        ;\n        _handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        \n            e.preventDefault();\n            for (const input of this._inputs) {\n                if (input.validate()) {\n                    input.focus();\n                    return ;\n                }\n            }\n            this.props.onSubmit();\n        }\n        ;\n        render() {\n            return  (\n                <FormValidationContext.Provider\n                 value={{\n                        register: this._register, \n                        unregister: this._unregister, \n                        update: this._update, \n                        valid: this.state.isValid\n                     }}>\n                    <form\n                     onSubmit={this._handleSubmit}>\n                        {this.props.children}\n                    </form>\n                </FormValidationContext.Provider>\n                )\n            ;\n        }\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\index.tsx.ittf\n*/\nimport {FormField, Register, Unregister, Update} from './types';\nimport Form from './Form';\nimport EditorForm from './EditorForm';\nimport withValidation from './withValidation';\nimport withStatus from './withStatus';\n\nexport {Form, EditorForm, withValidation, withStatus};\n\nexport type {FormField, Register, Unregister, Update};\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\withStatus.tsx.ittf\n*/\nimport * as React from 'react';\nimport {FormValidationContext} from './Form';\nimport {$Subtract} from '../../types';\n\n// The property ( 'disabled' ) is injected in the component\n// enhanced by withStatus ( should be 'withEnabled' ).\n// The 'disabled' status is inferred from the FormValidationContext.Consumer.\ntype InjectedProps = { \n    disabled: boolean | undefined;\n};\n\nexport default function withStatus<P extends InjectedProps>(Comp: React.ComponentType<P>):  React.ComponentType<$Subtract<P, InjectedProps>> {\n    \n        function withStatusFn(props: any) {\n        \n            return  (\n                <FormValidationContext.Consumer\n                >\n                    {\n                        (value: { \n                            valid: boolean;\n                        } | undefined = {\n                            valid: true\n                         }) => \n                        \n                             (\n                            <Comp\n                             disabled={!value.valid} {...props} />\n                            )\n                        \n                        \n                    }\n                </FormValidationContext.Consumer>\n                )\n            ;\n        }\n        withStatusFn.displayName = `withValidation(${Comp.displayName || Comp.name})`;\n        return withStatusFn;\n    }\n","/*\n    artifact generator: C:\\My\\wizzi\\stfnbssl\\wizzi.v07\\packages\\wizzi-js\\lib\\artifacts\\ts\\module\\gen\\main.js\n    package: wizzi-js@0.7.14\n    primary source IttfDocument: C:\\My\\wizzi\\stfnbssl\\wizzi.apps\\packages\\wizzi.editor\\.wizzi\\src\\features\\form\\withValidation.tsx.ittf\n*/\nimport * as React from 'react';\nimport {$Subtract} from '../../types';\nimport {FormValidationContext} from './Form';\nimport {FormValidation} from './types';\ntype ExternalProps = { \n    value: any;\n    validate: (value: any) => Error | null;\n    helperText?: string;\n};\ntype Props = ExternalProps & { \n    validation: FormValidation;\n};\ntype InjectedProps = { \n    error: Error | null;\n};\ntype State = { \n    initial: boolean;\n    error: Error | null;\n    value: any;\n};\nexport default function withValidation<P extends InjectedProps>(Comp: React.ComponentType<P>):  React.ComponentType<$Subtract<P, InjectedProps> & ExternalProps> {\n    \n        class EnhancedComponent extends React.Component<Props, State> {\n            static displayName = `withValidation(${Comp.displayName ?? Comp.name})`;\n            static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n                const initial = prevState.value !== nextProps.value ? false : prevState.initial;\n                return {\n                        initial, \n                        error: initial ? null : nextProps.validate ? nextProps.validate(nextProps.value) : null, \n                        value: nextProps.value\n                     };\n            }\n            state = {\n                initial: true, \n                error: null, \n                value: this.props.value\n            }\n            ;\n            _key: number = 0;\n            _root = React.createRef<any>();\n            componentDidMount() {\n                this._key = this.props.validation.register({\n                    validate: this._validate, \n                    focus: this._focus\n                 })\n                ;\n            }\n            componentDidUpdate(prevProps: Props) {\n                if (prevProps.value !== this.props.value) {\n                    this.props.validation.update();\n                }\n            }\n            componentWillUnmount() {\n                this.props.validation.unregister(this._key);\n            }\n            _validate = () => \n                this.props.validate(this.props.value);\n            _focus = () => {\n                this._root.current?.focus?.();\n                if (this.state.initial) {\n                    this.setState({\n                        initial: false, \n                        error: this.props.validate(this.props.value)\n                     })\n                }\n            };\n            render() {\n                \n                // @ts-ignore\n                const { helperText,  ...other  } = this.props; \n                \n                // @ts-ignore\n                return  ( <Comp \n                        ref={this._root}\n                        error={this.state.error}\n                        \n                        // @ts-ignore\n                        helperText={this.state.error ? this.state.error.message : helperText}\n                        {...other}\n                     />\n                    )\n                ;\n                \n            }\n        }\n        return (props) =>  \n                 (\n                <FormValidationContext.Consumer\n                >\n                    {\n                        (value: any) => {\n                        \n                            return  (\n                                <EnhancedComponent\n                                 validation={value} {...props} />\n                                )\n                            ;\n                        }\n                        \n                    }\n                </FormValidationContext.Consumer>\n                )\n            \n        ;\n        \n    }\n","export default __webpack_public_path__ + \"assets/c30688b34674907e653a3ed6c4f4b32e.png\";","export default __webpack_public_path__ + \"assets/5164d45d60e8aaa815782671bc55c243.png\";","export default __webpack_public_path__ + \"assets/7ccdedc1554fd42cf97740128c0ab1db.png\";","export default __webpack_public_path__ + \"assets/883481150a50d23d04b3cb88d03713d4.png\";","export default __webpack_public_path__ + \"assets/57a5dfd897cd26233394742647bb768e.png\";","export default __webpack_public_path__ + \"assets/d96019678d8d19c83e5cd22d04b745ad.png\";","export default __webpack_public_path__ + \"assets/51631d4fcbedcb496eff14fedc2f6139.png\";","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAKA;;A;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAUA;AADA;AAGA;AADA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAMA;;A;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AADA;AAKA;;A;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AADA;AAKA;;A;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAUA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAMA;;A;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AADA;AAGA;AADA;AAKA;;A;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAKA;;A;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AANA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAcA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAQA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAEA;AADA;AAGA;AAAA;AAAA;AADA;AAOA;AArBA;AACA;AADA;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAUA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAcA;AAGA;AADA;AACA;AAGA;AAGA;AADA;AACA;AAGA;AAIA;AACA;AAIA;AAKA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AALA;AAWA;AASA;AACA;AACA;AAAA;AAEA;AADA;AAGA;AADA;AAKA;AAAA;AADA;AAUA;AAGA;AAJA;AAuBA;AAAA;AAEA;AADA;AAKA;AAIA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAZA;AAkBA;AAAA;AAEA;AADA;AAKA;AAIA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AADA;AAIA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAGA;AAJA;AAMA;AAAA;AAAA;AADA;AA1BA;AAkCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AA1GA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtNA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;AAMA;AACA;AAAA;AACA;;;;;;AAPA;AACA;AACA;;;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AAAA;AADA;AAKA;AADA;AAGA;AAGA;AAJA;AAQA;AAAA;AADA;AAKA;AAAA;AADA;AAUA;;;;AAlDA;AACA;AADA;AAoDA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AA1DA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AA+BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AAAA;AAAA;AADA;AAKA;AADA;AAGA;AADA;AAKA;AADA;AAGA;AADA;AAQA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAUA;AADA;AAMA;AAAA;AAAA;AADA;AAiBA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAKA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAkBA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAaA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAQA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAfA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAlCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AACA;AACA;AAAA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAsCA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AAEA;AAGA;AAGA;AADA;AAKA;AACA;AACA;AAGA;AADA;AACA;AAIA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;;;AAEA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AAFA;AACA;AAGA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AAIA;AADA;AACA;AAGA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;;;;;;AAlGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAyFA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AAWA;AAAA;AAAA;AADA;AAGA;AAAA;AAEA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AADA;AAGA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAUA;AAIA;AACA;AAEA;AAGA;AACA;AAFA;AACA;AAOA;AAIA;AACA;AAAA;AACA;AAMA;AACA;AAFA;AAKA;AAQA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAGA;AAtDA;AA0DA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAIA,2YAEA;AAHA;AAOA;AACA;AAFA;AAKA;AACA;AAEA;AADA;AAIA;AACA;AAAA;AAKA;AAKA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAGA;AADA;AAGA;AADA;AASA;AACA;AAAA;AACA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAGA;AADA;AAGA;AADA;AAYA;AACA;AAEA;AAKA;AACA;AAAA;AAKA;AAOA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAsBA;AACA;AACA;AACA;AACA;AALA;AAUA;AADA;AAaA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAAA;AADA;AAMA;AAAA;AADA;AAMA;AAAA;AADA;AAMA;AAAA;AADA;AAOA;;;AAthBA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;AAzBA;AACA;AAmiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AApBA;AAwBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAzDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAoBA;;;;;;;;;;;;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AADA;AAMA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAcA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAcA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAcA;AADA;AAKA;AADA;AAOA,qYAEA;AAHA;AAOA;AACA;AAFA;AAKA;AACA;AAEA;AADA;AAIA;AAEA;AAcA;AACA;AA6BA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAcA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AADA;AAMA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAgBA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAgBA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAgBA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAgBA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAgBA;AADA;AAGA;AADA;AAGA;AAAA;AACA;AADA;AADA;AAgBA;;;;AA/SA;AACA;AAgTA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AADA;AArCA;AACA;AAyCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrYA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAGA;AADA;AAQA;AADA;AAWA;AADA;AAWA;AADA;AAQA;AADA;AAQA;AADA;AAYA;AAOA;AAKA;AADA;AAWA;AADA;AAYA;AA3IA;AACA;AADA;AAAA;AACA;AA6IA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAzBA;AACA;AAgCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAOA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAFA;AAtCA;AACA;AA8CA;;;;;;;;;;;;;AACA;AACA;AAEA;AADA;AASA;AADA;AAGA;AADA;AAGA;AAAA;AADA;AAIA;AADA;AAaA;;;;AA/BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAZA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA2BA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAEA;AADA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAKA;AADA;AAIA;AACA;AACA;AACA;AACA;AARA;AAWA;AADA;AAKA;AACA;AACA;AACA;AAJA;AAYA;AADA;AAKA;AAAA;AAAA;AADA;AAGA;AADA;AAKA;AAAA;AAAA;AADA;AAOA;AADA;AAEA;AAGA;AACA;AACA;AACA;AANA;AAeA;;;AAtHA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;;;;AAnBA;AACA;AADA;AAyHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;AACA;AACA;AAEA;AADA;AAGA;AADA;AAOA;;;;AAZA;AACA;AADA;AAcA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAPA;;A;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AADA;AAWA;AAEA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AADA;AAKA;AADA;AASA;AADA;AAOA;AAEA;AACA;AAEA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAMA;AADA;AAUA;AADA;AAUA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AAtBA;AAwBA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAfA;AAqBA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAzGA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AA9BA;AA+BA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AADA;AACA;AArCA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAAA;AAAA;AA0CA;AACA;AADA;AAGA;AAEA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AADA;AAIA;AACA;AACA;AAEA;AACA;AAFA;AAQA;AACA;AAFA;AAQA;AACA;AAFA;AAQA;AACA;AAFA;AAQA;AACA;AAFA;AASA;AACA;AAFA;AAQA;AACA;AAjDA;AAsDA;AA3GA;AACA;AADA;AAAA;AA6GA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAdA;AATA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA;AAIA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AACA;AAUA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAMA;AACA;AADA;AADA;AACA;AAUA;AAIA;AADA;AACA;AAMA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAMA;AACA;AATA;AAFA;AAFA;AAmBA;AAGA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AADA;AADA;AAKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AADA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AADA;AACA;AAMA;AAEA;AADA;AACA;AAEA;AAIA;AADA;AACA;AAGA;AAIA;AADA;AACA;AAGA;AAIA;AADA;AACA;AAGA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;;;AA1UA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;AA6RA;AACA;AAEA;AADA;AAKA;AADA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAAA;AADA;AAMA;AAAA;AADA;AAZA;AAsBA;AADA;AAGA;AADA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AADA;AAUA;AACA;AACA;AAIA;AAIA;AAIA;AAfA;AAuBA;AACA;AACA;AACA;AACA;AAGA;AAAA;AADA;AAMA;AAAA;AADA;AASA;AAAA;AADA;AAMA;AAAA;AADA;AAzBA;AAoCA;AAAA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AA2BA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AANA;AAUA;AADA;AAIA;AAjBA;AA+BA;;;AA3fA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAlBA;AACA;AAwgBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AApDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAmBA;;;;;;;;;;;;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AAEA;AADA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA+BA;;;;AArFA;AACA;AADA;AAuFA;AACA;AACA;AACA;AAFA;AADA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAwBA;AACA;AAMA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AAoBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AANA;AAYA;AACA;AApCA;AACA;AADA;AAuCA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AA/CA;AAgDA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAtDA;AAuDA;AACA;AACA;AACA;AAAA;AAWA;AACA;AAGA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5FA;AA6FA;AACA;AAAA;AACA;AACA;AACA;AACA;AAlGA;AAmGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA5GA;AA6GA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AAxHA;AACA;AADA;AACA;AADA;AACA;AADA;AA+HA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAIA;AACA;AACA;AA3IA;AA4IA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAnJA;AAoJA;AACA;AAAA;AACA;AACA;AAvJA;AA0JA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AASA;AACA;AACA;AAHA;AASA;AACA;AAFA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AACA;AA5MA;AAsNA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AAMA;AADA;AAQA;AADA;AAGA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAgBA;AACA;AAnQA;AAoQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAqBA;AACA;AA/SA;AAkTA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AACA;AAtTA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AALA;AAUA;AACA;AAZA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AA6TA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAiBA;AAvWA;AACA;AADA;AAAA;AA0WA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AApCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AAAA;;;;;;;;;;;;AAKA;AACA;AACA;AAFA;AACA;AAYA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;AArGA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AA8FA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAiBA;AADA;AAMA;AACA;AACA;AACA;AACA;AALA;AAWA;AAAA;AAAA;AADA;AAQA;;;;AA5KA;AACA;AADA;AAEA;AADA;AACA;AAFA;AA8KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAVA;AAcA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAnDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAGA;AACA;AAAA;AACA;;;;;;AAtFA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAoEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AACA;AAOA;AAEA;AADA;AAIA;;;;AAvGA;AACA;AAwGA;;A;;;;;;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AAEA;AACA;AAIA;AADA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AACA;AAEA;AADA;AAIA;AAEA;AACA;AACA;AAIA;AADA;AAGA;AADA;AAKA;AAEA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAKA;AAEA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AADA;AAMA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAlBA;AAdA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAYA;AAEA;AADA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;AAEA;AACA;AAAA;AACA;;;;;;AA/CA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AAwCA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AANA;AASA;AAAA;AADA;AAKA;AADA;AAGA;AADA;AAGA;AADA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AAlBA;AAuBA;;;;AAxGA;AACA;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AADA;AAGA;AACA;AADA;AArCA;;A;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AADA;AAGA;AADA;AAGA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AADA;AAKA;AADA;AAMA;AADA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAlCA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAEA;AAAA;AADA;AAGA;AAAA;AADA;AAOA;;;;AAhBA;AACA;AAiBA;AAIA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AARA;;A;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AACA;;A;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AACA;;A;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AANA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AASA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AAEA;AAIA;;A;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AAEA;;A;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAEA;;A;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AACA;AADA;AADA;AAOA;AAKA;AAEA;AAIA;AACA;;A;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AAAA;AACA;;A;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AADA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AAEA;AACA;AAIA;;A;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AADA;AADA;AAMA;;A;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AAKA;AARA;AAcA;;A;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AAHA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAPA;AAYA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AAHA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAFA;AAIA;AALA;AASA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAwBA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAEA;AADA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAGA;AADA;AAKA;AADA;AAIA;AACA;AACA;AACA;AACA;AARA;AAWA;AADA;AAIA;AACA;AACA;AACA;AACA;AARA;AAWA;AADA;AAIA;AACA;AACA;AACA;AACA;AARA;AAWA;AADA;AAEA;AAGA;AACA;AACA;AACA;AANA;AAeA;;;AAvGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;;;;AAlBA;AACA;AADA;AA0GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AAEA;AADA;AACA;AAEA;AAEA;AADA;AACA;;;;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAIA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AATA;AAeA;;;;AA1CA;AACA;AA2CA;AACA;AAGA;AAEA;;A;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AADA;AAIA;;A;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAeA;AASA;AACA;AACA;AAFA;AAWA;AAAA;AADA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAcA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAiBA;AAWA;AAuBA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAYA;AADA;AACA;AAZA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AACA;AAAA;AACA;AAGA;AADA;AAKA;AACA;AACA;AA7BA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AADA;AAOA;AA/CA;AAAA;AAAA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AATA;AACA;AADA;AAAA;AAiDA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AACA;AASA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AAJA;AASA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AALA;AAcA;AAAA;AADA;AAcA;AAjEA;AACA;AADA;AAAA;AAmEA;AAIA;AADA;AAKA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAhBA;AAoBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAxCA;;A;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAAA;AACA;AADA;AAEA;AAHA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAhBA;AAqBA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAFA;AA3BA;;A;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAOA;AANA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAEA;AADA;AAMA;AADA;AAQA;AADA;AAGA;AADA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAtBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AADA;AADA;AA7EA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAoBA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAcA;AAIA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAUA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AALA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AA0BA;AACA;AA3BA;AACA;AADA;AAAA;AA6BA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAUA;AADA;AACA;AAVA;AAcA;AADA;AACA;AAdA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAkBA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAgBA;AADA;AAUA;AA9CA;AACA;AADA;AAAA;AAiDA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AATA;AAxBA;;A;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AAEA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AATA;AADA;;A;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AACA;AAQA;AACA;AACA;AACA;AAHA;AAQA;AAAA;AADA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AApBA;AADA;AADA;;A;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAAA;AADA;AAGA;AAAA;AAAA;AADA;AAcA;AADA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AANA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAeA;AAkBA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAUA;AACA;AAFA;AACA;AAVA;AACA;AADA;AACA;AADA;AACA;AADA;AA8CA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AApDA;AAsDA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AACA;AACA;AAlBA;AAAA;AAAA;AAqBA;AACA;AACA;AAAA;AACA;AAGA;AADA;AAKA;AACA;AACA;AAjCA;AAAA;AAAA;AAoCA;AACA;AACA;AAtCA;AAAA;AAAA;AA8DA;AAEA;AAAA;AAAA;AADA;AAGA;AADA;AAQA;AAzEA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AAPA;AACA;AADA;AAAA;AA2EA;;A;;;;;;;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAiBA;AAOA;AAsBA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AAJA;AASA;AADA;AAQA;AADA;AAQA;;A;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAsBA;AA2BA;AACA;AACA;AACA;AACA;AAJA;AASA;AAAA;AADA;AAGA;AADA;AAKA;AAAA;AADA;AAaA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAkBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAhEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AADA;AAIA;AAAA;AAAA;AADA;AAKA;;;;AAxFA;AACA;AADA;AA0FA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AA7BA;;A;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AADA;AAMA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAMA;AADA;AACA;AANA;AACA;AADA;AACA;AADA;AACA;AADA;AAuCA;AACA;AADA;AACA;AAEA;AACA;AACA;AA5CA;AA6CA;AACA;AADA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAKA;AACA;AAtDA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;AA4BA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAjCA;AAAA;AAAA;AAuDA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AADA;AAGA;AADA;AAKA;AACA;AADA;AAIA;AAAA;AAAA;AADA;AAHA;AAaA;AAhFA;AACA;AADA;AAAA;AACA;AADA;AAEA;AADA;AACA;AAiFA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAbA;AA9BA;;A;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAEA;AADA;AAGA;AADA;AAKA;AADA;AAGA;AACA;AACA;AACA;AAJA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AARA;AAmBA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AA1CA;AAgDA;;A;;;;;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAIA;AAEA;AADA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AARA;;A;;;;;;;;;;;;;;;;A;;;;;;;;;;;;;;;;;;;;AC7BA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;;A;;;;;;;;;;;;;;;AChDA;AACA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAQA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAQA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;;A;;;;;;;;;;;;;;;;;ACxSA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAcA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAwBA;AAMA;AAGA;AAIA;AACA;AACA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;;;;;;;;;;AAiBA;AACA;AACA;AAFA;AACA;AAIA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAWA;AAEA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAMA;AADA;AAKA;AACA;AACA;AAMA;AAAA;AADA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AADA;AAOA;AACA;AAlBA;AAwBA;AAAA;AADA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAFA;AADA;AAOA;AACA;AAtBA;AA6BA;AAAA;AADA;AAYA;AAIA;AADA;AAGA;AADA;AAEA;AAGA;AAAA;AAAA;AAHA;AAQA;AADA;AAEA;AAGA;AACA;AACA;AACA;AANA;AAiBA;;;AApKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;;;;AAhBA;AACA;AAsKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAdA;AACA;AAqBA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjRA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAMA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAOA;AAGA;AADA;AACA;AAMA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;AAnDA;AACA;AACA;;;AAkDA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AADA;AAOA;;;;AAzEA;AACA;;;A;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;A;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AAEA;AAOA;AADA;AAMA;AADA;AASA;AACA;AAAA;AACA;AACA;;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AAEA;AAkBA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAaA;AACA;AACA;AAHA;AACA;AAbA;AACA;AADA;AACA;AADA;AACA;AADA;AAqCA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA9CA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;AAFA;AAKA;AA1BA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAiCA;AACA;AAlCA;AAAA;AAAA;AAgDA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AA/DA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AACA;AADA;AACA;AAgEA;AAOA;AAEA;AADA;AAIA;AAQA;;A;;;;;;;;;;;;;AC9GA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;;;;ACAA;;A;;;;;;;;;;ACAA;;;A;;;;;;;;;;ACAA;;;A;;;;;;;;;A;;A;;A","sourceRoot":""}